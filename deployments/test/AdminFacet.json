{
  "address": "0xfc554Baa0773e4502b27342F385EbA23680d9BBE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isBlock",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_why",
          "type": "string"
        }
      ],
      "name": "admin_P2_blockUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_layerNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fromP2PerPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fromP2UsdtPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dailyReward_percent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_add_dailyReward_Percent",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isOpen",
          "type": "bool"
        }
      ],
      "name": "admin_P2_layer_setting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLimit",
          "type": "uint256"
        }
      ],
      "name": "admin_P2_setMaxLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin_distribute_getStates",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "admin_distribute_ksSwapLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isAuto",
          "type": "bool"
        }
      ],
      "name": "admin_distribute_setAuto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_p1Ratio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_p2PerRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_p2UsdtRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_burnRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_teamUsdtRatio",
          "type": "uint24"
        }
      ],
      "name": "admin_distribute_setStates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin_getAienMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_gradeIndex",
          "type": "uint8"
        }
      ],
      "name": "admin_p0_getGradeInfos",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grade",
          "type": "uint256"
        }
      ],
      "name": "admin_p0_getPerFriendsProb",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin_p0_getStates",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_gradeIndex",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_isOpen",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_mixFee",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_initBaseProb",
          "type": "uint24"
        },
        {
          "internalType": "uint16",
          "name": "_mixExp",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "_failedAddProbMin",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_failedAddProbMax",
          "type": "uint24"
        }
      ],
      "name": "admin_p0_setGradeInfos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grade",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_pfGrade",
          "type": "string"
        },
        {
          "internalType": "uint24",
          "name": "_gradeProb",
          "type": "uint24"
        }
      ],
      "name": "admin_p0_setPerFriendsProb",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_maxProb",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "_addProbFee",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_addProbExp",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_isVRF",
          "type": "bool"
        }
      ],
      "name": "admin_p0_setStates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        }
      ],
      "name": "admin_setAienMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x20f8c5c93fff93bb7fdd9591cdb77488bddf93ab84d91a8c01396d2e517a7ae4",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe34f22cF55db5209bA6546701d408e5F58d8703f",
    "contractAddress": null,
    "transactionIndex": 8,
    "gasUsed": "2071218",
    "logsBloom": "0x
    "blockHash": "0x9d04e1d5b6fa7f38c894146cd2f1def22bf8db2e183e463a2533e98787217707",
    "transactionHash": "0x20f8c5c93fff93bb7fdd9591cdb77488bddf93ab84d91a8c01396d2e517a7ae4",
    "logs": [],
    "blockNumber": 142889901,
    "cumulativeGasUsed": "3098769",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "29ec7294a3499ca8ec17037bd1295adb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlock\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_why\",\"type\":\"string\"}],\"name\":\"admin_P2_blockUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_layerNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromP2PerPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromP2UsdtPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyReward_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_add_dailyReward_Percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"admin_P2_layer_setting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLimit\",\"type\":\"uint256\"}],\"name\":\"admin_P2_setMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_distribute_getStates\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"admin_distribute_ksSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAuto\",\"type\":\"bool\"}],\"name\":\"admin_distribute_setAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_p1Ratio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_p2PerRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_p2UsdtRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_burnRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_teamUsdtRatio\",\"type\":\"uint24\"}],\"name\":\"admin_distribute_setStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_getAienMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gradeIndex\",\"type\":\"uint8\"}],\"name\":\"admin_p0_getGradeInfos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grade\",\"type\":\"uint256\"}],\"name\":\"admin_p0_getPerFriendsProb\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_p0_getStates\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gradeIndex\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_mixFee\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_initBaseProb\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"_mixExp\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"_failedAddProbMin\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_failedAddProbMax\",\"type\":\"uint24\"}],\"name\":\"admin_p0_setGradeInfos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grade\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_pfGrade\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"_gradeProb\",\"type\":\"uint24\"}],\"name\":\"admin_p0_setPerFriendsProb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_maxProb\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_addProbFee\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_addProbExp\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_isVRF\",\"type\":\"bool\"}],\"name\":\"admin_p0_setStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"name\":\"admin_setAienMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"admin_P2_layer_setting(uint256,uint256,uint256,uint256,uint256,bool)\":{\"details\":\"P2 Admin functions\"},\"admin_distribute_setStates(uint24,uint24,uint24,uint24,uint24)\":{\"details\":\"DistriBute Admin functions\"},\"admin_p0_setStates(uint24,uint256,uint16,bool)\":{\"details\":\"P0 Admin functions\"},\"admin_setAienMintFee(uint256)\":{\"details\":\"aien mint variables\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Channel_iN/facets/AdminFacet.sol\":\"AdminFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Channel_iN/facets/AdminFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, Modifiers, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IP2} from \\\"../interfaces/IP2.sol\\\";\\nimport {IP2_Admin} from \\\"../interfaces/IP2_Admin.sol\\\";\\n\\ncontract AdminFacet is Modifiers {\\n    /**@dev P0 Admin functions\\n     */\\n    function admin_p0_setStates(\\n        uint24 _maxProb,\\n        uint _addProbFee,\\n        uint16 _addProbExp,\\n        bool _isVRF\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.p0_states.maxProb = _maxProb;\\n        s.p0_states.addProbFee = _addProbFee;\\n        s.p0_states.addProbExp = _addProbExp;\\n        s.p0_states.isVRF = _isVRF;\\n    }\\n\\n    function admin_p0_setGradeInfos(\\n        uint8 _gradeIndex,\\n        bool _isOpen,\\n        uint _mixFee,\\n        uint24 _initBaseProb,\\n        uint16 _mixExp,\\n        uint24 _failedAddProbMin,\\n        uint24 _failedAddProbMax\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.p0_gradeInfos[_gradeIndex].isOpen = _isOpen;\\n        s.p0_gradeInfos[_gradeIndex].mixFee = _mixFee;\\n        s.p0_gradeInfos[_gradeIndex].initBaseProb = _initBaseProb;\\n        s.p0_gradeInfos[_gradeIndex].mixExp = _mixExp;\\n        s.p0_gradeInfos[_gradeIndex].failedAddProbMin = _failedAddProbMin;\\n        s.p0_gradeInfos[_gradeIndex].failedAddProbMax = _failedAddProbMax;\\n    }\\n\\n    function admin_p0_setPerFriendsProb(\\n        uint _grade,\\n        string memory _pfGrade,\\n        uint24 _gradeProb\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.p0_perFriendsProbs[_grade].pfGrade = _pfGrade;\\n        s.p0_perFriendsProbs[_grade].gradeProb = uint24(_gradeProb);\\n    }\\n\\n    function admin_p0_getStates()\\n        external\\n        view\\n        returns (uint24, uint, uint16, bool)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.p0_states.maxProb,\\n            s.p0_states.addProbFee,\\n            s.p0_states.addProbExp,\\n            s.p0_states.isVRF\\n        );\\n    }\\n\\n    function admin_p0_getGradeInfos(\\n        uint8 _gradeIndex\\n    ) external view returns (bool, uint, uint24, uint16, uint24, uint24) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.p0_gradeInfos[_gradeIndex].isOpen,\\n            s.p0_gradeInfos[_gradeIndex].mixFee,\\n            s.p0_gradeInfos[_gradeIndex].initBaseProb,\\n            s.p0_gradeInfos[_gradeIndex].mixExp,\\n            s.p0_gradeInfos[_gradeIndex].failedAddProbMin,\\n            s.p0_gradeInfos[_gradeIndex].failedAddProbMax\\n        );\\n    }\\n\\n    function admin_p0_getPerFriendsProb(\\n        uint _grade\\n    ) external view returns (string memory, uint24) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.p0_perFriendsProbs[_grade].pfGrade,\\n            s.p0_perFriendsProbs[_grade].gradeProb\\n        );\\n    }\\n\\n    /**@dev P2 Admin functions\\n     */\\n    function admin_P2_layer_setting(\\n        uint _layerNumber,\\n        uint _fromP2PerPercent,\\n        uint _fromP2UsdtPercent,\\n        uint _dailyReward_percent,\\n        uint _add_dailyReward_Percent,\\n        bool _isOpen\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        IP2_Admin(s.contracts[\\\"p2\\\"])._layer_setting(\\n            _layerNumber,\\n            _fromP2PerPercent,\\n            _fromP2UsdtPercent,\\n            _dailyReward_percent,\\n            _add_dailyReward_Percent,\\n            _isOpen\\n        );\\n    }\\n\\n    function admin_P2_blockUser(\\n        address _user,\\n        bool _isBlock,\\n        string memory _why\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        IP2_Admin(s.contracts[\\\"p2\\\"]).diamond_P2_BlockUser(\\n            _user,\\n            _isBlock,\\n            _why\\n        );\\n    }\\n\\n    function admin_P2_setMaxLimit(uint _maxLimit) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        IP2_Admin(s.contracts[\\\"p2\\\"]).diamond_P2_setMaxLimit(_maxLimit);\\n    }\\n\\n    /**@dev DistriBute Admin functions\\n     */\\n    function admin_distribute_setStates(\\n        uint24 _p1Ratio,\\n        uint24 _p2PerRatio,\\n        uint24 _p2UsdtRatio,\\n        uint24 _burnRatio,\\n        uint24 _teamUsdtRatio\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.distribute_states.p1Ratio = _p1Ratio;\\n        s.distribute_states.p2PerRatio = _p2PerRatio;\\n        s.distribute_states.p2UsdtRatio = _p2UsdtRatio;\\n        s.distribute_states.burnRatio = _burnRatio;\\n        s.distribute_states.teamUsdtRatio = _teamUsdtRatio;\\n    }\\n\\n    function admin_distribute_getStates()\\n        external\\n        view\\n        returns (uint24, uint24, uint24, uint24, uint24)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.distribute_states.p1Ratio,\\n            s.distribute_states.p2PerRatio,\\n            s.distribute_states.p2UsdtRatio,\\n            s.distribute_states.burnRatio,\\n            s.distribute_states.teamUsdtRatio\\n        );\\n    }\\n\\n    function admin_distribute_setAuto(bool _isAuto) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.isAutoDistribute = _isAuto;\\n    }\\n\\n    function admin_distribute_ksSwapLimit(uint _limit) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.ksSwapLimit = _limit;\\n    }\\n\\n    /**@dev aien mint variables\\n     */\\n\\n    function admin_setAienMintFee(uint _mintFee) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.aienMintFee = _mintFee;\\n    }\\n\\n    function admin_getAienMintFee() external view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.aienMintFee;\\n    }\\n}\\n\",\"keccak256\":\"0x1a52fa0286db4933dda3e0eef82037e8c7927a762b2e8fbc86f3a14c2dd3c499\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IP2 {\\n    struct User {\\n        bool isBlockUser;\\n        uint perRewarded;\\n        uint usdtRewarded;\\n        EnumerableSet.UintSet tokenIds;\\n    }\\n\\n    struct Aien {\\n        address staker;\\n        uint level;\\n        // requires value\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        uint rewardUsdtDebt;\\n        uint rewardPerDebt;\\n        ////////////////////\\n        uint per_received;\\n        uint usdt_received;\\n    }\\n\\n    struct Balances {\\n        // \\ub85c\\uc9c1\\uc0c1 \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\ud55c \\ubc38\\ub7f0\\uc2a4 \\ubcc0\\uc218 (\\uc2e4\\uc81c\\uc640 \\ub2e4\\ub97c \\uc218 \\uc788\\uc74c)\\n        uint perBalance;\\n        uint usdtBalance;\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508 \\ub418\\uc9c0 \\uc54a\\uc740 \\uc0c1\\ud0dc\\uc5d0\\uc11c\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508\\ub418\\uba74 \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\uc800\\uc7a5\\ub41c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ubcc0\\uc218\\n        uint savedPerBalance;\\n        uint savedUsdtBalance;\\n        // \\ud604\\uc7ac savedUsdt, savedPer\\ub97c \\ud1b5\\ud574 \\ub098\\uc628 \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\n        uint add_dailyUSDT;\\n        uint add_dailyPER;\\n        // \\ubcf4\\uc548\\uc0c1 \\ubb38\\uc81c\\uac00 \\uc0dd\\uaca8\\n        // \\uc608\\uc0c1\\ubcf4\\ub2e4 \\ub9ce\\uc740 withdraw\\ub97c \\uc694\\uccad\\ud558\\uac8c \\ub418\\ub294 \\uacbd\\uc6b0\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ud1a0\\ud0c8 \\ubc38\\ub7f0\\uc2a4\\uc640\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ucd9c\\uae08 \\ubc38\\ub7f0\\uc2a4\\ub97c \\ube44\\uad50\\ud558\\uc5ec\\n        // \\ucd9c\\uae08 \\uac00\\ub2a5\\ud55c\\uc9c0 \\uccb4\\ud06c\\ud558\\ub294 \\ubcc0\\uc218\\n        uint total_checkWithdrawPER;\\n        uint withdrawal_checkWithdrawPER;\\n        uint total_checkWithdrawUSDT;\\n        uint withdrawal_checkWithdrawUSDT;\\n    }\\n\\n    struct Layer {\\n        Balances balances;\\n        // P2\\uc5d0\\uc11c \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\ud1a0\\ud070 \\ubc30\\uc815 \\ubc1b\\uc744\\ub54c \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint rewardUsdtPercent;\\n        uint rewardPerPercent;\\n        // \\uc720\\uc800\\uc5d0\\uac8c \\ud558\\ub8e8\\uc5d0 \\ubd84\\ubc30\\ud558\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint dailyReward_Percent;\\n        // \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        // \\ubbf8\\uc624\\ud508\\uc2dc \\uc800\\uc7a5\\ud55c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ud37c\\uc13c\\ud2b8\\ubcc0\\uc218\\n        uint add_dailyReward_Percent;\\n        uint lastRewardBlock;\\n        uint dailyRewardUpdateBlock;\\n        uint totalStakedAien;\\n        bool isOpen;\\n    }\\n\\n    struct AienLoadData {\\n        //aien\\uc815\\ubcf4\\n        uint _aienId;\\n        uint _aienLevel;\\n        // \\ucd9c\\uae08 \\ud1a0\\ud0c8\\n        uint _aien_per_received;\\n        uint _aien_usdt_received;\\n        //\\ucd9c\\uae08 \\uac00\\ub2a5\\n        uint usdt_withdrawable;\\n        uint per_withdrawable;\\n        // block\\ub2f9 \\ub9ac\\uc6cc\\ub4dc\\n        uint block_reward_per;\\n        uint block_reward_usdt;\\n    }\\n\\n    struct LayerLoadData {\\n        bool isOpen;\\n        uint _layerNumber;\\n        uint _24h_reward_per;\\n        uint _24h_reward_usdt;\\n        uint totalStakedAien;\\n    }\\n    struct UserLoadData {\\n        uint _usdtRewarded;\\n        uint _perRewarded;\\n        bool _isBlockUser;\\n    }\\n\\n    function aiens(uint _id) external view returns (Aien memory);\\n\\n    function diamond_P2_deposit(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_withdraw(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_harvest(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_getUserInfo(\\n        address _sender\\n    )\\n        external\\n        view\\n        returns (\\n            UserLoadData memory,\\n            AienLoadData[] memory,\\n            LayerLoadData[] memory\\n        );\\n\\n    function diamond_P2_getLayerData(\\n        uint _number\\n    ) external view returns (uint, uint, uint);\\n\\n    function addPerUsdtDistribution(uint _usdt, uint _per) external;\\n\\n    function P2_usdtBalance() external view returns (uint);\\n\\n    function P2_perBalance() external view returns (uint);\\n\\n    function MAX_STAKING_LIMIT() external view returns (uint);\\n\\n    function layers(uint _number) external view returns (Layer memory);\\n\\n    function pendingReward(\\n        uint _aienId,\\n        uint _layerNumber,\\n        uint _withdrawBlock\\n    ) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0x2e90a8470442fec4da79c46739fcf8b958fe1503f519a5f7b2fa048697e2396d\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP2_Admin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IP2_Admin {\\n    // layer Settings\\n    function _layer_setting(\\n        uint _layerNumber,\\n        uint _fromP2PerPercent,\\n        uint _fromP2UsdtPercent,\\n        uint _dailyReward_percent,\\n        uint _add_dailyReward_Percent,\\n        bool _isOpen\\n    ) external;\\n\\n    function diamond_P2_BlockUser(\\n        address _user,\\n        bool _isBlock,\\n        string memory _why\\n    ) external;\\n\\n    function diamond_P2_setMaxLimit(uint _maxLimit) external;\\n\\n    \\n\\n\\n}\\n\",\"keccak256\":\"0x5eb3c389ba4ad5c987931aecef61d09a357e3de7a80e153cf173b1afeffcb251\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xdc916985bab8246380c2188436b2e25e333d34e9fdc7bf3b0245f5bcc716e5dc\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\n// using EnumerableSet for EnumerableSet.AddressSet;\\n// i-Tez Structs\\n//- P0 struct\\nstruct P0_State {\\n    uint24 maxProb;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\uac1c\\ub2f9 \\uc218\\uc218\\ub8cc\\n    uint addProbFee;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\ud68d\\ub4dd \\uacbd\\ud5d8\\uce58\\n    uint16 addProbExp;\\n    // bool\\n    bool isVRF;\\n}\\nstruct P0_PerFriendsProb {\\n    string pfGrade;\\n    uint24 gradeProb;\\n}\\n\\nstruct P0_GradeInfo {\\n    // \\ub2e4\\uc74c level\\uc774 \\uc5f4\\ub838\\ub294\\uc9c0 \\ud655\\uc778\\n    bool isOpen;\\n    // level\\ubcc4 mix fee\\n    uint mixFee;\\n    // \\ub808\\ubca8\\uc5c5 \\uc131\\uacf5\\uc2dc level\\ubcc4 \\ucd08\\uae30 base \\ud655\\ub960\\n    uint24 initBaseProb;\\n    // level\\ubcc4 \\ucd94\\uac00 \\ud655\\ub960 \\ubc38\\ub7f0\\uc2a4 \\uc870\\uc815\\uac12\\n    uint16 mixExp;\\n    // level\\ubcc4 \\ud569\\uc131 \\uc2e4\\ud328\\uc2dc \\ucd94\\uac00 \\ud655\\ub960 min,max\\n    uint24 failedAddProbMin;\\n    // 1000 = 0.1%, 10000 = 0.01%\\n    uint24 failedAddProbMax;\\n}\\n\\nstruct P0_MergePfGrade {\\n    uint8 grade;\\n    string gradeName;\\n    uint mergeFee;\\n    uint mergeUseItemAmount;\\n    uint latestId;\\n    uint setMatadataId;\\n    bool isOpen;\\n}\\n\\n// //- Distribute struct\\nstruct Distribute_State {\\n    uint beforeP2Usdt;\\n    uint beforeP2Per;\\n    uint beforeTeamUsdt;\\n    // distribute ratios\\n    uint24 p1Ratio;\\n    uint24 p2PerRatio;\\n    uint24 p2UsdtRatio;\\n    uint24 burnRatio;\\n    uint24 teamUsdtRatio;\\n}\\n\\n// P0 End\\nstruct AppStorage {\\n    // address constants\\n    mapping(string => address) contracts;\\n    // i-Tez/////////////////////////////\\n    // P0 ///////////////////////////////\\n    P0_State p0_states;\\n    P0_GradeInfo[11] p0_gradeInfos;\\n    mapping(uint => P0_PerFriendsProb) p0_perFriendsProbs;\\n    /////////////////////////////////////\\n    // Distribute ///////////////////////\\n    Distribute_State distribute_states;\\n    uint aienMintFee;\\n    // Distribute\\n    uint ksSwapLimit;\\n    bool isAutoDistribute;\\n    // P0 - Item Merge Grade Infos\\n    mapping(uint8 => P0_MergePfGrade) p0_mergePfGrades;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\\n/**\\n@dev global modifier\\n */\\ncontract Modifiers {\\n    modifier onlyDev() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    // modifier checkRole(uint16 _role) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     require(\\n    //         s.roles[_role].accounts.contains(LibMeta.msgSender()),\\n    //         \\\"AccessControl: sender does not have required role\\\"\\n    //     );\\n    //     _;\\n    // }\\n}\\n\",\"keccak256\":\"0x6013adae5e5a4958de25d0a4c9bb8b3134b26476a725b1588c7c461694c9c17d\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xaea50a523e0ff67f5fc59946320f11efcfc09c75a972788f2884b9d1198a83d9\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"\\n            )\\n        );\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194f61daa9d3c92ca3de358b76506dbb1e9e39211dc5b49768f18cc38f85b1ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611a23806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80639a6d988711610097578063b5643cdb11610066578063b5643cdb14610269578063c7809e2f14610285578063ef404fa2146102a1578063f6f00563146102bd576100f5565b80639a6d9887146101e05780639b0988f1146101fc578063a451755314610231578063b545c43f1461024d576100f5565b806345d08ac6116100d357806345d08ac6146101595780635c53ddae146101755780637fe5cca1146101915780638a1833ed146101c2576100f5565b80631ad1d5dc146100fa57806324eb911e146101165780633a8e18de14610138575b600080fd5b610114600480360381019061010f9190610eb6565b6102d9565b005b61011e61034e565b60405161012f959493929190610f34565b60405180910390f35b6101406103e6565b6040516101509493929190610fce565b60405180910390f35b610173600480360381019061016e9190611013565b610451565b005b61018f600480360381019061018a9190611013565b610512565b005b6101ab60048036038101906101a69190611013565b610533565b6040516101b99291906110bf565b60405180910390f35b6101ca610618565b6040516101d791906110ef565b60405180910390f35b6101fa60048036038101906101f59190611136565b610630565b005b610216600480360381019061021191906111fc565b610700565b60405161022896959493929190611229565b60405180910390f35b61024b6004803603810190610246919061128a565b610839565b005b61026760048036038101906102629190611305565b610909565b005b610283600480360381019061027e9190611013565b61093d565b005b61029f600480360381019061029a919061135e565b61095e565b005b6102bb60048036038101906102b69190611400565b610acb565b005b6102d760048036038101906102d291906114c5565b610b57565b005b6102e1610c1e565b60006102eb610cb9565b90508281602501600086815260200190815260200160002060000190816103129190611740565b508181602501600086815260200190815260200160002060010160006101000a81548162ffffff021916908362ffffff16021790555050505050565b60008060008060008061035f610cb9565b90508060260160030160009054906101000a900462ffffff168160260160030160039054906101000a900462ffffff168260260160030160069054906101000a900462ffffff168360260160030160099054906101000a900462ffffff1684602601600301600c9054906101000a900462ffffff1695509550955095509550509091929394565b60008060008060006103f6610cb9565b90508060010160000160009054906101000a900462ffffff1681600101600101548260010160020160009054906101000a900461ffff168360010160020160029054906101000a900460ff1694509450945094505090919293565b610459610c1e565b6000610463610cb9565b90508060000160405161047590611869565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328e52aae836040518263ffffffff1660e01b81526004016104dc91906110ef565b600060405180830381600087803b1580156104f657600080fd5b505af115801561050a573d6000803e3d6000fd5b505050505050565b61051a610c1e565b6000610524610cb9565b90508181602b01819055505050565b6060600080610540610cb9565b905080602501600085815260200190815260200160002060000181602501600086815260200190815260200160002060010160009054906101000a900462ffffff1681805461058e90611563565b80601f01602080910402602001604051908101604052809291908181526020018280546105ba90611563565b80156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b505050505091509250925050915091565b600080610623610cb9565b905080602a015491505090565b610638610c1e565b6000610642610cb9565b90508060000160405161065490611869565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d78d3ce88888888888886040518763ffffffff1660e01b81526004016106c59695949392919061187e565b600060405180830381600087803b1580156106df57600080fd5b505af11580156106f3573d6000803e3d6000fd5b5050505050505050505050565b6000806000806000806000610713610cb9565b9050806004018860ff16600b811061072e5761072d6118df565b5b6003020160000160009054906101000a900460ff16816004018960ff16600b811061075c5761075b6118df565b5b6003020160010154826004018a60ff16600b811061077d5761077c6118df565b5b6003020160020160009054906101000a900462ffffff16836004018b60ff16600b81106107ad576107ac6118df565b5b6003020160020160039054906101000a900461ffff16846004018c60ff16600b81106107dc576107db6118df565b5b6003020160020160059054906101000a900462ffffff16856004018d60ff16600b811061080c5761080b6118df565b5b6003020160020160089054906101000a900462ffffff169650965096509650965096505091939550919395565b610841610c1e565b600061084b610cb9565b9050858160260160030160006101000a81548162ffffff021916908362ffffff160217905550848160260160030160036101000a81548162ffffff021916908362ffffff160217905550838160260160030160066101000a81548162ffffff021916908362ffffff160217905550828160260160030160096101000a81548162ffffff021916908362ffffff1602179055508181602601600301600c6101000a81548162ffffff021916908362ffffff160217905550505050505050565b610911610c1e565b600061091b610cb9565b90508181602c0160006101000a81548160ff0219169083151502179055505050565b610945610c1e565b600061094f610cb9565b90508181602a01819055505050565b610966610c1e565b6000610970610cb9565b905086816004018960ff16600b811061098c5761098b6118df565b5b6003020160000160006101000a81548160ff02191690831515021790555085816004018960ff16600b81106109c4576109c36118df565b5b600302016001018190555084816004018960ff16600b81106109e9576109e86118df565b5b6003020160020160006101000a81548162ffffff021916908362ffffff16021790555083816004018960ff16600b8110610a2657610a256118df565b5b6003020160020160036101000a81548161ffff021916908361ffff16021790555082816004018960ff16600b8110610a6157610a606118df565b5b6003020160020160056101000a81548162ffffff021916908362ffffff16021790555081816004018960ff16600b8110610a9e57610a9d6118df565b5b6003020160020160086101000a81548162ffffff021916908362ffffff1602179055505050505050505050565b610ad3610c1e565b6000610add610cb9565b9050848160010160000160006101000a81548162ffffff021916908362ffffff160217905550838160010160010181905550828160010160020160006101000a81548161ffff021916908361ffff160217905550818160010160020160026101000a81548160ff0219169083151502179055505050505050565b610b5f610c1e565b6000610b69610cb9565b905080600001604051610b7b90611869565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319eff0ab8585856040518463ffffffff1660e01b8152600401610be69392919061191d565b600060405180830381600087803b158015610c0057600080fd5b505af1158015610c14573d6000803e3d6000fd5b5050505050505050565b610c26610cbe565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cae906119cd565b60405180910390fd5b565b600090565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610d1281610cff565b8114610d1d57600080fd5b50565b600081359050610d2f81610d09565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d8882610d3f565b810181811067ffffffffffffffff82111715610da757610da6610d50565b5b80604052505050565b6000610dba610ceb565b9050610dc68282610d7f565b919050565b600067ffffffffffffffff821115610de657610de5610d50565b5b610def82610d3f565b9050602081019050919050565b82818337600083830152505050565b6000610e1e610e1984610dcb565b610db0565b905082815260208101848484011115610e3a57610e39610d3a565b5b610e45848285610dfc565b509392505050565b600082601f830112610e6257610e61610d35565b5b8135610e72848260208601610e0b565b91505092915050565b600062ffffff82169050919050565b610e9381610e7b565b8114610e9e57600080fd5b50565b600081359050610eb081610e8a565b92915050565b600080600060608486031215610ecf57610ece610cf5565b5b6000610edd86828701610d20565b935050602084013567ffffffffffffffff811115610efe57610efd610cfa565b5b610f0a86828701610e4d565b9250506040610f1b86828701610ea1565b9150509250925092565b610f2e81610e7b565b82525050565b600060a082019050610f496000830188610f25565b610f566020830187610f25565b610f636040830186610f25565b610f706060830185610f25565b610f7d6080830184610f25565b9695505050505050565b610f9081610cff565b82525050565b600061ffff82169050919050565b610fad81610f96565b82525050565b60008115159050919050565b610fc881610fb3565b82525050565b6000608082019050610fe36000830187610f25565b610ff06020830186610f87565b610ffd6040830185610fa4565b61100a6060830184610fbf565b95945050505050565b60006020828403121561102957611028610cf5565b5b600061103784828501610d20565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561107a57808201518184015260208101905061105f565b60008484015250505050565b600061109182611040565b61109b818561104b565b93506110ab81856020860161105c565b6110b481610d3f565b840191505092915050565b600060408201905081810360008301526110d98185611086565b90506110e86020830184610f25565b9392505050565b60006020820190506111046000830184610f87565b92915050565b61111381610fb3565b811461111e57600080fd5b50565b6000813590506111308161110a565b92915050565b60008060008060008060c0878903121561115357611152610cf5565b5b600061116189828a01610d20565b965050602061117289828a01610d20565b955050604061118389828a01610d20565b945050606061119489828a01610d20565b93505060806111a589828a01610d20565b92505060a06111b689828a01611121565b9150509295509295509295565b600060ff82169050919050565b6111d9816111c3565b81146111e457600080fd5b50565b6000813590506111f6816111d0565b92915050565b60006020828403121561121257611211610cf5565b5b6000611220848285016111e7565b91505092915050565b600060c08201905061123e6000830189610fbf565b61124b6020830188610f87565b6112586040830187610f25565b6112656060830186610fa4565b6112726080830185610f25565b61127f60a0830184610f25565b979650505050505050565b600080600080600060a086880312156112a6576112a5610cf5565b5b60006112b488828901610ea1565b95505060206112c588828901610ea1565b94505060406112d688828901610ea1565b93505060606112e788828901610ea1565b92505060806112f888828901610ea1565b9150509295509295909350565b60006020828403121561131b5761131a610cf5565b5b600061132984828501611121565b91505092915050565b61133b81610f96565b811461134657600080fd5b50565b60008135905061135881611332565b92915050565b600080600080600080600060e0888a03121561137d5761137c610cf5565b5b600061138b8a828b016111e7565b975050602061139c8a828b01611121565b96505060406113ad8a828b01610d20565b95505060606113be8a828b01610ea1565b94505060806113cf8a828b01611349565b93505060a06113e08a828b01610ea1565b92505060c06113f18a828b01610ea1565b91505092959891949750929550565b6000806000806080858703121561141a57611419610cf5565b5b600061142887828801610ea1565b945050602061143987828801610d20565b935050604061144a87828801611349565b925050606061145b87828801611121565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061149282611467565b9050919050565b6114a281611487565b81146114ad57600080fd5b50565b6000813590506114bf81611499565b92915050565b6000806000606084860312156114de576114dd610cf5565b5b60006114ec868287016114b0565b93505060206114fd86828701611121565b925050604084013567ffffffffffffffff81111561151e5761151d610cfa565b5b61152a86828701610e4d565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061157b57607f821691505b60208210810361158e5761158d611534565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026115f67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826115b9565b61160086836115b9565b95508019841693508086168417925050509392505050565b6000819050919050565b600061163d61163861163384610cff565b611618565b610cff565b9050919050565b6000819050919050565b61165783611622565b61166b61166382611644565b8484546115c6565b825550505050565b600090565b611680611673565b61168b81848461164e565b505050565b5b818110156116af576116a4600082611678565b600181019050611691565b5050565b601f8211156116f4576116c581611594565b6116ce846115a9565b810160208510156116dd578190505b6116f16116e9856115a9565b830182611690565b50505b505050565b600082821c905092915050565b6000611717600019846008026116f9565b1980831691505092915050565b60006117308383611706565b9150826002028217905092915050565b61174982611040565b67ffffffffffffffff81111561176257611761610d50565b5b61176c8254611563565b6117778282856116b3565b600060209050601f8311600181146117aa5760008415611798578287015190505b6117a28582611724565b86555061180a565b601f1984166117b886611594565b60005b828110156117e0578489015182556001820191506020850194506020810190506117bb565b868310156117fd57848901516117f9601f891682611706565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f7032000000000000000000000000000000000000000000000000000000000000600082015250565b6000611853600283611812565b915061185e8261181d565b600282019050919050565b600061187482611846565b9150819050919050565b600060c0820190506118936000830189610f87565b6118a06020830188610f87565b6118ad6040830187610f87565b6118ba6060830186610f87565b6118c76080830185610f87565b6118d460a0830184610fbf565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61191781611487565b82525050565b6000606082019050611932600083018661190e565b61193f6020830185610fbf565b81810360408301526119518184611086565b9050949350505050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b60006119b760228361104b565b91506119c28261195b565b604082019050919050565b600060208201905081810360008301526119e6816119aa565b905091905056fea2646970667358221220fb8b846e009ae9b0f89891508ebe8f453230e28da3f9f83ccd7cad2b62be265c64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80639a6d988711610097578063b5643cdb11610066578063b5643cdb14610269578063c7809e2f14610285578063ef404fa2146102a1578063f6f00563146102bd576100f5565b80639a6d9887146101e05780639b0988f1146101fc578063a451755314610231578063b545c43f1461024d576100f5565b806345d08ac6116100d357806345d08ac6146101595780635c53ddae146101755780637fe5cca1146101915780638a1833ed146101c2576100f5565b80631ad1d5dc146100fa57806324eb911e146101165780633a8e18de14610138575b600080fd5b610114600480360381019061010f9190610eb6565b6102d9565b005b61011e61034e565b60405161012f959493929190610f34565b60405180910390f35b6101406103e6565b6040516101509493929190610fce565b60405180910390f35b610173600480360381019061016e9190611013565b610451565b005b61018f600480360381019061018a9190611013565b610512565b005b6101ab60048036038101906101a69190611013565b610533565b6040516101b99291906110bf565b60405180910390f35b6101ca610618565b6040516101d791906110ef565b60405180910390f35b6101fa60048036038101906101f59190611136565b610630565b005b610216600480360381019061021191906111fc565b610700565b60405161022896959493929190611229565b60405180910390f35b61024b6004803603810190610246919061128a565b610839565b005b61026760048036038101906102629190611305565b610909565b005b610283600480360381019061027e9190611013565b61093d565b005b61029f600480360381019061029a919061135e565b61095e565b005b6102bb60048036038101906102b69190611400565b610acb565b005b6102d760048036038101906102d291906114c5565b610b57565b005b6102e1610c1e565b60006102eb610cb9565b90508281602501600086815260200190815260200160002060000190816103129190611740565b508181602501600086815260200190815260200160002060010160006101000a81548162ffffff021916908362ffffff16021790555050505050565b60008060008060008061035f610cb9565b90508060260160030160009054906101000a900462ffffff168160260160030160039054906101000a900462ffffff168260260160030160069054906101000a900462ffffff168360260160030160099054906101000a900462ffffff1684602601600301600c9054906101000a900462ffffff1695509550955095509550509091929394565b60008060008060006103f6610cb9565b90508060010160000160009054906101000a900462ffffff1681600101600101548260010160020160009054906101000a900461ffff168360010160020160029054906101000a900460ff1694509450945094505090919293565b610459610c1e565b6000610463610cb9565b90508060000160405161047590611869565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328e52aae836040518263ffffffff1660e01b81526004016104dc91906110ef565b600060405180830381600087803b1580156104f657600080fd5b505af115801561050a573d6000803e3d6000fd5b505050505050565b61051a610c1e565b6000610524610cb9565b90508181602b01819055505050565b6060600080610540610cb9565b905080602501600085815260200190815260200160002060000181602501600086815260200190815260200160002060010160009054906101000a900462ffffff1681805461058e90611563565b80601f01602080910402602001604051908101604052809291908181526020018280546105ba90611563565b80156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b505050505091509250925050915091565b600080610623610cb9565b905080602a015491505090565b610638610c1e565b6000610642610cb9565b90508060000160405161065490611869565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d78d3ce88888888888886040518763ffffffff1660e01b81526004016106c59695949392919061187e565b600060405180830381600087803b1580156106df57600080fd5b505af11580156106f3573d6000803e3d6000fd5b5050505050505050505050565b6000806000806000806000610713610cb9565b9050806004018860ff16600b811061072e5761072d6118df565b5b6003020160000160009054906101000a900460ff16816004018960ff16600b811061075c5761075b6118df565b5b6003020160010154826004018a60ff16600b811061077d5761077c6118df565b5b6003020160020160009054906101000a900462ffffff16836004018b60ff16600b81106107ad576107ac6118df565b5b6003020160020160039054906101000a900461ffff16846004018c60ff16600b81106107dc576107db6118df565b5b6003020160020160059054906101000a900462ffffff16856004018d60ff16600b811061080c5761080b6118df565b5b6003020160020160089054906101000a900462ffffff169650965096509650965096505091939550919395565b610841610c1e565b600061084b610cb9565b9050858160260160030160006101000a81548162ffffff021916908362ffffff160217905550848160260160030160036101000a81548162ffffff021916908362ffffff160217905550838160260160030160066101000a81548162ffffff021916908362ffffff160217905550828160260160030160096101000a81548162ffffff021916908362ffffff1602179055508181602601600301600c6101000a81548162ffffff021916908362ffffff160217905550505050505050565b610911610c1e565b600061091b610cb9565b90508181602c0160006101000a81548160ff0219169083151502179055505050565b610945610c1e565b600061094f610cb9565b90508181602a01819055505050565b610966610c1e565b6000610970610cb9565b905086816004018960ff16600b811061098c5761098b6118df565b5b6003020160000160006101000a81548160ff02191690831515021790555085816004018960ff16600b81106109c4576109c36118df565b5b600302016001018190555084816004018960ff16600b81106109e9576109e86118df565b5b6003020160020160006101000a81548162ffffff021916908362ffffff16021790555083816004018960ff16600b8110610a2657610a256118df565b5b6003020160020160036101000a81548161ffff021916908361ffff16021790555082816004018960ff16600b8110610a6157610a606118df565b5b6003020160020160056101000a81548162ffffff021916908362ffffff16021790555081816004018960ff16600b8110610a9e57610a9d6118df565b5b6003020160020160086101000a81548162ffffff021916908362ffffff1602179055505050505050505050565b610ad3610c1e565b6000610add610cb9565b9050848160010160000160006101000a81548162ffffff021916908362ffffff160217905550838160010160010181905550828160010160020160006101000a81548161ffff021916908361ffff160217905550818160010160020160026101000a81548160ff0219169083151502179055505050505050565b610b5f610c1e565b6000610b69610cb9565b905080600001604051610b7b90611869565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319eff0ab8585856040518463ffffffff1660e01b8152600401610be69392919061191d565b600060405180830381600087803b158015610c0057600080fd5b505af1158015610c14573d6000803e3d6000fd5b5050505050505050565b610c26610cbe565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cae906119cd565b60405180910390fd5b565b600090565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610d1281610cff565b8114610d1d57600080fd5b50565b600081359050610d2f81610d09565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d8882610d3f565b810181811067ffffffffffffffff82111715610da757610da6610d50565b5b80604052505050565b6000610dba610ceb565b9050610dc68282610d7f565b919050565b600067ffffffffffffffff821115610de657610de5610d50565b5b610def82610d3f565b9050602081019050919050565b82818337600083830152505050565b6000610e1e610e1984610dcb565b610db0565b905082815260208101848484011115610e3a57610e39610d3a565b5b610e45848285610dfc565b509392505050565b600082601f830112610e6257610e61610d35565b5b8135610e72848260208601610e0b565b91505092915050565b600062ffffff82169050919050565b610e9381610e7b565b8114610e9e57600080fd5b50565b600081359050610eb081610e8a565b92915050565b600080600060608486031215610ecf57610ece610cf5565b5b6000610edd86828701610d20565b935050602084013567ffffffffffffffff811115610efe57610efd610cfa565b5b610f0a86828701610e4d565b9250506040610f1b86828701610ea1565b9150509250925092565b610f2e81610e7b565b82525050565b600060a082019050610f496000830188610f25565b610f566020830187610f25565b610f636040830186610f25565b610f706060830185610f25565b610f7d6080830184610f25565b9695505050505050565b610f9081610cff565b82525050565b600061ffff82169050919050565b610fad81610f96565b82525050565b60008115159050919050565b610fc881610fb3565b82525050565b6000608082019050610fe36000830187610f25565b610ff06020830186610f87565b610ffd6040830185610fa4565b61100a6060830184610fbf565b95945050505050565b60006020828403121561102957611028610cf5565b5b600061103784828501610d20565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561107a57808201518184015260208101905061105f565b60008484015250505050565b600061109182611040565b61109b818561104b565b93506110ab81856020860161105c565b6110b481610d3f565b840191505092915050565b600060408201905081810360008301526110d98185611086565b90506110e86020830184610f25565b9392505050565b60006020820190506111046000830184610f87565b92915050565b61111381610fb3565b811461111e57600080fd5b50565b6000813590506111308161110a565b92915050565b60008060008060008060c0878903121561115357611152610cf5565b5b600061116189828a01610d20565b965050602061117289828a01610d20565b955050604061118389828a01610d20565b945050606061119489828a01610d20565b93505060806111a589828a01610d20565b92505060a06111b689828a01611121565b9150509295509295509295565b600060ff82169050919050565b6111d9816111c3565b81146111e457600080fd5b50565b6000813590506111f6816111d0565b92915050565b60006020828403121561121257611211610cf5565b5b6000611220848285016111e7565b91505092915050565b600060c08201905061123e6000830189610fbf565b61124b6020830188610f87565b6112586040830187610f25565b6112656060830186610fa4565b6112726080830185610f25565b61127f60a0830184610f25565b979650505050505050565b600080600080600060a086880312156112a6576112a5610cf5565b5b60006112b488828901610ea1565b95505060206112c588828901610ea1565b94505060406112d688828901610ea1565b93505060606112e788828901610ea1565b92505060806112f888828901610ea1565b9150509295509295909350565b60006020828403121561131b5761131a610cf5565b5b600061132984828501611121565b91505092915050565b61133b81610f96565b811461134657600080fd5b50565b60008135905061135881611332565b92915050565b600080600080600080600060e0888a03121561137d5761137c610cf5565b5b600061138b8a828b016111e7565b975050602061139c8a828b01611121565b96505060406113ad8a828b01610d20565b95505060606113be8a828b01610ea1565b94505060806113cf8a828b01611349565b93505060a06113e08a828b01610ea1565b92505060c06113f18a828b01610ea1565b91505092959891949750929550565b6000806000806080858703121561141a57611419610cf5565b5b600061142887828801610ea1565b945050602061143987828801610d20565b935050604061144a87828801611349565b925050606061145b87828801611121565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061149282611467565b9050919050565b6114a281611487565b81146114ad57600080fd5b50565b6000813590506114bf81611499565b92915050565b6000806000606084860312156114de576114dd610cf5565b5b60006114ec868287016114b0565b93505060206114fd86828701611121565b925050604084013567ffffffffffffffff81111561151e5761151d610cfa565b5b61152a86828701610e4d565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061157b57607f821691505b60208210810361158e5761158d611534565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026115f67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826115b9565b61160086836115b9565b95508019841693508086168417925050509392505050565b6000819050919050565b600061163d61163861163384610cff565b611618565b610cff565b9050919050565b6000819050919050565b61165783611622565b61166b61166382611644565b8484546115c6565b825550505050565b600090565b611680611673565b61168b81848461164e565b505050565b5b818110156116af576116a4600082611678565b600181019050611691565b5050565b601f8211156116f4576116c581611594565b6116ce846115a9565b810160208510156116dd578190505b6116f16116e9856115a9565b830182611690565b50505b505050565b600082821c905092915050565b6000611717600019846008026116f9565b1980831691505092915050565b60006117308383611706565b9150826002028217905092915050565b61174982611040565b67ffffffffffffffff81111561176257611761610d50565b5b61176c8254611563565b6117778282856116b3565b600060209050601f8311600181146117aa5760008415611798578287015190505b6117a28582611724565b86555061180a565b601f1984166117b886611594565b60005b828110156117e0578489015182556001820191506020850194506020810190506117bb565b868310156117fd57848901516117f9601f891682611706565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f7032000000000000000000000000000000000000000000000000000000000000600082015250565b6000611853600283611812565b915061185e8261181d565b600282019050919050565b600061187482611846565b9150819050919050565b600060c0820190506118936000830189610f87565b6118a06020830188610f87565b6118ad6040830187610f87565b6118ba6060830186610f87565b6118c76080830185610f87565b6118d460a0830184610fbf565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61191781611487565b82525050565b6000606082019050611932600083018661190e565b61193f6020830185610fbf565b81810360408301526119518184611086565b9050949350505050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b60006119b760228361104b565b91506119c28261195b565b604082019050919050565b600060208201905081810360008301526119e6816119aa565b905091905056fea2646970667358221220fb8b846e009ae9b0f89891508ebe8f453230e28da3f9f83ccd7cad2b62be265c64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "admin_P2_layer_setting(uint256,uint256,uint256,uint256,uint256,bool)": {
        "details": "P2 Admin functions"
      },
      "admin_distribute_setStates(uint24,uint24,uint24,uint24,uint24)": {
        "details": "DistriBute Admin functions"
      },
      "admin_p0_setStates(uint24,uint256,uint16,bool)": {
        "details": "P0 Admin functions"
      },
      "admin_setAienMintFee(uint256)": {
        "details": "aien mint variables"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}