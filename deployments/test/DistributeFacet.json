{
  "address": "0x31E1A80208b744FC11470c24924CA1C5731CDb55",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Distribute_Transfer_Balance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_agencyAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_influencer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_influencerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        }
      ],
      "name": "Distribute_p0LvUpDistribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Distribute_swapToDistribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0071252046400246a05ec9f5a9a18377e40293bfc7959973b707926105fadaa",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe34f22cF55db5209bA6546701d408e5F58d8703f",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "2210722",
    "logsBloom": "0x
    "blockHash": "0x439958c1114d0ada73694d04c560b4b7f0725406787666a0bff3c6ead8caa82e",
    "transactionHash": "0xc0071252046400246a05ec9f5a9a18377e40293bfc7959973b707926105fadaa",
    "logs": [],
    "blockNumber": 142889927,
    "cumulativeGasUsed": "4233337",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "29ec7294a3499ca8ec17037bd1295adb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Distribute_Transfer_Balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_agencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_influencer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_influencerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"Distribute_p0LvUpDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Distribute_swapToDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shared/facets/DistributeFacet.sol\":\"DistributeFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IP1 {\\n    struct PendingInfo {\\n        address user;\\n        // 1: \\ucd9c\\uae08\\uc694\\uccad,\\n        // 2: \\ucd9c\\uae08\\ucde8\\uc18c,\\n        // 3: \\uc644\\ub8cc,\\n        // 4: \\ucde8\\uc18c\\uc644\\ub8cc: \\uc644\\ub8cc\\uc2dc \\uc7ac\\uc608\\uce58 \\ubc84\\ud2bc \\ud65c\\uc131\\ud654\\n        uint8 pendingType;\\n        uint startTime;\\n        uint endTime;\\n        uint amount;\\n        // pending Id\\n        uint pendingId;\\n    }\\n\\n    function update() external returns (uint);\\n\\n    function diamond_P1_deposit(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint);\\n\\n    function diamond_P1_reDposit(address _sender) external returns (uint);\\n\\n    function diamond_P1_harvest(address _sender) external returns (uint);\\n\\n    function diamond_P1_pendingReward(\\n        address _sender,\\n        uint _withdrawBlock\\n    ) external view returns (uint);\\n\\n    function diamond_P1_addPower(\\n        address _sender,\\n        uint _aienId,\\n        uint _usePower\\n    ) external returns (uint);\\n\\n    function diamond_P1_widthdraw(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawCancel(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_widthdrawCancelConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_getPoolData() external view returns (uint, uint, uint);\\n\\n    function diamond_P1_getUserData(\\n        address _sender\\n    ) external view returns (uint, uint, uint, uint, uint);\\n\\n    function diamond_P1_getUnstakeData(\\n        address _sender\\n    ) external view returns (PendingInfo[] memory);\\n\\n    function diamond_P1_addDistributionAmountAll(uint _amount) external;\\n\\n    function unStakeTimeLock() external view returns (uint16);\\n\\n    function unStakeCancelTimeLock() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x07efaa8c8bc5cf474a039cab55457d26d607d1eb1a5b133c27962cba3bba2b39\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IP2 {\\n    struct User {\\n        bool isBlockUser;\\n        uint perRewarded;\\n        uint usdtRewarded;\\n        EnumerableSet.UintSet tokenIds;\\n    }\\n\\n    struct Aien {\\n        address staker;\\n        uint level;\\n        // requires value\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        uint rewardUsdtDebt;\\n        uint rewardPerDebt;\\n        ////////////////////\\n        uint per_received;\\n        uint usdt_received;\\n    }\\n\\n    struct Balances {\\n        // \\ub85c\\uc9c1\\uc0c1 \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\ud55c \\ubc38\\ub7f0\\uc2a4 \\ubcc0\\uc218 (\\uc2e4\\uc81c\\uc640 \\ub2e4\\ub97c \\uc218 \\uc788\\uc74c)\\n        uint perBalance;\\n        uint usdtBalance;\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508 \\ub418\\uc9c0 \\uc54a\\uc740 \\uc0c1\\ud0dc\\uc5d0\\uc11c\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508\\ub418\\uba74 \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\uc800\\uc7a5\\ub41c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ubcc0\\uc218\\n        uint savedPerBalance;\\n        uint savedUsdtBalance;\\n        // \\ud604\\uc7ac savedUsdt, savedPer\\ub97c \\ud1b5\\ud574 \\ub098\\uc628 \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\n        uint add_dailyUSDT;\\n        uint add_dailyPER;\\n        // \\ubcf4\\uc548\\uc0c1 \\ubb38\\uc81c\\uac00 \\uc0dd\\uaca8\\n        // \\uc608\\uc0c1\\ubcf4\\ub2e4 \\ub9ce\\uc740 withdraw\\ub97c \\uc694\\uccad\\ud558\\uac8c \\ub418\\ub294 \\uacbd\\uc6b0\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ud1a0\\ud0c8 \\ubc38\\ub7f0\\uc2a4\\uc640\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ucd9c\\uae08 \\ubc38\\ub7f0\\uc2a4\\ub97c \\ube44\\uad50\\ud558\\uc5ec\\n        // \\ucd9c\\uae08 \\uac00\\ub2a5\\ud55c\\uc9c0 \\uccb4\\ud06c\\ud558\\ub294 \\ubcc0\\uc218\\n        uint total_checkWithdrawPER;\\n        uint withdrawal_checkWithdrawPER;\\n        uint total_checkWithdrawUSDT;\\n        uint withdrawal_checkWithdrawUSDT;\\n    }\\n\\n    struct Layer {\\n        Balances balances;\\n        // P2\\uc5d0\\uc11c \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\ud1a0\\ud070 \\ubc30\\uc815 \\ubc1b\\uc744\\ub54c \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint rewardUsdtPercent;\\n        uint rewardPerPercent;\\n        // \\uc720\\uc800\\uc5d0\\uac8c \\ud558\\ub8e8\\uc5d0 \\ubd84\\ubc30\\ud558\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint dailyReward_Percent;\\n        // \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        // \\ubbf8\\uc624\\ud508\\uc2dc \\uc800\\uc7a5\\ud55c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ud37c\\uc13c\\ud2b8\\ubcc0\\uc218\\n        uint add_dailyReward_Percent;\\n        uint lastRewardBlock;\\n        uint dailyRewardUpdateBlock;\\n        uint totalStakedAien;\\n        bool isOpen;\\n    }\\n\\n    struct AienLoadData {\\n        //aien\\uc815\\ubcf4\\n        uint _aienId;\\n        uint _aienLevel;\\n        // \\ucd9c\\uae08 \\ud1a0\\ud0c8\\n        uint _aien_per_received;\\n        uint _aien_usdt_received;\\n        //\\ucd9c\\uae08 \\uac00\\ub2a5\\n        uint usdt_withdrawable;\\n        uint per_withdrawable;\\n        // block\\ub2f9 \\ub9ac\\uc6cc\\ub4dc\\n        uint block_reward_per;\\n        uint block_reward_usdt;\\n    }\\n\\n    struct LayerLoadData {\\n        bool isOpen;\\n        uint _layerNumber;\\n        uint _24h_reward_per;\\n        uint _24h_reward_usdt;\\n        uint totalStakedAien;\\n    }\\n    struct UserLoadData {\\n        uint _usdtRewarded;\\n        uint _perRewarded;\\n        bool _isBlockUser;\\n    }\\n\\n    function aiens(uint _id) external view returns (Aien memory);\\n\\n    function diamond_P2_deposit(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_withdraw(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_harvest(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_getUserInfo(\\n        address _sender\\n    )\\n        external\\n        view\\n        returns (\\n            UserLoadData memory,\\n            AienLoadData[] memory,\\n            LayerLoadData[] memory\\n        );\\n\\n    function diamond_P2_getLayerData(\\n        uint _number\\n    ) external view returns (uint, uint, uint);\\n\\n    function addPerUsdtDistribution(uint _usdt, uint _per) external;\\n\\n    function P2_usdtBalance() external view returns (uint);\\n\\n    function P2_perBalance() external view returns (uint);\\n\\n    function MAX_STAKING_LIMIT() external view returns (uint);\\n\\n    function layers(uint _number) external view returns (Layer memory);\\n\\n    function pendingReward(\\n        uint _aienId,\\n        uint _layerNumber,\\n        uint _withdrawBlock\\n    ) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0x2e90a8470442fec4da79c46739fcf8b958fe1503f519a5f7b2fa048697e2396d\",\"license\":\"MIT\"},\"contracts/shared/facets/DistributeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, LibAppStorage, Modifiers} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IERC20} from \\\"../../shared/interfaces/IERC20.sol\\\";\\nimport {LibDistribute} from \\\"../libraries/LibDistribute.sol\\\";\\n\\ncontract DistributeFacet is Modifiers {\\n    // 1\\ucc28\\ub85c Distribute facet\\uc5d0 balance\\ub97c \\ubaa8\\uc73c\\uace0\\n    // \\ud328\\uc2ef\\uc774 \\ubcc0\\uacbd\\ub418\\uc5c8\\uc744\\ub54c transfer\\ud558\\uc5ec balance migrate\\ud558\\uae30 \\uc704\\ud55c \\ud568\\uc218\\n    function Distribute_Transfer_Balance(\\n        address _facet,\\n        address _tokenAddr,\\n        uint _amount\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        IERC20(_tokenAddr).transfer(msgsender, _amount);\\n    }\\n\\n    function Distribute_p0LvUpDistribute(\\n        address _agency,\\n        uint _agencyAmount,\\n        address _influencer,\\n        uint _influencerAmount,\\n        uint _totalAmount\\n    ) external {\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyAmount,\\n            _influencer,\\n            _influencerAmount,\\n            _totalAmount\\n        );\\n    }\\n\\n    function Distribute_swapToDistribute() external {\\n        LibDistribute.swapToDistribute();\\n    }\\n}\\n\",\"keccak256\":\"0xa7b9948db42261e255d0f39ff292393eb9f72cf7e3a4b31dc1c808511c59c5dd\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xdc916985bab8246380c2188436b2e25e333d34e9fdc7bf3b0245f5bcc716e5dc\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IKlaySwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// 0xc6a2ad8cc6e4a7e08fc37cc5954be07d499e7654 KSP\\n// 0x7A74B3be679E194E1D6A0C29A343ef8D2a5AC876 Util\\ninterface IKlaySwap {\\n    function estimateSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] memory path\\n    ) external view returns (uint amountOut);\\n\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint amountA,\\n        address tokenB,\\n        uint amountB,\\n        address[] memory path\\n    ) external;\\n}\\n\\n\\n\\n\\n\",\"keccak256\":\"0xdf4506259a183c376f7e8dec594a1ea6dd1e07c6cf048c0a0ea1b5014e666cba\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\n// using EnumerableSet for EnumerableSet.AddressSet;\\n// i-Tez Structs\\n//- P0 struct\\nstruct P0_State {\\n    uint24 maxProb;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\uac1c\\ub2f9 \\uc218\\uc218\\ub8cc\\n    uint addProbFee;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\ud68d\\ub4dd \\uacbd\\ud5d8\\uce58\\n    uint16 addProbExp;\\n    // bool\\n    bool isVRF;\\n}\\nstruct P0_PerFriendsProb {\\n    string pfGrade;\\n    uint24 gradeProb;\\n}\\n\\nstruct P0_GradeInfo {\\n    // \\ub2e4\\uc74c level\\uc774 \\uc5f4\\ub838\\ub294\\uc9c0 \\ud655\\uc778\\n    bool isOpen;\\n    // level\\ubcc4 mix fee\\n    uint mixFee;\\n    // \\ub808\\ubca8\\uc5c5 \\uc131\\uacf5\\uc2dc level\\ubcc4 \\ucd08\\uae30 base \\ud655\\ub960\\n    uint24 initBaseProb;\\n    // level\\ubcc4 \\ucd94\\uac00 \\ud655\\ub960 \\ubc38\\ub7f0\\uc2a4 \\uc870\\uc815\\uac12\\n    uint16 mixExp;\\n    // level\\ubcc4 \\ud569\\uc131 \\uc2e4\\ud328\\uc2dc \\ucd94\\uac00 \\ud655\\ub960 min,max\\n    uint24 failedAddProbMin;\\n    // 1000 = 0.1%, 10000 = 0.01%\\n    uint24 failedAddProbMax;\\n}\\n\\nstruct P0_MergePfGrade {\\n    uint8 grade;\\n    string gradeName;\\n    uint mergeFee;\\n    uint mergeUseItemAmount;\\n    uint latestId;\\n    uint setMatadataId;\\n    bool isOpen;\\n}\\n\\n// //- Distribute struct\\nstruct Distribute_State {\\n    uint beforeP2Usdt;\\n    uint beforeP2Per;\\n    uint beforeTeamUsdt;\\n    // distribute ratios\\n    uint24 p1Ratio;\\n    uint24 p2PerRatio;\\n    uint24 p2UsdtRatio;\\n    uint24 burnRatio;\\n    uint24 teamUsdtRatio;\\n}\\n\\n// P0 End\\nstruct AppStorage {\\n    // address constants\\n    mapping(string => address) contracts;\\n    // i-Tez/////////////////////////////\\n    // P0 ///////////////////////////////\\n    P0_State p0_states;\\n    P0_GradeInfo[11] p0_gradeInfos;\\n    mapping(uint => P0_PerFriendsProb) p0_perFriendsProbs;\\n    /////////////////////////////////////\\n    // Distribute ///////////////////////\\n    Distribute_State distribute_states;\\n    uint aienMintFee;\\n    // Distribute\\n    uint ksSwapLimit;\\n    bool isAutoDistribute;\\n    // P0 - Item Merge Grade Infos\\n    mapping(uint8 => P0_MergePfGrade) p0_mergePfGrades;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\\n/**\\n@dev global modifier\\n */\\ncontract Modifiers {\\n    modifier onlyDev() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    // modifier checkRole(uint16 _role) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     require(\\n    //         s.roles[_role].accounts.contains(LibMeta.msgSender()),\\n    //         \\\"AccessControl: sender does not have required role\\\"\\n    //     );\\n    //     _;\\n    // }\\n}\\n\",\"keccak256\":\"0x6013adae5e5a4958de25d0a4c9bb8b3134b26476a725b1588c7c461694c9c17d\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xaea50a523e0ff67f5fc59946320f11efcfc09c75a972788f2884b9d1198a83d9\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDistribute.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, LibAppStorage} from \\\"./LibAppStorage.sol\\\";\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {IKlaySwap} from \\\"../interfaces/IKlaySwap.sol\\\";\\nimport {IP2} from \\\"../../Channel_iN/interfaces/IP2.sol\\\";\\nimport {IP1} from \\\"../../Channel_iN/interfaces/IP1.sol\\\";\\n\\nlibrary LibDistribute {\\n    //\\n    //\\n    // \\u2500\\u2500\\u2500 P0 LV UP DISTRIBUTION \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    function p0LvUpDistribute(\\n        address _agency,\\n        uint _agencyAmount,\\n        address _influencer,\\n        uint _influencerAmount,\\n        uint _totalAmount\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        (\\n            uint p1Amount,\\n            uint p2Amount,\\n            uint burnAmount,\\n            uint teamAmountForUsdt,\\n            uint p2AmountForUsdt\\n        ) = distributeCalc(_totalAmount);\\n        address per = s.contracts[\\\"per\\\"];\\n\\n        IERC20(per).transfer(_agency, _agencyAmount);\\n        IERC20(per).transfer(_influencer, _influencerAmount);\\n        IERC20(per).transfer(s.contracts[\\\"burn\\\"], burnAmount);\\n        IERC20(per).transfer(s.contracts[\\\"p2\\\"], p2Amount);\\n        IERC20(per).transfer(s.contracts[\\\"p1\\\"], p1Amount);\\n\\n        IP1(s.contracts[\\\"p1\\\"]).diamond_P1_addDistributionAmountAll(p1Amount);\\n\\n        // IERC20(PER).transfer(P1, )\\n        // \\ucd94\\uac00 \\ub418\\uc5b4\\uc57c\\ud560 \\uac83\\ub4e4\\n        // 1.P1 10% PER\\n        // 2.P2 20% PER\\n        // 3.Burn 1% PER\\n        s.distribute_states.beforeP2Per += p2Amount;\\n        s.distribute_states.beforeP2Usdt += p2AmountForUsdt;\\n        s.distribute_states.beforeTeamUsdt += teamAmountForUsdt;\\n    }\\n\\n    function distributeCalc(\\n        uint _amount\\n    ) internal view returns (uint, uint, uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint _p1Amount = (_amount * s.distribute_states.p1Ratio) / 100;\\n        uint _p2Amount = (_amount * s.distribute_states.p2PerRatio) / 100;\\n        uint _burnAmount = (_amount * s.distribute_states.burnRatio) / 100;\\n        uint _teamAmountForUsdt = (_amount *\\n            s.distribute_states.teamUsdtRatio) / 100;\\n        uint _p2AmountForUsdt = (_amount * s.distribute_states.p2UsdtRatio) /\\n            100;\\n        return (\\n            _p1Amount,\\n            _p2Amount,\\n            _burnAmount,\\n            _teamAmountForUsdt,\\n            _p2AmountForUsdt\\n        );\\n    }\\n\\n    function swapToDistribute() internal {\\n        (bool run, uint thisBalance, uint estimateUsdt) = isSwap();\\n        require(run == true, \\\"swapToDistribute: swap is not needed\\\");\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        address[] memory path;\\n\\n        IERC20(s.contracts[\\\"per\\\"]).approve(\\n            s.contracts[\\\"klayswap\\\"],\\n            thisBalance\\n        );\\n\\n        IKlaySwap(s.contracts[\\\"klayswap\\\"]).exchangeKctPos(\\n            s.contracts[\\\"per\\\"],\\n            thisBalance,\\n            s.contracts[\\\"usdt\\\"],\\n            estimateUsdt,\\n            path\\n        );\\n\\n        _swaplToCalculate();\\n    }\\n\\n    function _swaplToCalculate() internal returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint usdtBalance = IERC20(s.contracts[\\\"usdt\\\"]).balanceOf(address(this));\\n        uint calculatePercent = s.distribute_states.p2UsdtRatio +\\n            s.distribute_states.teamUsdtRatio;\\n\\n        uint _p2UsdtAmount = (usdtBalance * s.distribute_states.p2UsdtRatio) /\\n            calculatePercent;\\n        uint _teamUsdtAmount = (usdtBalance *\\n            s.distribute_states.teamUsdtRatio) / calculatePercent;\\n\\n        IERC20(s.contracts[\\\"usdt\\\"]).transfer(s.contracts[\\\"p2\\\"], _p2UsdtAmount);\\n\\n        IERC20(s.contracts[\\\"usdt\\\"]).transfer(\\n            s.contracts[\\\"team\\\"],\\n            _teamUsdtAmount\\n        );\\n\\n        IP2(s.contracts[\\\"p2\\\"]).addPerUsdtDistribution(\\n            _p2UsdtAmount,\\n            s.distribute_states.beforeP2Per\\n        );\\n\\n        s.distribute_states.beforeP2Per = 0;\\n        s.distribute_states.beforeP2Usdt = 0;\\n        s.distribute_states.beforeTeamUsdt = 0;\\n    }\\n\\n    function getDistributePrice() internal view returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.distribute_states.beforeP2Usdt,\\n            s.distribute_states.beforeP2Per,\\n            s.distribute_states.beforeTeamUsdt\\n        );\\n    }\\n\\n    // function p0_transferForDistribute() internal returns (uint, uint, uint) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     uint beforeP2Usdt = s.distribute_states.beforeP2Usdt;\\n    //     uint beforeP2Per = s.distribute_states.beforeP2Per;\\n    //     uint beforeTeamUsdt = s.distribute_states.beforeTeamUsdt;\\n    //     address per = s.contracts[\\\"per\\\"];\\n    //     // require(\\n    //     //     LibMeta.msgSender() == LibDiamond.enforceIsContractOwner(),\\n    //     //     \\\"you are not dev\\\"\\n    //     // );\\n    //     IERC20(per).transfer(\\n    //         LibMeta.msgSender(),\\n    //         beforeP2Usdt + beforeTeamUsdt\\n    //     );\\n    //     uint _beforeP2Usdt = beforeP2Usdt;\\n    //     uint _beforeP2Per = beforeP2Per;\\n    //     uint _beforeTeamUsdt = beforeTeamUsdt;\\n\\n    //     beforeP2Usdt = 0;\\n    //     beforeP2Per = 0;\\n    //     beforeTeamUsdt = 0;\\n\\n    //     return (_beforeP2Usdt, _beforeP2Per, _beforeTeamUsdt);\\n    // }\\n\\n    function isSwap() internal view returns (bool, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address[] memory path;\\n        uint _balance = IERC20(s.contracts[\\\"per\\\"]).balanceOf(address(this));\\n\\n        uint estimateUsdt = IKlaySwap(s.contracts[\\\"klayswaputil\\\"]).estimateSwap(\\n            s.contracts[\\\"per\\\"],\\n            s.contracts[\\\"usdt\\\"],\\n            _balance,\\n            path\\n        );\\n\\n        if (estimateUsdt > s.ksSwapLimit && s.isAutoDistribute == true) {\\n            return (true, _balance, estimateUsdt);\\n        } else {\\n            return (false, 0, 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9847cca90d7dd92edd4f86b98288062cbe5e61dd558f3ac0496d6051140ae055\",\"license\":\"UNLICENSED\"},\"contracts/shared/libraries/LibMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"\\n            )\\n        );\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194f61daa9d3c92ca3de358b76506dbb1e9e39211dc5b49768f18cc38f85b1ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806361dd1e581461004657806372dc907a14610062578063c98c73d71461007e575b600080fd5b610060600480360381019061005b91906112ab565b610088565b005b61007c600480360381019061007791906112fe565b61012e565b005b610086610142565b005b61009061014c565b600061009a6101e7565b905060006100a66101ec565b90508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82856040518363ffffffff1660e01b81526004016100e3929190611397565b6020604051808303816000875af1158015610102573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012691906113f8565b505050505050565b61013b858585858561029c565b5050505050565b61014a61074c565b565b6101546109ee565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dc906114a8565b60405180910390fd5b565b600090565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361029557600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050610299565b3390505b90565b60006102a66101e7565b905060008060008060006102b987610a1b565b945094509450945094506000866000016040516102d59061151f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8d8d6040518363ffffffff1660e01b8152600401610341929190611397565b6020604051808303816000875af1158015610360573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038491906113f8565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8b8b6040518363ffffffff1660e01b81526004016103c0929190611397565b6020604051808303816000875af11580156103df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040391906113f8565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8860000160405161043090611580565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b815260040161047d929190611397565b6020604051808303816000875af115801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c091906113f8565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb886000016040516104ed906115e1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518363ffffffff1660e01b815260040161053a929190611397565b6020604051808303816000875af1158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d91906113f8565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb886000016040516105aa90611642565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040518363ffffffff1660e01b81526004016105f7929190611397565b6020604051808303816000875af1158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a91906113f8565b508660000160405161064b90611642565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bc2fa3a876040518263ffffffff1660e01b81526004016106b29190611657565b600060405180830381600087803b1580156106cc57600080fd5b505af11580156106e0573d6000803e3d6000fd5b50505050848760260160010160008282546106fb91906116a1565b925050819055508187602601600001600082825461071991906116a1565b925050819055508287602601600201600082825461073791906116a1565b92505081905550505050505050505050505050565b6000806000610759610b5f565b92509250925060011515831515146107a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d90611747565b60405180910390fd5b60006107b06101e7565b90506060816000016040516107c49061151f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b38360000160405161081e906117b3565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b815260040161086b929190611397565b6020604051808303816000875af115801561088a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ae91906113f8565b50816000016040516108bf906117b3565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166352f28c17836000016040516109199061151f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868560000160405161095990611814565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687866040518663ffffffff1660e01b81526004016109aa9594939291906118e7565b600060405180830381600087803b1580156109c457600080fd5b505af11580156109d8573d6000803e3d6000fd5b505050506109e4610dc0565b5050505050505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b600080600080600080610a2c6101e7565b9050600060648260260160030160009054906101000a900462ffffff1662ffffff1689610a599190611941565b610a6391906119b2565b9050600060648360260160030160039054906101000a900462ffffff1662ffffff168a610a909190611941565b610a9a91906119b2565b9050600060648460260160030160099054906101000a900462ffffff1662ffffff168b610ac79190611941565b610ad191906119b2565b90506000606485602601600301600c9054906101000a900462ffffff1662ffffff168c610afe9190611941565b610b0891906119b2565b9050600060648660260160030160069054906101000a900462ffffff1662ffffff168d610b359190611941565b610b3f91906119b2565b905084848484849a509a509a509a509a5050505050505091939590929450565b600080600080610b6d6101e7565b90506060600082600001604051610b839061151f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bea91906119e3565b602060405180830381865afa158015610c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2b9190611a13565b9050600083600001604051610c3f90611a8c565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663692ca7a085600001604051610c999061151f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600001604051610cd890611814565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685876040518563ffffffff1660e01b8152600401610d289493929190611aa1565b602060405180830381865afa158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d699190611a13565b905083602b015481118015610d9357506001151584602c0160009054906101000a900460ff161515145b15610dab576001828296509650965050505050610dbb565b6000806000965096509650505050505b909192565b600080600080610dce6101e7565b9050600081600001604051610de290611814565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e4991906119e3565b602060405180830381865afa158015610e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8a9190611a13565b9050600082602601600301600c9054906101000a900462ffffff168360260160030160069054906101000a900462ffffff16610ec69190611afc565b62ffffff1690506000818460260160030160069054906101000a900462ffffff1662ffffff1684610ef79190611941565b610f0191906119b2565b905060008285602601600301600c9054906101000a900462ffffff1662ffffff1685610f2d9190611941565b610f3791906119b2565b905084600001604051610f4990611814565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86600001604051610fa3906115e1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610ff0929190611397565b6020604051808303816000875af115801561100f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103391906113f8565b508460000160405161104490611814565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8660000160405161109e90611b7f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016110eb929190611397565b6020604051808303816000875af115801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e91906113f8565b508460000160405161113f906115e1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b81d9a348387602601600101546040518363ffffffff1660e01b81526004016111af929190611b94565b600060405180830381600087803b1580156111c957600080fd5b505af11580156111dd573d6000803e3d6000fd5b505050506000856026016001018190555060008560260160000181905550600085602601600201819055505050505050909192565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061124282611217565b9050919050565b61125281611237565b811461125d57600080fd5b50565b60008135905061126f81611249565b92915050565b6000819050919050565b61128881611275565b811461129357600080fd5b50565b6000813590506112a58161127f565b92915050565b6000806000606084860312156112c4576112c3611212565b5b60006112d286828701611260565b93505060206112e386828701611260565b92505060406112f486828701611296565b9150509250925092565b600080600080600060a0868803121561131a57611319611212565b5b600061132888828901611260565b955050602061133988828901611296565b945050604061134a88828901611260565b935050606061135b88828901611296565b925050608061136c88828901611296565b9150509295509295909350565b61138281611237565b82525050565b61139181611275565b82525050565b60006040820190506113ac6000830185611379565b6113b96020830184611388565b9392505050565b60008115159050919050565b6113d5816113c0565b81146113e057600080fd5b50565b6000815190506113f2816113cc565b92915050565b60006020828403121561140e5761140d611212565b5b600061141c848285016113e3565b91505092915050565b600082825260208201905092915050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000611492602283611425565b915061149d82611436565b604082019050919050565b600060208201905081810360008301526114c181611485565b9050919050565b600081905092915050565b7f7065720000000000000000000000000000000000000000000000000000000000600082015250565b60006115096003836114c8565b9150611514826114d3565b600382019050919050565b600061152a826114fc565b9150819050919050565b7f6275726e00000000000000000000000000000000000000000000000000000000600082015250565b600061156a6004836114c8565b915061157582611534565b600482019050919050565b600061158b8261155d565b9150819050919050565b7f7032000000000000000000000000000000000000000000000000000000000000600082015250565b60006115cb6002836114c8565b91506115d682611595565b600282019050919050565b60006115ec826115be565b9150819050919050565b7f7031000000000000000000000000000000000000000000000000000000000000600082015250565b600061162c6002836114c8565b9150611637826115f6565b600282019050919050565b600061164d8261161f565b9150819050919050565b600060208201905061166c6000830184611388565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116ac82611275565b91506116b783611275565b92508282019050808211156116cf576116ce611672565b5b92915050565b7f73776170546f446973747269627574653a2073776170206973206e6f74206e6560008201527f6564656400000000000000000000000000000000000000000000000000000000602082015250565b6000611731602483611425565b915061173c826116d5565b604082019050919050565b6000602082019050818103600083015261176081611724565b9050919050565b7f6b6c617973776170000000000000000000000000000000000000000000000000600082015250565b600061179d6008836114c8565b91506117a882611767565b600882019050919050565b60006117be82611790565b9150819050919050565b7f7573647400000000000000000000000000000000000000000000000000000000600082015250565b60006117fe6004836114c8565b9150611809826117c8565b600482019050919050565b600061181f826117f1565b9150819050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61185e81611237565b82525050565b60006118708383611855565b60208301905092915050565b6000602082019050919050565b600061189482611829565b61189e8185611834565b93506118a983611845565b8060005b838110156118da5781516118c18882611864565b97506118cc8361187c565b9250506001810190506118ad565b5085935050505092915050565b600060a0820190506118fc6000830188611379565b6119096020830187611388565b6119166040830186611379565b6119236060830185611388565b81810360808301526119358184611889565b90509695505050505050565b600061194c82611275565b915061195783611275565b925082820261196581611275565b9150828204841483151761197c5761197b611672565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119bd82611275565b91506119c883611275565b9250826119d8576119d7611983565b5b828204905092915050565b60006020820190506119f86000830184611379565b92915050565b600081519050611a0d8161127f565b92915050565b600060208284031215611a2957611a28611212565b5b6000611a37848285016119fe565b91505092915050565b7f6b6c6179737761707574696c0000000000000000000000000000000000000000600082015250565b6000611a76600c836114c8565b9150611a8182611a40565b600c82019050919050565b6000611a9782611a69565b9150819050919050565b6000608082019050611ab66000830187611379565b611ac36020830186611379565b611ad06040830185611388565b8181036060830152611ae28184611889565b905095945050505050565b600062ffffff82169050919050565b6000611b0782611aed565b9150611b1283611aed565b9250828201905062ffffff811115611b2d57611b2c611672565b5b92915050565b7f7465616d00000000000000000000000000000000000000000000000000000000600082015250565b6000611b696004836114c8565b9150611b7482611b33565b600482019050919050565b6000611b8a82611b5c565b9150819050919050565b6000604082019050611ba96000830185611388565b611bb66020830184611388565b939250505056fea26469706673582212201c54047ee1e895a7960390a66119daf9023d18257554cf093aba3d0c3e70733764736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}