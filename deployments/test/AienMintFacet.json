{
  "address": "0x71Fae92D586DA20F83EDbF44eA2812B97c36682b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "Aien_AiMint_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "Aien_AiSetImage_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        }
      ],
      "name": "Aien_DefaultMint_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        }
      ],
      "name": "Aien_DefaultSetImage_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "perfId",
          "type": "uint256"
        }
      ],
      "name": "Aien_PfMint_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "perfId",
          "type": "uint256"
        }
      ],
      "name": "Aien_PfSetImage_Event",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aiMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aienId",
          "type": "uint256"
        }
      ],
      "name": "aiSetImage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aienId",
          "type": "uint256"
        }
      ],
      "name": "defaultSetImage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pfId",
          "type": "uint256"
        }
      ],
      "name": "pfMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aienId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pfId",
          "type": "uint256"
        }
      ],
      "name": "pfSetImage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x450677578d2cf6e81172e5cbdfa8c0e46d61a81822c14d2b8e6f7093743b38a8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe34f22cF55db5209bA6546701d408e5F58d8703f",
    "contractAddress": null,
    "transactionIndex": 8,
    "gasUsed": "2415481",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x24081c9bdf5b7d3f3547884acc8cd7189f3b248cbe60186c38090f58d97d56fa",
    "transactionHash": "0x450677578d2cf6e81172e5cbdfa8c0e46d61a81822c14d2b8e6f7093743b38a8",
    "logs": [],
    "blockNumber": 143044972,
    "cumulativeGasUsed": "3609797",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 21,
  "solcInputHash": "391e8c756ef757a3ea17c003b6236433",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"Aien_AiMint_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"Aien_AiSetImage_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"}],\"name\":\"Aien_DefaultMint_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"}],\"name\":\"Aien_DefaultSetImage_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"perfId\",\"type\":\"uint256\"}],\"name\":\"Aien_PfMint_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"perfId\",\"type\":\"uint256\"}],\"name\":\"Aien_PfSetImage_Event\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aiMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aienId\",\"type\":\"uint256\"}],\"name\":\"aiSetImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aienId\",\"type\":\"uint256\"}],\"name\":\"defaultSetImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pfId\",\"type\":\"uint256\"}],\"name\":\"pfMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pfId\",\"type\":\"uint256\"}],\"name\":\"pfSetImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Aien Mint Facet Contract\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Channel_iN/facets/AienMintFacet.sol\":\"AienMintFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Channel_iN/facets/AienMintFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {LibAienMint} from \\\"../libraries/LibAienMint.sol\\\";\\n\\n/**\\n@dev Aien Mint Facet Contract\\n */\\n\\ncontract AienMintFacet {\\n    // aien mint functions\\n    function aiMint() external {\\n        address msgsender = LibMeta.msgSender();\\n        LibAienMint._aiMint(msgsender);\\n    }\\n\\n    function pfMint(uint _pfId) external {\\n        address msgsender = LibMeta.msgSender();\\n        LibAienMint._pfMint(msgsender, _pfId);\\n    }\\n\\n    function defaultMint() external {\\n        address msgsender = LibMeta.msgSender();\\n        LibAienMint._defaultMint(msgsender);\\n    }\\n\\n    // image chage functions\\n    function defaultSetImage(uint _aienId) external {\\n        address msgsender = LibMeta.msgSender();\\n        LibAienMint._defaultSetImage(msgsender, _aienId);\\n    }\\n\\n    function aiSetImage(uint _aienId) external {\\n        address msgsender = LibMeta.msgSender();\\n        LibAienMint._aiSetImage(msgsender, _aienId);\\n    }\\n\\n    function pfSetImage(uint _aienId, uint _pfId) external {\\n        address msgsender = LibMeta.msgSender();\\n        LibAienMint._pfSetImage(msgsender, _aienId, _pfId);\\n    }\\n}\\n\",\"keccak256\":\"0xdd7891218358a8a5e7762437b20f44755cff402c7dc8f69e1d519fad0da6136b\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IDB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// legacy db contract interface\\ninterface IDB {\\n    struct pf {\\n        uint id;\\n        uint class;\\n        bool isAien;\\n        uint usedAienId;\\n    }\\n\\n    struct pfGrade {\\n        uint normal;\\n        uint uncommon;\\n        uint rare;\\n        uint unique;\\n        uint legendary;\\n        uint myth;\\n        uint ancient;\\n    }\\n\\n    struct aien {\\n        uint id;\\n        // \\uac15\\ud654 \\ud69f\\uc218\\n        uint mixCount;\\n        //\\n        uint p2Level;\\n        // \\ud1a0\\ud0c8 \\uacbd\\ud5d8\\uce58\\n        uint totalExp;\\n        // \\ubbf8\\uc158 \\ubc0f, \\uc778\\ud50c\\ub8e8\\uc5b8\\uc11c \\ud65c\\ub3d9 \\uad00\\ub828 \\uacbd\\ud5d8\\uce58\\n        uint influExp;\\n        // \\uae30\\ubcf8 \\ud655\\ub960\\n        uint baseProb;\\n        // \\ud1a0\\ud0c8 \\ud655\\ub960\\n        uint totalProb;\\n        // is PF\\n        uint isPFid;\\n        // \\ucd94\\uac00\\ud655\\ub960\\n        uint addProb;\\n    }\\n\\n    struct User {\\n        // DB > idx\\n        uint userId;\\n        // token itme ID\\n        uint itemId;\\n        address incomeAddr;\\n        uint feeBalance;\\n        bool isAble;\\n        uint mintCount;\\n        uint useLevelupCount;\\n        uint useMergeCount;\\n        // uint ownerIncomePercent;\\n        // uint userIncomPercent;\\n        //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n        uint referralIncome;\\n        address agency;\\n        uint agencyIncome;\\n    }\\n\\n    function AIENS(uint _key) external view returns (aien memory);\\n\\n    function PFS(uint _key) external view returns (pf memory);\\n\\n    function getAien(uint _id) external view;\\n\\n    function getPF(uint _id) external view;\\n\\n    function getPfGrade(uint _id) external view returns (uint);\\n\\n    function setAien(uint _id) external;\\n\\n    function usePFimg(uint _aienId, uint _pfId) external;\\n\\n    function setAienAll(\\n        uint _id,\\n        uint _mixCount,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _totalProb,\\n        uint _isPFid,\\n        uint _addProb\\n    ) external;\\n\\n    function getContractAddr(\\n        string memory _name\\n    ) external view returns (address);\\n\\n    function burnValue(uint _burnAmount) external;\\n\\n    function setAienGradeInfo(uint _toGrade) external;\\n\\n    function subPfGrades(uint _pfId) external;\\n\\n    function setLevelUpStatus(uint _toGrade) external;\\n\\n    function _failedAienSet(\\n        uint _id,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _successAienSet(\\n        uint _id,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _mergeCalcul(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _mergeCalcul2(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _influencerMerge(\\n        address _to,\\n        uint _itemId,\\n        uint _referralIncome\\n    ) external returns (uint, string memory);\\n\\n    function _levelUpCalcul(\\n        uint _itemId,\\n        uint _fee\\n    ) external returns (address, address, uint, uint);\\n\\n    function _levelUpSucess(uint _id, uint _p2Level) external;\\n\\n    function _levelUpFailed(uint _id, uint _addProb) external;\\n\\n    function _mergeCount(\\n        address _agency,\\n        uint _agencyFee,\\n        address _influencer,\\n        uint _influencerFee\\n    ) external;\\n\\n    function usePFPower(uint _id, uint _usePower) external;\\n\\n    function addProbFee() external view returns (uint);\\n\\n    function PfGrades() external view returns (pfGrade memory);\\n\\n    function getAienGradeInfo() external view returns (uint[] memory);\\n\\n    function basicMergeAmount() external view returns (uint);\\n\\n    function influencerMergeAmount() external view returns (uint);\\n\\n    function _getMedataMargin() external view returns (uint, uint, uint);\\n\\n    function getAienLevel(uint _aienId) external view returns (uint);\\n\\n    function setPerprojectWallet(address _addr) external;\\n\\n    function setAgencyAddr(address _influencer, address _agency) external;\\n\\n    function setAgencyIncomePercent(uint _agencyIncomePercent) external;\\n\\n    function adminSetMergeAmount(\\n        uint _influencerMergeAmount,\\n        uint _basicMergeAmount,\\n        uint _agencyIncomePercent,\\n        uint _ownerIncomePercent\\n    ) external;\\n\\n    function getUserFromItem(uint _itemId) external view returns (User memory);\\n\\n    function adminSetMetaData(\\n        uint _pfId,\\n        uint8 _grade,\\n        string memory _seedHash\\n    ) external;\\n\\n    function _itemMergeFromDiamond(\\n        address _to,\\n        uint _pfId,\\n        string memory _seedHash,\\n        uint8 _grade\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbf4ffb9733d65fe3597c56dd6ff80ec21176dd3f0e43104f9ddf97e897d281cd\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IP1 {\\n    struct PendingInfo {\\n        address user;\\n        // 1: \\ucd9c\\uae08\\uc694\\uccad,\\n        // 2: \\ucd9c\\uae08\\ucde8\\uc18c,\\n        // 3: \\uc644\\ub8cc,\\n        // 4: \\ucde8\\uc18c\\uc644\\ub8cc: \\uc644\\ub8cc\\uc2dc \\uc7ac\\uc608\\uce58 \\ubc84\\ud2bc \\ud65c\\uc131\\ud654\\n        uint8 pendingType;\\n        uint startTime;\\n        uint endTime;\\n        uint amount;\\n        // pending Id\\n        uint pendingId;\\n    }\\n\\n    function update() external returns (uint);\\n\\n    function diamond_P1_deposit(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint);\\n\\n    function diamond_P1_reDposit(address _sender) external returns (uint);\\n\\n    function diamond_P1_harvest(address _sender) external returns (uint);\\n\\n    function diamond_P1_pendingReward(\\n        address _sender,\\n        uint _withdrawBlock\\n    ) external view returns (uint);\\n\\n    function diamond_P1_addPower(\\n        address _sender,\\n        uint _aienId,\\n        uint _usePower\\n    ) external returns (uint);\\n\\n    function diamond_P1_widthdraw(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawCancel(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_widthdrawCancelConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_getPoolData() external view returns (uint, uint, uint);\\n\\n    function diamond_P1_getUserData(\\n        address _sender\\n    ) external view returns (uint, uint, uint, uint, uint);\\n\\n    function diamond_P1_getUnstakeData(\\n        address _sender\\n    ) external view returns (PendingInfo[] memory);\\n\\n    function diamond_P1_addDistributionAmountAll(uint _amount) external;\\n\\n    function unStakeTimeLock() external view returns (uint16);\\n\\n    function unStakeCancelTimeLock() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x07efaa8c8bc5cf474a039cab55457d26d607d1eb1a5b133c27962cba3bba2b39\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IP2 {\\n    struct User {\\n        bool isBlockUser;\\n        uint perRewarded;\\n        uint usdtRewarded;\\n        EnumerableSet.UintSet tokenIds;\\n    }\\n\\n    struct Aien {\\n        address staker;\\n        uint level;\\n        // requires value\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        uint rewardUsdtDebt;\\n        uint rewardPerDebt;\\n        ////////////////////\\n        uint per_received;\\n        uint usdt_received;\\n    }\\n\\n    struct Balances {\\n        // \\ub85c\\uc9c1\\uc0c1 \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\ud55c \\ubc38\\ub7f0\\uc2a4 \\ubcc0\\uc218 (\\uc2e4\\uc81c\\uc640 \\ub2e4\\ub97c \\uc218 \\uc788\\uc74c)\\n        uint perBalance;\\n        uint usdtBalance;\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508 \\ub418\\uc9c0 \\uc54a\\uc740 \\uc0c1\\ud0dc\\uc5d0\\uc11c\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508\\ub418\\uba74 \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\uc800\\uc7a5\\ub41c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ubcc0\\uc218\\n        uint savedPerBalance;\\n        uint savedUsdtBalance;\\n        // \\ud604\\uc7ac savedUsdt, savedPer\\ub97c \\ud1b5\\ud574 \\ub098\\uc628 \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\n        uint add_dailyUSDT;\\n        uint add_dailyPER;\\n        // \\ubcf4\\uc548\\uc0c1 \\ubb38\\uc81c\\uac00 \\uc0dd\\uaca8\\n        // \\uc608\\uc0c1\\ubcf4\\ub2e4 \\ub9ce\\uc740 withdraw\\ub97c \\uc694\\uccad\\ud558\\uac8c \\ub418\\ub294 \\uacbd\\uc6b0\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ud1a0\\ud0c8 \\ubc38\\ub7f0\\uc2a4\\uc640\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ucd9c\\uae08 \\ubc38\\ub7f0\\uc2a4\\ub97c \\ube44\\uad50\\ud558\\uc5ec\\n        // \\ucd9c\\uae08 \\uac00\\ub2a5\\ud55c\\uc9c0 \\uccb4\\ud06c\\ud558\\ub294 \\ubcc0\\uc218\\n        uint total_checkWithdrawPER;\\n        uint withdrawal_checkWithdrawPER;\\n        uint total_checkWithdrawUSDT;\\n        uint withdrawal_checkWithdrawUSDT;\\n    }\\n\\n    struct Layer {\\n        Balances balances;\\n        // P2\\uc5d0\\uc11c \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\ud1a0\\ud070 \\ubc30\\uc815 \\ubc1b\\uc744\\ub54c \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint rewardUsdtPercent;\\n        uint rewardPerPercent;\\n        // \\uc720\\uc800\\uc5d0\\uac8c \\ud558\\ub8e8\\uc5d0 \\ubd84\\ubc30\\ud558\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint dailyReward_Percent;\\n        // \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        // \\ubbf8\\uc624\\ud508\\uc2dc \\uc800\\uc7a5\\ud55c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ud37c\\uc13c\\ud2b8\\ubcc0\\uc218\\n        uint add_dailyReward_Percent;\\n        uint lastRewardBlock;\\n        uint dailyRewardUpdateBlock;\\n        uint totalStakedAien;\\n        bool isOpen;\\n    }\\n\\n    struct AienLoadData {\\n        //aien\\uc815\\ubcf4\\n        uint _aienId;\\n        uint _aienLevel;\\n        // \\ucd9c\\uae08 \\ud1a0\\ud0c8\\n        uint _aien_per_received;\\n        uint _aien_usdt_received;\\n        //\\ucd9c\\uae08 \\uac00\\ub2a5\\n        uint usdt_withdrawable;\\n        uint per_withdrawable;\\n        // block\\ub2f9 \\ub9ac\\uc6cc\\ub4dc\\n        uint block_reward_per;\\n        uint block_reward_usdt;\\n    }\\n\\n    struct LayerLoadData {\\n        bool isOpen;\\n        uint _layerNumber;\\n        uint _24h_reward_per;\\n        uint _24h_reward_usdt;\\n        uint totalStakedAien;\\n    }\\n    struct UserLoadData {\\n        uint _usdtRewarded;\\n        uint _perRewarded;\\n        bool _isBlockUser;\\n    }\\n\\n    function aiens(uint _id) external view returns (Aien memory);\\n\\n    function diamond_P2_deposit(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_withdraw(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_harvest(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_getUserInfo(\\n        address _sender\\n    )\\n        external\\n        view\\n        returns (\\n            UserLoadData memory,\\n            AienLoadData[] memory,\\n            LayerLoadData[] memory\\n        );\\n\\n    function diamond_P2_getLayerData(\\n        uint _number\\n    ) external view returns (uint, uint, uint);\\n\\n    function addPerUsdtDistribution(uint _usdt, uint _per) external;\\n\\n    function P2_usdtBalance() external view returns (uint);\\n\\n    function P2_perBalance() external view returns (uint);\\n\\n    function MAX_STAKING_LIMIT() external view returns (uint);\\n\\n    function layers(uint _number) external view returns (Layer memory);\\n\\n    function pendingReward(\\n        uint _aienId,\\n        uint _layerNumber,\\n        uint _withdrawBlock\\n    ) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0x2e90a8470442fec4da79c46739fcf8b958fe1503f519a5f7b2fa048697e2396d\",\"license\":\"MIT\"},\"contracts/Channel_iN/libraries/LibAienMint.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IDB} from \\\"../interfaces/IDB.sol\\\";\\nimport {IERC721} from \\\"../../shared/interfaces/IERC721.sol\\\";\\nimport {IERC20} from \\\"../../shared/interfaces/IERC20.sol\\\";\\nimport {LibDistribute} from \\\"../../shared/libraries/LibDistribute.sol\\\";\\n\\nlibrary LibAienMint {\\n    // mint events\\n    event Aien_DefaultMint_Event(address indexed to, uint indexed aienId);\\n\\n    event Aien_AiMint_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed payment\\n    );\\n\\n    event Aien_PfMint_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed perfId\\n    );\\n\\n    // setImage events\\n    event Aien_DefaultSetImage_Event(address indexed to, uint indexed aienId);\\n\\n    event Aien_AiSetImage_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed payment\\n    );\\n\\n    event Aien_PfSetImage_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed perfId\\n    );\\n\\n    modifier onlyFirstMint() {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IERC721(s.contracts[\\\"aien\\\"]).balanceOf(LibMeta.msgSender()) == 0,\\n            \\\"already minted\\\"\\n        );\\n        _;\\n    }\\n\\n    function _aiMint(address _sender) internal onlyFirstMint returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint id = IERC721(s.contracts[\\\"aien\\\"]).nextTokenId();\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"team\\\"],\\n            s.aienMintFee\\n        );\\n        IERC721(s.contracts[\\\"aien\\\"]).safeMintByMinter(_sender);\\n        IDB(s.contracts[\\\"db\\\"]).setAien(id);\\n\\n        // emit AiMint(_sender, id);\\n        emit Aien_AiMint_Event(_sender, id, s.aienMintFee);\\n\\n        return id;\\n    }\\n\\n    function _defaultMint(\\n        address _sender\\n    ) internal onlyFirstMint returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint id = IERC721(s.contracts[\\\"aien\\\"]).nextTokenId();\\n\\n        IERC721(s.contracts[\\\"aien\\\"]).safeMintByMinter(_sender);\\n        IDB(s.contracts[\\\"db\\\"]).setAien(id);\\n\\n        // emit DefaultMint(_sender, id);\\n        emit Aien_DefaultMint_Event(_sender, id);\\n        return id;\\n    }\\n\\n    function _pfMint(\\n        address _sender,\\n        uint _pfId\\n    ) internal onlyFirstMint returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        require(\\n            IERC721(s.contracts[\\\"perfriends\\\"]).ownerOf(_pfId) == _sender,\\n            \\\"not owner\\\"\\n        );\\n        // PF\\uc758 \\ub4f1\\uae09\\uc774 \\uc0c1\\uc704 3\\ub4f1\\uae09\\uc778\\uc9c0 \\uccb4\\ud06c (unique, legendary, myth)\\n        require(\\n            IDB(s.contracts[\\\"db\\\"]).getPfGrade(_pfId) > 4,\\n            \\\"at least PF grade 5\\\"\\n        );\\n\\n        uint id = IERC721(s.contracts[\\\"aien\\\"]).nextTokenId();\\n        IDB(s.contracts[\\\"db\\\"]).setAien(id);\\n        IDB(s.contracts[\\\"db\\\"]).usePFimg(id, _pfId);\\n        IERC721(s.contracts[\\\"aien\\\"]).safeMintByMinter(_sender);\\n\\n        // emit PfMint(_sender, id, _pfId);\\n        emit Aien_PfMint_Event(_sender, id, _pfId);\\n\\n        return id;\\n    }\\n\\n    function _defaultSetImage(address _sender, uint _aienId) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IERC721(s.contracts[\\\"aien\\\"]).ownerOf(_aienId) == _sender,\\n            \\\"not owner\\\"\\n        );\\n\\n        // emit DefaultSetImage(_sender, _aienId);\\n        emit Aien_DefaultSetImage_Event(_sender, _aienId);\\n    }\\n\\n    function _aiSetImage(address _sender, uint _aienId) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IERC721(s.contracts[\\\"aien\\\"]).ownerOf(_aienId) == _sender,\\n            \\\"not owner\\\"\\n        );\\n\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"team\\\"],\\n            s.aienMintFee\\n        );\\n\\n        // emit AiSetImage(_sender, _aienId);\\n        emit Aien_AiSetImage_Event(_sender, _aienId, s.aienMintFee);\\n    }\\n\\n    function _pfSetImage(address _sender, uint _aienId, uint _pfId) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IERC721(s.contracts[\\\"aien\\\"]).ownerOf(_aienId) == _sender,\\n            \\\"not owner\\\"\\n        );\\n        require(\\n            IERC721(s.contracts[\\\"perfriends\\\"]).ownerOf(_pfId) == _sender,\\n            \\\"not owner\\\"\\n        );\\n        // PF\\uc758 \\ub4f1\\uae09\\uc774 \\uc0c1\\uc704 3\\ub4f1\\uae09\\uc778\\uc9c0 \\uccb4\\ud06c (unique, legendary, myth)\\n        require(\\n            IDB(s.contracts[\\\"db\\\"]).getPfGrade(_pfId) > 4,\\n            \\\"at least PF grade 5\\\"\\n        );\\n\\n        IDB(s.contracts[\\\"db\\\"]).usePFimg(_aienId, _pfId);\\n\\n        // emit PfSetImage(_sender, _aienId, _pfId);\\n        emit Aien_PfSetImage_Event(_sender, _aienId, _pfId);\\n    }\\n}\\n\",\"keccak256\":\"0x11f541ab6c880acee5f847beef671002f18236ac120bf0dc6c1779f55c42cae5\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xdc916985bab8246380c2188436b2e25e333d34e9fdc7bf3b0245f5bcc716e5dc\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n//import \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\n/* interface IERC721 is IERC165 { */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function burn(uint256 _tokenId) external;\\n\\n    function safeMintByMinter(address _to) external;\\n\\n    function nextTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3dfb334f4ed930d3eb3b781f7605fe1ab071b54c66540e99c4e37c437ff4a93a\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IKlaySwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// 0xc6a2ad8cc6e4a7e08fc37cc5954be07d499e7654 KSP\\n// 0x7A74B3be679E194E1D6A0C29A343ef8D2a5AC876 Util\\ninterface IKlaySwap {\\n    function estimateSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] memory path\\n    ) external view returns (uint amountOut);\\n\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint amountA,\\n        address tokenB,\\n        uint amountB,\\n        address[] memory path\\n    ) external;\\n}\\n\\n\\n\\n\\n\",\"keccak256\":\"0xdf4506259a183c376f7e8dec594a1ea6dd1e07c6cf048c0a0ea1b5014e666cba\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\n// using EnumerableSet for EnumerableSet.AddressSet;\\n// i-Tez Structs\\n//- P0 struct\\nstruct P0_State {\\n    uint24 maxProb;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\uac1c\\ub2f9 \\uc218\\uc218\\ub8cc\\n    uint addProbFee;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\ud68d\\ub4dd \\uacbd\\ud5d8\\uce58\\n    uint16 addProbExp;\\n    // bool\\n    bool isVRF;\\n}\\nstruct P0_PerFriendsProb {\\n    string pfGrade;\\n    uint24 gradeProb;\\n}\\n\\nstruct P0_GradeInfo {\\n    // \\ub2e4\\uc74c level\\uc774 \\uc5f4\\ub838\\ub294\\uc9c0 \\ud655\\uc778\\n    bool isOpen;\\n    // level\\ubcc4 mix fee\\n    uint mixFee;\\n    // \\ub808\\ubca8\\uc5c5 \\uc131\\uacf5\\uc2dc level\\ubcc4 \\ucd08\\uae30 base \\ud655\\ub960\\n    uint24 initBaseProb;\\n    // level\\ubcc4 \\ucd94\\uac00 \\ud655\\ub960 \\ubc38\\ub7f0\\uc2a4 \\uc870\\uc815\\uac12\\n    uint16 mixExp;\\n    // level\\ubcc4 \\ud569\\uc131 \\uc2e4\\ud328\\uc2dc \\ucd94\\uac00 \\ud655\\ub960 min,max\\n    uint24 failedAddProbMin;\\n    // 1000 = 0.1%, 10000 = 0.01%\\n    uint24 failedAddProbMax;\\n}\\n\\nstruct P0_MergePfGrade {\\n    uint8 grade;\\n    string gradeName;\\n    uint mergeFee;\\n    uint mergeUseItemAmount;\\n    uint latestId;\\n    uint setMatadataId;\\n    bool isOpen;\\n}\\nstruct P0_MergeState {\\n    uint agencyIncomePercent;\\n    uint influencerIncomePercent;\\n    \\n}\\n// //- Distribute struct\\nstruct Distribute_State {\\n    uint beforeP2Usdt;\\n    uint beforeP2Per;\\n    uint beforeTeamUsdt;\\n    // distribute ratios\\n    uint24 p1Ratio;\\n    uint24 p2PerRatio;\\n    uint24 p2UsdtRatio;\\n    uint24 burnRatio;\\n    uint24 teamUsdtRatio;\\n}\\n// DB > Filtered User Struct\\nstruct User {\\n    // DB > idx\\n    uint userId;\\n    // token itme ID\\n    uint itemId;\\n    address incomeAddr;\\n    uint feeBalance;\\n    bool isAble;\\n    uint mintCount;\\n    uint useLevelupCount;\\n    uint useMergeCount;\\n    //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n    uint referralIncome;\\n    address agency;\\n    uint agencyIncome;\\n}\\n\\n// P0 End\\nstruct AppStorage {\\n    // address constants\\n    mapping(string => address) contracts;\\n    // i-Tez/////////////////////////////\\n    // P0 ///////////////////////////////\\n    P0_State p0_states;\\n    P0_GradeInfo[11] p0_gradeInfos;\\n    mapping(uint => P0_PerFriendsProb) p0_perFriendsProbs;\\n    /////////////////////////////////////\\n    // Distribute ///////////////////////\\n    Distribute_State distribute_states;\\n    uint aienMintFee;\\n    // Distribute\\n    uint ksSwapLimit;\\n    bool isAutoDistribute;\\n    // P0 - Item Merge Grade Infos\\n    mapping(uint8 => P0_MergePfGrade) p0_mergePfGrades;\\n    mapping(uint => string) pfMetaURI;\\n    P0_MergeState p0_mergeState;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\\n/**\\n@dev global modifier\\n */\\ncontract Modifiers {\\n    modifier onlyDev() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    // modifier checkRole(uint16 _role) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     require(\\n    //         s.roles[_role].accounts.contains(LibMeta.msgSender()),\\n    //         \\\"AccessControl: sender does not have required role\\\"\\n    //     );\\n    //     _;\\n    // }\\n}\\n\",\"keccak256\":\"0x3d81d1cf33ddb7fd3e5b6679eef8261d5d7120fe91467c65a758e55bcb857ef2\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xaea50a523e0ff67f5fc59946320f11efcfc09c75a972788f2884b9d1198a83d9\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDistribute.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, LibAppStorage} from \\\"./LibAppStorage.sol\\\";\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {IKlaySwap} from \\\"../interfaces/IKlaySwap.sol\\\";\\nimport {IP2} from \\\"../../Channel_iN/interfaces/IP2.sol\\\";\\nimport {IP1} from \\\"../../Channel_iN/interfaces/IP1.sol\\\";\\n\\nlibrary LibDistribute {\\n    //\\n    //\\n    // \\u2500\\u2500\\u2500 P0 LV UP DISTRIBUTION \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    function p0LvUpDistribute(\\n        address _agency,\\n        uint _agencyAmount,\\n        address _influencer,\\n        uint _influencerAmount,\\n        uint _totalAmount\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        (\\n            uint p1Amount,\\n            uint p2Amount,\\n            uint burnAmount,\\n            uint teamAmountForUsdt,\\n            uint p2AmountForUsdt\\n        ) = distributeCalc(_totalAmount);\\n        address per = s.contracts[\\\"per\\\"];\\n\\n        IERC20(per).transfer(_agency, _agencyAmount);\\n        IERC20(per).transfer(_influencer, _influencerAmount);\\n        IERC20(per).transfer(s.contracts[\\\"burn\\\"], burnAmount);\\n        IERC20(per).transfer(s.contracts[\\\"p2\\\"], p2Amount);\\n        IERC20(per).transfer(s.contracts[\\\"p1\\\"], p1Amount);\\n        IP2(s.contracts[\\\"p2\\\"]).addPerUsdtDistribution(0, p2Amount);\\n        IP1(s.contracts[\\\"p1\\\"]).diamond_P1_addDistributionAmountAll(p1Amount);\\n\\n        // IERC20(PER).transfer(P1, )\\n        // \\ucd94\\uac00 \\ub418\\uc5b4\\uc57c\\ud560 \\uac83\\ub4e4\\n        // 1.P1 10% PER\\n        // 2.P2 20% PER\\n        // 3.Burn 1% PER\\n        s.distribute_states.beforeP2Per += p2Amount;\\n        s.distribute_states.beforeP2Usdt += p2AmountForUsdt;\\n        s.distribute_states.beforeTeamUsdt += teamAmountForUsdt;\\n    }\\n\\n    function distributeCalc(\\n        uint _amount\\n    ) internal view returns (uint, uint, uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint _p1Amount = (_amount * s.distribute_states.p1Ratio) / 100;\\n        uint _p2Amount = (_amount * s.distribute_states.p2PerRatio) / 100;\\n        uint _burnAmount = (_amount * s.distribute_states.burnRatio) / 100;\\n        uint _teamAmountForUsdt = (_amount *\\n            s.distribute_states.teamUsdtRatio) / 100;\\n        uint _p2AmountForUsdt = (_amount * s.distribute_states.p2UsdtRatio) /\\n            100;\\n        return (\\n            _p1Amount,\\n            _p2Amount,\\n            _burnAmount,\\n            _teamAmountForUsdt,\\n            _p2AmountForUsdt\\n        );\\n    }\\n\\n    function swapToDistribute() internal {\\n        (bool run, uint thisBalance, uint estimateUsdt) = isSwap();\\n        require(run == true, \\\"swapToDistribute: swap is not needed\\\");\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        address[] memory path;\\n\\n        IERC20(s.contracts[\\\"per\\\"]).approve(\\n            s.contracts[\\\"klayswap\\\"],\\n            thisBalance\\n        );\\n\\n        IKlaySwap(s.contracts[\\\"klayswap\\\"]).exchangeKctPos(\\n            s.contracts[\\\"per\\\"],\\n            thisBalance,\\n            s.contracts[\\\"usdt\\\"],\\n            estimateUsdt,\\n            path\\n        );\\n\\n        _swapToCalculate();\\n    }\\n\\n    function _swapToCalculate() internal returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint usdtBalance = IERC20(s.contracts[\\\"usdt\\\"]).balanceOf(address(this));\\n        uint calculatePercent = s.distribute_states.p2UsdtRatio +\\n            s.distribute_states.teamUsdtRatio;\\n\\n        uint _p2UsdtAmount = (usdtBalance * s.distribute_states.p2UsdtRatio) /\\n            calculatePercent;\\n        uint _teamUsdtAmount = (usdtBalance *\\n            s.distribute_states.teamUsdtRatio) / calculatePercent;\\n\\n        IERC20(s.contracts[\\\"usdt\\\"]).transfer(s.contracts[\\\"p2\\\"], _p2UsdtAmount);\\n\\n        IERC20(s.contracts[\\\"usdt\\\"]).transfer(\\n            s.contracts[\\\"team\\\"],\\n            _teamUsdtAmount\\n        );\\n\\n        IP2(s.contracts[\\\"p2\\\"]).addPerUsdtDistribution(\\n            _p2UsdtAmount,\\n            s.distribute_states.beforeP2Per\\n        );\\n\\n        s.distribute_states.beforeP2Per = 0;\\n        s.distribute_states.beforeP2Usdt = 0;\\n        s.distribute_states.beforeTeamUsdt = 0;\\n    }\\n\\n    function getDistributePrice() internal view returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.distribute_states.beforeP2Usdt,\\n            s.distribute_states.beforeP2Per,\\n            s.distribute_states.beforeTeamUsdt\\n        );\\n    }\\n\\n    // function p0_transferForDistribute() internal returns (uint, uint, uint) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     uint beforeP2Usdt = s.distribute_states.beforeP2Usdt;\\n    //     uint beforeP2Per = s.distribute_states.beforeP2Per;\\n    //     uint beforeTeamUsdt = s.distribute_states.beforeTeamUsdt;\\n    //     address per = s.contracts[\\\"per\\\"];\\n    //     // require(\\n    //     //     LibMeta.msgSender() == LibDiamond.enforceIsContractOwner(),\\n    //     //     \\\"you are not dev\\\"\\n    //     // );\\n    //     IERC20(per).transfer(\\n    //         LibMeta.msgSender(),\\n    //         beforeP2Usdt + beforeTeamUsdt\\n    //     );\\n    //     uint _beforeP2Usdt = beforeP2Usdt;\\n    //     uint _beforeP2Per = beforeP2Per;\\n    //     uint _beforeTeamUsdt = beforeTeamUsdt;\\n\\n    //     beforeP2Usdt = 0;\\n    //     beforeP2Per = 0;\\n    //     beforeTeamUsdt = 0;\\n\\n    //     return (_beforeP2Usdt, _beforeP2Per, _beforeTeamUsdt);\\n    // }\\n\\n    function isSwap() internal view returns (bool, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address[] memory path;\\n        uint _balance = IERC20(s.contracts[\\\"per\\\"]).balanceOf(address(this));\\n\\n        uint estimateUsdt = IKlaySwap(s.contracts[\\\"klayswaputil\\\"]).estimateSwap(\\n            s.contracts[\\\"per\\\"],\\n            s.contracts[\\\"usdt\\\"],\\n            _balance,\\n            path\\n        );\\n\\n        if (estimateUsdt > s.ksSwapLimit && s.isAutoDistribute == true) {\\n            return (true, _balance, estimateUsdt);\\n        } else {\\n            return (false, 0, 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce77e1d0c08372bd05129b0b7fe85b7b7ba29a83de5eff262d5b30f8b68f495d\",\"license\":\"UNLICENSED\"},\"contracts/shared/libraries/LibMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"\\n            )\\n        );\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194f61daa9d3c92ca3de358b76506dbb1e9e39211dc5b49768f18cc38f85b1ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e9c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806343744fd714610067578063635e0d10146100715780636e3e74c81461008d578063783e74d614610097578063b8107ac2146100b3578063dde343dd146100cf575b600080fd5b61006f6100eb565b005b61008b600480360381019061008691906118ce565b610104565b005b61009561011f565b005b6100b160048036038101906100ac91906118ce565b610138565b005b6100cd60048036038101906100c891906118fb565b610152565b005b6100e960048036038101906100e491906118ce565b61016e565b005b60006100f5610188565b905061010081610238565b5050565b600061010e610188565b905061011a81836105a4565b505050565b6000610129610188565b905061013481610bdc565b5050565b6000610142610188565b905061014e818361104e565b5050565b600061015c610188565b90506101698184846111c8565b505050565b6000610178610188565b9050610184818361160e565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361023157600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050610235565b3390505b90565b60008061024361188e565b905060008160000160405161025790611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316102a9610188565b6040518263ffffffff1660e01b81526004016102c591906119e8565b602060405180830381865afa1580156102e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103069190611a18565b14610346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033d90611aa2565b60405180910390fd5b600061035061188e565b905060008160000160405161036490611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104019190611a18565b90508160000160405161041390611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c0e55d5866040518263ffffffff1660e01b815260040161047a91906119e8565b600060405180830381600087803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b50505050816000016040516104bc90611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632afcbc46826040518263ffffffff1660e01b81526004016105239190611b32565b600060405180830381600087803b15801561053d57600080fd5b505af1158015610551573d6000803e3d6000fd5b50505050808573ffffffffffffffffffffffffffffffffffffffff167f88423ffc50fb24ab17d27b09d236ad2a0e05182e9286e93859ff68cc586f03c860405160405180910390a3809350505050919050565b6000806105af61188e565b90506000816000016040516105c390611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231610615610188565b6040518263ffffffff1660e01b815260040161063191906119e8565b602060405180830381865afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190611a18565b146106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a990611aa2565b60405180910390fd5b60006106bc61188e565b90508473ffffffffffffffffffffffffffffffffffffffff16816000016040516106e590611b99565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b815260040161074c9190611b32565b602060405180830381865afa158015610769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078d9190611bda565b73ffffffffffffffffffffffffffffffffffffffff16146107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da90611c53565b60405180910390fd5b6004816000016040516107f590611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d26761866040518263ffffffff1660e01b815260040161085c9190611b32565b602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190611a18565b116108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490611cbf565b60405180910390fd5b6000816000016040516108ef90611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190611a18565b90508160000160405161099e90611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632afcbc46826040518263ffffffff1660e01b8152600401610a059190611b32565b600060405180830381600087803b158015610a1f57600080fd5b505af1158015610a33573d6000803e3d6000fd5b5050505081600001604051610a4790611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637bf3519582876040518363ffffffff1660e01b8152600401610ab0929190611cdf565b600060405180830381600087803b158015610aca57600080fd5b505af1158015610ade573d6000803e3d6000fd5b5050505081600001604051610af290611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c0e55d5876040518263ffffffff1660e01b8152600401610b5991906119e8565b600060405180830381600087803b158015610b7357600080fd5b505af1158015610b87573d6000803e3d6000fd5b5050505084818773ffffffffffffffffffffffffffffffffffffffff167f1b92595453af778c64ceef0740027129d2b54d9c00790188e3c7328e6fbe10ad60405160405180910390a480935050505092915050565b600080610be761188e565b9050600081600001604051610bfb90611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231610c4d610188565b6040518263ffffffff1660e01b8152600401610c6991906119e8565b602060405180830381865afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190611a18565b14610cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce190611aa2565b60405180910390fd5b6000610cf461188e565b9050600081600001604051610d0890611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da59190611a18565b905081600001604051610db790611d54565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8684600001604051610e1290611db5565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685602a01546040518463ffffffff1660e01b8152600401610e6493929190611dca565b6020604051808303816000875af1158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea79190611e39565b5081600001604051610eb890611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c0e55d5866040518263ffffffff1660e01b8152600401610f1f91906119e8565b600060405180830381600087803b158015610f3957600080fd5b505af1158015610f4d573d6000803e3d6000fd5b5050505081600001604051610f6190611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632afcbc46826040518263ffffffff1660e01b8152600401610fc89190611b32565b600060405180830381600087803b158015610fe257600080fd5b505af1158015610ff6573d6000803e3d6000fd5b5050505081602a0154818673ffffffffffffffffffffffffffffffffffffffff167f08adfa11554b38781c149cae1012954447a95f3ec20d04b215cfa9adef15bfbe60405160405180910390a4809350505050919050565b600061105861188e565b90508273ffffffffffffffffffffffffffffffffffffffff168160000160405161108190611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016110e89190611b32565b602060405180830381865afa158015611105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111299190611bda565b73ffffffffffffffffffffffffffffffffffffffff161461117f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117690611c53565b60405180910390fd5b818373ffffffffffffffffffffffffffffffffffffffff167f700335a7325302599dc612a8583c24b1d56fd8822dd0622f4301069250cded2e60405160405180910390a3505050565b60006111d261188e565b90508373ffffffffffffffffffffffffffffffffffffffff16816000016040516111fb90611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016112629190611b32565b602060405180830381865afa15801561127f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a39190611bda565b73ffffffffffffffffffffffffffffffffffffffff16146112f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f090611c53565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168160000160405161132090611b99565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016113879190611b32565b602060405180830381865afa1580156113a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c89190611bda565b73ffffffffffffffffffffffffffffffffffffffff161461141e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141590611c53565b60405180910390fd5b60048160000160405161143090611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d26761846040518263ffffffff1660e01b81526004016114979190611b32565b602060405180830381865afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d89190611a18565b11611518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150f90611cbf565b60405180910390fd5b8060000160405161152890611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637bf3519584846040518363ffffffff1660e01b8152600401611591929190611cdf565b600060405180830381600087803b1580156115ab57600080fd5b505af11580156115bf573d6000803e3d6000fd5b5050505081838573ffffffffffffffffffffffffffffffffffffffff167f46bc0332351dc9f346de239a5b580849ab69fcefe8b9168129aee3dc7f2651ac60405160405180910390a450505050565b600061161861188e565b90508273ffffffffffffffffffffffffffffffffffffffff168160000160405161164190611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016116a89190611b32565b602060405180830381865afa1580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190611bda565b73ffffffffffffffffffffffffffffffffffffffff161461173f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173690611c53565b60405180910390fd5b8060000160405161174f90611d54565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd84836000016040516117aa90611db5565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684602a01546040518463ffffffff1660e01b81526004016117fc93929190611dca565b6020604051808303816000875af115801561181b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183f9190611e39565b5080602a0154828473ffffffffffffffffffffffffffffffffffffffff167fa7beba20503d0bbc00bdc905cb33ca60cb3eddeeaba4358eb51a9db12aaa643160405160405180910390a4505050565b600090565b600080fd5b6000819050919050565b6118ab81611898565b81146118b657600080fd5b50565b6000813590506118c8816118a2565b92915050565b6000602082840312156118e4576118e3611893565b5b60006118f2848285016118b9565b91505092915050565b6000806040838503121561191257611911611893565b5b6000611920858286016118b9565b9250506020611931858286016118b9565b9150509250929050565b600081905092915050565b7f6169656e00000000000000000000000000000000000000000000000000000000600082015250565b600061197c60048361193b565b915061198782611946565b600482019050919050565b600061199d8261196f565b9150819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119d2826119a7565b9050919050565b6119e2816119c7565b82525050565b60006020820190506119fd60008301846119d9565b92915050565b600081519050611a12816118a2565b92915050565b600060208284031215611a2e57611a2d611893565b5b6000611a3c84828501611a03565b91505092915050565b600082825260208201905092915050565b7f616c7265616479206d696e746564000000000000000000000000000000000000600082015250565b6000611a8c600e83611a45565b9150611a9782611a56565b602082019050919050565b60006020820190508181036000830152611abb81611a7f565b9050919050565b7f6462000000000000000000000000000000000000000000000000000000000000600082015250565b6000611af860028361193b565b9150611b0382611ac2565b600282019050919050565b6000611b1982611aeb565b9150819050919050565b611b2c81611898565b82525050565b6000602082019050611b476000830184611b23565b92915050565b7f706572667269656e647300000000000000000000000000000000000000000000600082015250565b6000611b83600a8361193b565b9150611b8e82611b4d565b600a82019050919050565b6000611ba482611b76565b9150819050919050565b611bb7816119c7565b8114611bc257600080fd5b50565b600081519050611bd481611bae565b92915050565b600060208284031215611bf057611bef611893565b5b6000611bfe84828501611bc5565b91505092915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000611c3d600983611a45565b9150611c4882611c07565b602082019050919050565b60006020820190508181036000830152611c6c81611c30565b9050919050565b7f6174206c65617374205046206772616465203500000000000000000000000000600082015250565b6000611ca9601383611a45565b9150611cb482611c73565b602082019050919050565b60006020820190508181036000830152611cd881611c9c565b9050919050565b6000604082019050611cf46000830185611b23565b611d016020830184611b23565b9392505050565b7f7065720000000000000000000000000000000000000000000000000000000000600082015250565b6000611d3e60038361193b565b9150611d4982611d08565b600382019050919050565b6000611d5f82611d31565b9150819050919050565b7f7465616d00000000000000000000000000000000000000000000000000000000600082015250565b6000611d9f60048361193b565b9150611daa82611d69565b600482019050919050565b6000611dc082611d92565b9150819050919050565b6000606082019050611ddf60008301866119d9565b611dec60208301856119d9565b611df96040830184611b23565b949350505050565b60008115159050919050565b611e1681611e01565b8114611e2157600080fd5b50565b600081519050611e3381611e0d565b92915050565b600060208284031215611e4f57611e4e611893565b5b6000611e5d84828501611e24565b9150509291505056fea264697066735822122034f85c6b721272dc873c8328a2cd523d1938d978a1abee6b35bf0306b8af157f64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806343744fd714610067578063635e0d10146100715780636e3e74c81461008d578063783e74d614610097578063b8107ac2146100b3578063dde343dd146100cf575b600080fd5b61006f6100eb565b005b61008b600480360381019061008691906118ce565b610104565b005b61009561011f565b005b6100b160048036038101906100ac91906118ce565b610138565b005b6100cd60048036038101906100c891906118fb565b610152565b005b6100e960048036038101906100e491906118ce565b61016e565b005b60006100f5610188565b905061010081610238565b5050565b600061010e610188565b905061011a81836105a4565b505050565b6000610129610188565b905061013481610bdc565b5050565b6000610142610188565b905061014e818361104e565b5050565b600061015c610188565b90506101698184846111c8565b505050565b6000610178610188565b9050610184818361160e565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361023157600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050610235565b3390505b90565b60008061024361188e565b905060008160000160405161025790611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316102a9610188565b6040518263ffffffff1660e01b81526004016102c591906119e8565b602060405180830381865afa1580156102e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103069190611a18565b14610346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033d90611aa2565b60405180910390fd5b600061035061188e565b905060008160000160405161036490611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104019190611a18565b90508160000160405161041390611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c0e55d5866040518263ffffffff1660e01b815260040161047a91906119e8565b600060405180830381600087803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b50505050816000016040516104bc90611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632afcbc46826040518263ffffffff1660e01b81526004016105239190611b32565b600060405180830381600087803b15801561053d57600080fd5b505af1158015610551573d6000803e3d6000fd5b50505050808573ffffffffffffffffffffffffffffffffffffffff167f88423ffc50fb24ab17d27b09d236ad2a0e05182e9286e93859ff68cc586f03c860405160405180910390a3809350505050919050565b6000806105af61188e565b90506000816000016040516105c390611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231610615610188565b6040518263ffffffff1660e01b815260040161063191906119e8565b602060405180830381865afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190611a18565b146106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a990611aa2565b60405180910390fd5b60006106bc61188e565b90508473ffffffffffffffffffffffffffffffffffffffff16816000016040516106e590611b99565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b815260040161074c9190611b32565b602060405180830381865afa158015610769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078d9190611bda565b73ffffffffffffffffffffffffffffffffffffffff16146107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da90611c53565b60405180910390fd5b6004816000016040516107f590611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d26761866040518263ffffffff1660e01b815260040161085c9190611b32565b602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190611a18565b116108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490611cbf565b60405180910390fd5b6000816000016040516108ef90611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190611a18565b90508160000160405161099e90611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632afcbc46826040518263ffffffff1660e01b8152600401610a059190611b32565b600060405180830381600087803b158015610a1f57600080fd5b505af1158015610a33573d6000803e3d6000fd5b5050505081600001604051610a4790611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637bf3519582876040518363ffffffff1660e01b8152600401610ab0929190611cdf565b600060405180830381600087803b158015610aca57600080fd5b505af1158015610ade573d6000803e3d6000fd5b5050505081600001604051610af290611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c0e55d5876040518263ffffffff1660e01b8152600401610b5991906119e8565b600060405180830381600087803b158015610b7357600080fd5b505af1158015610b87573d6000803e3d6000fd5b5050505084818773ffffffffffffffffffffffffffffffffffffffff167f1b92595453af778c64ceef0740027129d2b54d9c00790188e3c7328e6fbe10ad60405160405180910390a480935050505092915050565b600080610be761188e565b9050600081600001604051610bfb90611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231610c4d610188565b6040518263ffffffff1660e01b8152600401610c6991906119e8565b602060405180830381865afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190611a18565b14610cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce190611aa2565b60405180910390fd5b6000610cf461188e565b9050600081600001604051610d0890611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375794a3c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da59190611a18565b905081600001604051610db790611d54565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8684600001604051610e1290611db5565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685602a01546040518463ffffffff1660e01b8152600401610e6493929190611dca565b6020604051808303816000875af1158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea79190611e39565b5081600001604051610eb890611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c0e55d5866040518263ffffffff1660e01b8152600401610f1f91906119e8565b600060405180830381600087803b158015610f3957600080fd5b505af1158015610f4d573d6000803e3d6000fd5b5050505081600001604051610f6190611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632afcbc46826040518263ffffffff1660e01b8152600401610fc89190611b32565b600060405180830381600087803b158015610fe257600080fd5b505af1158015610ff6573d6000803e3d6000fd5b5050505081602a0154818673ffffffffffffffffffffffffffffffffffffffff167f08adfa11554b38781c149cae1012954447a95f3ec20d04b215cfa9adef15bfbe60405160405180910390a4809350505050919050565b600061105861188e565b90508273ffffffffffffffffffffffffffffffffffffffff168160000160405161108190611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016110e89190611b32565b602060405180830381865afa158015611105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111299190611bda565b73ffffffffffffffffffffffffffffffffffffffff161461117f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117690611c53565b60405180910390fd5b818373ffffffffffffffffffffffffffffffffffffffff167f700335a7325302599dc612a8583c24b1d56fd8822dd0622f4301069250cded2e60405160405180910390a3505050565b60006111d261188e565b90508373ffffffffffffffffffffffffffffffffffffffff16816000016040516111fb90611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016112629190611b32565b602060405180830381865afa15801561127f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a39190611bda565b73ffffffffffffffffffffffffffffffffffffffff16146112f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f090611c53565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168160000160405161132090611b99565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016113879190611b32565b602060405180830381865afa1580156113a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c89190611bda565b73ffffffffffffffffffffffffffffffffffffffff161461141e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141590611c53565b60405180910390fd5b60048160000160405161143090611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d26761846040518263ffffffff1660e01b81526004016114979190611b32565b602060405180830381865afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d89190611a18565b11611518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150f90611cbf565b60405180910390fd5b8060000160405161152890611b0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637bf3519584846040518363ffffffff1660e01b8152600401611591929190611cdf565b600060405180830381600087803b1580156115ab57600080fd5b505af11580156115bf573d6000803e3d6000fd5b5050505081838573ffffffffffffffffffffffffffffffffffffffff167f46bc0332351dc9f346de239a5b580849ab69fcefe8b9168129aee3dc7f2651ac60405160405180910390a450505050565b600061161861188e565b90508273ffffffffffffffffffffffffffffffffffffffff168160000160405161164190611992565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016116a89190611b32565b602060405180830381865afa1580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190611bda565b73ffffffffffffffffffffffffffffffffffffffff161461173f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173690611c53565b60405180910390fd5b8060000160405161174f90611d54565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd84836000016040516117aa90611db5565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684602a01546040518463ffffffff1660e01b81526004016117fc93929190611dca565b6020604051808303816000875af115801561181b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183f9190611e39565b5080602a0154828473ffffffffffffffffffffffffffffffffffffffff167fa7beba20503d0bbc00bdc905cb33ca60cb3eddeeaba4358eb51a9db12aaa643160405160405180910390a4505050565b600090565b600080fd5b6000819050919050565b6118ab81611898565b81146118b657600080fd5b50565b6000813590506118c8816118a2565b92915050565b6000602082840312156118e4576118e3611893565b5b60006118f2848285016118b9565b91505092915050565b6000806040838503121561191257611911611893565b5b6000611920858286016118b9565b9250506020611931858286016118b9565b9150509250929050565b600081905092915050565b7f6169656e00000000000000000000000000000000000000000000000000000000600082015250565b600061197c60048361193b565b915061198782611946565b600482019050919050565b600061199d8261196f565b9150819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119d2826119a7565b9050919050565b6119e2816119c7565b82525050565b60006020820190506119fd60008301846119d9565b92915050565b600081519050611a12816118a2565b92915050565b600060208284031215611a2e57611a2d611893565b5b6000611a3c84828501611a03565b91505092915050565b600082825260208201905092915050565b7f616c7265616479206d696e746564000000000000000000000000000000000000600082015250565b6000611a8c600e83611a45565b9150611a9782611a56565b602082019050919050565b60006020820190508181036000830152611abb81611a7f565b9050919050565b7f6462000000000000000000000000000000000000000000000000000000000000600082015250565b6000611af860028361193b565b9150611b0382611ac2565b600282019050919050565b6000611b1982611aeb565b9150819050919050565b611b2c81611898565b82525050565b6000602082019050611b476000830184611b23565b92915050565b7f706572667269656e647300000000000000000000000000000000000000000000600082015250565b6000611b83600a8361193b565b9150611b8e82611b4d565b600a82019050919050565b6000611ba482611b76565b9150819050919050565b611bb7816119c7565b8114611bc257600080fd5b50565b600081519050611bd481611bae565b92915050565b600060208284031215611bf057611bef611893565b5b6000611bfe84828501611bc5565b91505092915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000611c3d600983611a45565b9150611c4882611c07565b602082019050919050565b60006020820190508181036000830152611c6c81611c30565b9050919050565b7f6174206c65617374205046206772616465203500000000000000000000000000600082015250565b6000611ca9601383611a45565b9150611cb482611c73565b602082019050919050565b60006020820190508181036000830152611cd881611c9c565b9050919050565b6000604082019050611cf46000830185611b23565b611d016020830184611b23565b9392505050565b7f7065720000000000000000000000000000000000000000000000000000000000600082015250565b6000611d3e60038361193b565b9150611d4982611d08565b600382019050919050565b6000611d5f82611d31565b9150819050919050565b7f7465616d00000000000000000000000000000000000000000000000000000000600082015250565b6000611d9f60048361193b565b9150611daa82611d69565b600482019050919050565b6000611dc082611d92565b9150819050919050565b6000606082019050611ddf60008301866119d9565b611dec60208301856119d9565b611df96040830184611b23565b949350505050565b60008115159050919050565b611e1681611e01565b8114611e2157600080fd5b50565b600081519050611e3381611e0d565b92915050565b600060208284031215611e4f57611e4e611893565b5b6000611e5d84828501611e24565b9150509291505056fea264697066735822122034f85c6b721272dc873c8328a2cd523d1938d978a1abee6b35bf0306b8af157f64736f6c63430008160033",
  "devdoc": {
    "details": "Aien Mint Facet Contract",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}