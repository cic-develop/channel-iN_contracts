{
  "address": "0x74a4D2cC8126F8C81df33c115FD665B1E0BBda9A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addProb",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "perfs",
          "type": "uint256[]"
        }
      ],
      "name": "P0_AddProb_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLevelUp",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "P0_BaseMix_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "perfId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "perfGrade",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "perfURI",
          "type": "bytes"
        }
      ],
      "name": "P0_ItemMerge_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLevelUp",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usePower",
          "type": "uint256"
        }
      ],
      "name": "P0_PremiumMix_Event",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aienId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_pf_Ids",
          "type": "uint256[]"
        }
      ],
      "name": "P0_addProbCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_useItemId",
          "type": "uint256"
        }
      ],
      "name": "P0_baseMixCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_basicMergeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_getAddProbFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_getCurrentMergeStates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "grade",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "gradeName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "mergeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mergeUseItemAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "latestId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setMatadataId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct P0_MergePfGrade[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_getMaxProb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "P0_getMergeState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_grade",
          "type": "uint8"
        }
      ],
      "name": "P0_getMergeStates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "grade",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "gradeName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "mergeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mergeUseItemAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "latestId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setMatadataId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct P0_MergePfGrade",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_getMetadataMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_influencerMergeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_itemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_grade",
          "type": "uint8"
        }
      ],
      "name": "P0_itemGradeMerge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_itemAmount",
          "type": "uint256"
        }
      ],
      "name": "P0_itemMerge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "P0_mixPFInfos",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_useItemId",
          "type": "uint256"
        }
      ],
      "name": "P0_premiumMixCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 69,
  "solcInputHash": "bb0de70dcc2b21c8a92ae21bff968ab4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addProb\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"perfs\",\"type\":\"uint256[]\"}],\"name\":\"P0_AddProb_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLevelUp\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"P0_BaseMix_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"perfId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perfGrade\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"perfURI\",\"type\":\"bytes\"}],\"name\":\"P0_ItemMerge_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLevelUp\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usePower\",\"type\":\"uint256\"}],\"name\":\"P0_PremiumMix_Event\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_pf_Ids\",\"type\":\"uint256[]\"}],\"name\":\"P0_addProbCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_useItemId\",\"type\":\"uint256\"}],\"name\":\"P0_baseMixCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_basicMergeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_getAddProbFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_getCurrentMergeStates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"grade\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"gradeName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mergeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mergeUseItemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setMatadataId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"internalType\":\"struct P0_MergePfGrade[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_getMaxProb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"P0_getMergeState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_grade\",\"type\":\"uint8\"}],\"name\":\"P0_getMergeStates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"grade\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"gradeName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mergeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mergeUseItemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setMatadataId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"internalType\":\"struct P0_MergePfGrade\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_getMetadataMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_influencerMergeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_itemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_grade\",\"type\":\"uint8\"}],\"name\":\"P0_itemGradeMerge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_itemAmount\",\"type\":\"uint256\"}],\"name\":\"P0_itemMerge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"P0_mixPFInfos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_useItemId\",\"type\":\"uint256\"}],\"name\":\"P0_premiumMixCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"i-TEZ : P0 (Mix) Facet Contract\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"P0_getMaxProb()\":{\"notice\":\"P0 _ get functions\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Channel_iN/facets/P0Facet.sol\":\"P0Facet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Channel_iN/facets/P0Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {P0_MergePfGrade, AppStorage, Modifiers, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IDB} from \\\"../interfaces/IDB.sol\\\";\\nimport {IERC20} from \\\"../../shared/interfaces/IERC20.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC721} from \\\"../../shared/interfaces/IERC721.sol\\\";\\nimport {LibP0} from \\\"../libraries/LibP0.sol\\\";\\n\\ninterface IP0 {\\n    function mixPFInfos(\\n        uint _level\\n    ) external view returns (string memory, uint);\\n}\\n\\n/**\\n@dev i-TEZ : P0 (Mix) Facet Contract\\n */\\ncontract P0Facet is Modifiers {\\n    function P0_itemMerge(uint _itemId, uint _itemAmount) external {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        LibP0._itemMerge(msgsender, _itemId, _itemAmount);\\n    }\\n\\n    function P0_itemGradeMerge(\\n        uint _itemId,\\n        uint _itemAmount,\\n        uint8 _grade\\n    ) external {\\n        address msgsender = LibMeta.msgSender();\\n        LibP0._itemGradeMerge(msgsender, _itemId, _itemAmount, _grade);\\n    }\\n\\n    function P0_baseMixCall(uint _id, uint _useItemId) external returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        return LibP0._baseMixCall(msgsender, _id, _useItemId);\\n    }\\n\\n    function P0_premiumMixCall(\\n        uint _id,\\n        uint _useItemId\\n    ) external returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        LibP0._premiumMixCall(msgsender, _id, _useItemId);\\n    }\\n\\n    function P0_addProbCall(\\n        uint _aienId,\\n        uint[] memory _pf_Ids\\n    ) external returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        LibP0._addProbCall(msgsender, _aienId, _pf_Ids);\\n    }\\n\\n    /**\\n    P0 _ get functions\\n     */\\n\\n    function P0_getMaxProb() external view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.p0_states.maxProb;\\n    }\\n\\n    // input ItemId\\ubcc4\\ub85c \\ubcd1\\ud569\\uc2dc \\uc18c\\uc694\\ub418\\ub294 Per, item\\uc218\\ub7c9\\n    function P0_getMergeState(uint _itemId) external view returns (uint, uint) {\\n        return LibP0._getMergeState(_itemId);\\n    }\\n\\n    // PF POWER ZONE \\uc0ac\\uc6a9\\ub418\\ub294 Per \\uc218\\ub7c9\\n    function P0_getAddProbFee() external view returns (uint) {\\n        return LibP0._getAddProbFee();\\n    }\\n\\n    // \\uc778\\ud50c\\ub8e8\\uc5b8\\uc11c \\ub8e8\\ube44\\uc628 \\ubcd1\\ud569\\uc2dc amount\\n    function P0_influencerMergeAmount() external view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"db\\\"]).influencerMergeAmount();\\n    }\\n\\n    // \\uc7ac\\ub2e8 \\ub8e8\\ube44\\uc628 \\ubcd1\\ud569\\uc2dc amount\\n    function P0_basicMergeAmount() external view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"db\\\"]).basicMergeAmount();\\n    }\\n\\n    // MixPFInfos\\n    function P0_mixPFInfos(\\n        uint _level\\n    ) external view returns (string memory, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IP0(s.contracts[\\\"p0\\\"]).mixPFInfos(_level);\\n    }\\n\\n    // Aien Metadata set Margin value\\n    function P0_getMetadataMargin() external view returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"db\\\"])._getMedataMargin();\\n    }\\n\\n    function P0_getMergeStates(\\n        uint8 _grade\\n    ) external view returns (P0_MergePfGrade memory) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.p0_mergePfGrades[_grade];\\n    }\\n\\n    function P0_getCurrentMergeStates()\\n        external\\n        view\\n        returns (P0_MergePfGrade[] memory)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint8 endOpenGrade;\\n        for (uint8 i = 1; i < 11; i++) {\\n            s.p0_mergePfGrades[i].isOpen ? endOpenGrade = i : endOpenGrade;\\n        }\\n\\n        P0_MergePfGrade[] memory _mergePfGrades = new P0_MergePfGrade[](\\n            endOpenGrade\\n        );\\n        for (uint8 i = 1; i <= endOpenGrade; i++) {\\n            _mergePfGrades[i - 1] = s.p0_mergePfGrades[i];\\n        }\\n\\n        return _mergePfGrades;\\n    }\\n}\\n\",\"keccak256\":\"0x403ee8c55a6c3ac9956d328321e9fa91c51b7ed99f6ad136929c56fd6d305655\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IDB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// legacy db contract interface\\ninterface IDB {\\n    struct pf {\\n        uint id;\\n        uint class;\\n        bool isAien;\\n        uint usedAienId;\\n    }\\n\\n    struct pfGrade {\\n        uint normal;\\n        uint uncommon;\\n        uint rare;\\n        uint unique;\\n        uint legendary;\\n        uint myth;\\n        uint ancient;\\n    }\\n\\n    struct aien {\\n        uint id;\\n        // \\uac15\\ud654 \\ud69f\\uc218\\n        uint mixCount;\\n        //\\n        uint p2Level;\\n        // \\ud1a0\\ud0c8 \\uacbd\\ud5d8\\uce58\\n        uint totalExp;\\n        // \\ubbf8\\uc158 \\ubc0f, \\uc778\\ud50c\\ub8e8\\uc5b8\\uc11c \\ud65c\\ub3d9 \\uad00\\ub828 \\uacbd\\ud5d8\\uce58\\n        uint influExp;\\n        // \\uae30\\ubcf8 \\ud655\\ub960\\n        uint baseProb;\\n        // \\ud1a0\\ud0c8 \\ud655\\ub960\\n        uint totalProb;\\n        // is PF\\n        uint isPFid;\\n        // \\ucd94\\uac00\\ud655\\ub960\\n        uint addProb;\\n    }\\n\\n    struct User {\\n        // DB > idx\\n        uint userId;\\n        // token itme ID\\n        uint itemId;\\n        address incomeAddr;\\n        uint feeBalance;\\n        bool isAble;\\n        uint mintCount;\\n        uint useLevelupCount;\\n        uint useMergeCount;\\n        // uint ownerIncomePercent;\\n        // uint userIncomPercent;\\n        //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n        uint referralIncome;\\n        address agency;\\n        uint agencyIncome;\\n    }\\n\\n    function AIENS(uint _key) external view returns (aien memory);\\n\\n    function PFS(uint _key) external view returns (pf memory);\\n\\n    function getAien(uint _id) external view;\\n\\n    function getPF(uint _id) external view;\\n\\n    function getPfGrade(uint _id) external view returns (uint);\\n\\n    function setAien(uint _id) external;\\n\\n    function usePFimg(uint _aienId, uint _pfId) external;\\n\\n    function setAienAll(\\n        uint _id,\\n        uint _mixCount,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _totalProb,\\n        uint _isPFid,\\n        uint _addProb\\n    ) external;\\n\\n    function getContractAddr(\\n        string memory _name\\n    ) external view returns (address);\\n\\n    function burnValue(uint _burnAmount) external;\\n\\n    function setAienGradeInfo(uint _toGrade) external;\\n\\n    function subPfGrades(uint _pfId) external;\\n\\n    function setLevelUpStatus(uint _toGrade) external;\\n\\n    function _failedAienSet(\\n        uint _id,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _successAienSet(\\n        uint _id,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _mergeCalcul(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _mergeCalcul2(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _influencerMerge(\\n        address _to,\\n        uint _itemId,\\n        uint _referralIncome\\n    ) external returns (uint, string memory);\\n\\n    function _levelUpCalcul(\\n        uint _itemId,\\n        uint _fee\\n    ) external returns (address, address, uint, uint);\\n\\n    function _levelUpSucess(uint _id, uint _p2Level) external;\\n\\n    function _levelUpFailed(uint _id, uint _addProb) external;\\n\\n    function _mergeCount(\\n        address _agency,\\n        uint _agencyFee,\\n        address _influencer,\\n        uint _influencerFee\\n    ) external;\\n\\n    function usePFPower(uint _id, uint _usePower) external;\\n\\n    function addProbFee() external view returns (uint);\\n\\n    function PfGrades() external view returns (pfGrade memory);\\n\\n    function getAienGradeInfo() external view returns (uint[] memory);\\n\\n    function basicMergeAmount() external view returns (uint);\\n\\n    function influencerMergeAmount() external view returns (uint);\\n\\n    function _getMedataMargin() external view returns (uint, uint, uint);\\n\\n    function getAienLevel(uint _aienId) external view returns (uint);\\n\\n    function setPerprojectWallet(address _addr) external;\\n\\n    function setAgencyAddr(address _influencer, address _agency) external;\\n\\n    function setAgencyIncomePercent(uint _agencyIncomePercent) external;\\n\\n    function adminSetMergeAmount(\\n        uint _influencerMergeAmount,\\n        uint _basicMergeAmount,\\n        uint _agencyIncomePercent,\\n        uint _ownerIncomePercent\\n    ) external;\\n\\n    function getUserFromItem(uint _itemId) external view returns (User memory);\\n\\n    function adminSetMetaData(\\n        uint _pfId,\\n        uint8 _grade,\\n        string memory _seedHash\\n    ) external;\\n\\n    function _itemMergeFromDiamond(\\n        address _to,\\n        uint _pfId,\\n        string memory _seedHash,\\n        uint8 _grade\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbf4ffb9733d65fe3597c56dd6ff80ec21176dd3f0e43104f9ddf97e897d281cd\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IP1 {\\n    struct PendingInfo {\\n        address user;\\n        // 1: \\ucd9c\\uae08\\uc694\\uccad,\\n        // 2: \\ucd9c\\uae08\\ucde8\\uc18c,\\n        // 3: \\uc644\\ub8cc,\\n        // 4: \\ucde8\\uc18c\\uc644\\ub8cc: \\uc644\\ub8cc\\uc2dc \\uc7ac\\uc608\\uce58 \\ubc84\\ud2bc \\ud65c\\uc131\\ud654\\n        uint8 pendingType;\\n        uint startTime;\\n        uint endTime;\\n        uint amount;\\n        // pending Id\\n        uint pendingId;\\n    }\\n\\n    function update() external returns (uint);\\n\\n    function diamond_P1_deposit(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint);\\n\\n    function diamond_P1_reDposit(address _sender) external returns (uint);\\n\\n    function diamond_P1_harvest(address _sender) external returns (uint);\\n\\n    function diamond_P1_pendingReward(\\n        address _sender,\\n        uint _withdrawBlock\\n    ) external view returns (uint);\\n\\n    function diamond_P1_addPower(\\n        address _sender,\\n        uint _aienId,\\n        uint _usePower\\n    ) external returns (uint);\\n\\n    function diamond_P1_widthdraw(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawCancel(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_widthdrawCancelConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_getPoolData() external view returns (uint, uint, uint);\\n\\n    function diamond_P1_getUserData(\\n        address _sender\\n    ) external view returns (uint, uint, uint, uint, uint);\\n\\n    function diamond_P1_getUnstakeData(\\n        address _sender\\n    ) external view returns (PendingInfo[] memory);\\n\\n    function diamond_P1_addDistributionAmountAll(uint _amount) external;\\n\\n    function unStakeTimeLock() external view returns (uint16);\\n\\n    function unStakeCancelTimeLock() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x07efaa8c8bc5cf474a039cab55457d26d607d1eb1a5b133c27962cba3bba2b39\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IP2 {\\n    struct User {\\n        bool isBlockUser;\\n        uint perRewarded;\\n        uint usdtRewarded;\\n        EnumerableSet.UintSet tokenIds;\\n    }\\n\\n    struct Aien {\\n        address staker;\\n        uint level;\\n        // requires value\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        uint rewardUsdtDebt;\\n        uint rewardPerDebt;\\n        ////////////////////\\n        uint per_received;\\n        uint usdt_received;\\n    }\\n\\n    struct Balances {\\n        // \\ub85c\\uc9c1\\uc0c1 \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\ud55c \\ubc38\\ub7f0\\uc2a4 \\ubcc0\\uc218 (\\uc2e4\\uc81c\\uc640 \\ub2e4\\ub97c \\uc218 \\uc788\\uc74c)\\n        uint perBalance;\\n        uint usdtBalance;\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508 \\ub418\\uc9c0 \\uc54a\\uc740 \\uc0c1\\ud0dc\\uc5d0\\uc11c\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508\\ub418\\uba74 \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\uc800\\uc7a5\\ub41c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ubcc0\\uc218\\n        uint savedPerBalance;\\n        uint savedUsdtBalance;\\n        // \\ud604\\uc7ac savedUsdt, savedPer\\ub97c \\ud1b5\\ud574 \\ub098\\uc628 \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\n        uint add_dailyUSDT;\\n        uint add_dailyPER;\\n        // \\ubcf4\\uc548\\uc0c1 \\ubb38\\uc81c\\uac00 \\uc0dd\\uaca8\\n        // \\uc608\\uc0c1\\ubcf4\\ub2e4 \\ub9ce\\uc740 withdraw\\ub97c \\uc694\\uccad\\ud558\\uac8c \\ub418\\ub294 \\uacbd\\uc6b0\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ud1a0\\ud0c8 \\ubc38\\ub7f0\\uc2a4\\uc640\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ucd9c\\uae08 \\ubc38\\ub7f0\\uc2a4\\ub97c \\ube44\\uad50\\ud558\\uc5ec\\n        // \\ucd9c\\uae08 \\uac00\\ub2a5\\ud55c\\uc9c0 \\uccb4\\ud06c\\ud558\\ub294 \\ubcc0\\uc218\\n        uint total_checkWithdrawPER;\\n        uint withdrawal_checkWithdrawPER;\\n        uint total_checkWithdrawUSDT;\\n        uint withdrawal_checkWithdrawUSDT;\\n    }\\n\\n    struct Layer {\\n        Balances balances;\\n        // P2\\uc5d0\\uc11c \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\ud1a0\\ud070 \\ubc30\\uc815 \\ubc1b\\uc744\\ub54c \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint rewardUsdtPercent;\\n        uint rewardPerPercent;\\n        // \\uc720\\uc800\\uc5d0\\uac8c \\ud558\\ub8e8\\uc5d0 \\ubd84\\ubc30\\ud558\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint dailyReward_Percent;\\n        // \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        // \\ubbf8\\uc624\\ud508\\uc2dc \\uc800\\uc7a5\\ud55c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ud37c\\uc13c\\ud2b8\\ubcc0\\uc218\\n        uint add_dailyReward_Percent;\\n        uint lastRewardBlock;\\n        uint dailyRewardUpdateBlock;\\n        uint totalStakedAien;\\n        bool isOpen;\\n    }\\n\\n    struct AienLoadData {\\n        //aien\\uc815\\ubcf4\\n        uint _aienId;\\n        uint _aienLevel;\\n        // \\ucd9c\\uae08 \\ud1a0\\ud0c8\\n        uint _aien_per_received;\\n        uint _aien_usdt_received;\\n        //\\ucd9c\\uae08 \\uac00\\ub2a5\\n        uint usdt_withdrawable;\\n        uint per_withdrawable;\\n        // block\\ub2f9 \\ub9ac\\uc6cc\\ub4dc\\n        uint block_reward_per;\\n        uint block_reward_usdt;\\n    }\\n\\n    struct LayerLoadData {\\n        bool isOpen;\\n        uint _layerNumber;\\n        uint _24h_reward_per;\\n        uint _24h_reward_usdt;\\n        uint totalStakedAien;\\n    }\\n    struct UserLoadData {\\n        uint _usdtRewarded;\\n        uint _perRewarded;\\n        bool _isBlockUser;\\n    }\\n\\n    function aiens(uint _id) external view returns (Aien memory);\\n\\n    function diamond_P2_deposit(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_withdraw(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_harvest(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_getUserInfo(\\n        address _sender\\n    )\\n        external\\n        view\\n        returns (\\n            UserLoadData memory,\\n            AienLoadData[] memory,\\n            LayerLoadData[] memory\\n        );\\n\\n    function diamond_P2_getLayerData(\\n        uint _number\\n    ) external view returns (uint, uint, uint);\\n\\n    function addPerUsdtDistribution(uint _usdt, uint _per) external;\\n\\n    function P2_usdtBalance() external view returns (uint);\\n\\n    function P2_perBalance() external view returns (uint);\\n\\n    function MAX_STAKING_LIMIT() external view returns (uint);\\n\\n    function layers(uint _number) external view returns (Layer memory);\\n\\n    function pendingReward(\\n        uint _aienId,\\n        uint _layerNumber,\\n        uint _withdrawBlock\\n    ) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0x2e90a8470442fec4da79c46739fcf8b958fe1503f519a5f7b2fa048697e2396d\",\"license\":\"MIT\"},\"contracts/Channel_iN/libraries/LibP0.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {User, P0_MergeState, P0_MergePfGrade, AppStorage, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IDB} from \\\"../interfaces/IDB.sol\\\";\\nimport {IERC721} from \\\"../../shared/interfaces/IERC721.sol\\\";\\nimport {IERC1155} from \\\"../../shared/interfaces/IERC1155.sol\\\";\\nimport {IERC20} from \\\"../../shared/interfaces/IERC20.sol\\\";\\nimport {LibDistribute} from \\\"../../shared/libraries/LibDistribute.sol\\\";\\n\\nlibrary LibP0 {\\n    event P0_BaseMix_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed itemId,\\n        uint itemAmount,\\n        bool isLevelUp,\\n        uint payment\\n    );\\n\\n    event P0_PremiumMix_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed itemId,\\n        uint itemAmount,\\n        bool isLevelUp,\\n        uint payment,\\n        uint usePower\\n    );\\n\\n    event P0_ItemMerge_Event(\\n        address indexed to,\\n        uint indexed perfId,\\n        uint indexed itemId,\\n        uint itemAmount,\\n        uint payment,\\n        uint perfGrade,\\n        bytes perfURI\\n    );\\n\\n    event P0_AddProb_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed payment,\\n        uint addProb,\\n        uint[] perfs\\n    );\\n\\n    // uint payment\\n    function _baseMixCall(\\n        address _sender,\\n        uint _id,\\n        uint _useItemId\\n    ) internal returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        require(\\n            IERC721(s.contracts[\\\"aien\\\"]).ownerOf(_id) == _sender,\\n            \\\"not owner\\\"\\n        );\\n        IDB.aien memory _AIEN = IDB(s.contracts[\\\"db\\\"]).AIENS(_id);\\n\\n        require(s.p0_gradeInfos[_AIEN.p2Level].isOpen == true, \\\"not open\\\");\\n\\n        (\\n            address _influencer,\\n            address _agency,\\n            uint _influencerFee,\\n            uint _agencyFee\\n        ) = IDB(s.contracts[\\\"db\\\"])._levelUpCalcul(\\n                _useItemId,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n            );\\n\\n        IERC1155(s.contracts[\\\"item\\\"]).burn(_sender, _useItemId, 1);\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee,\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        if (_AIEN.p2Level == 0) {\\n            IDB(s.contracts[\\\"db\\\"])._levelUpSucess(_id, _AIEN.p2Level);\\n            emit P0_BaseMix_Event(\\n                _sender,\\n                _id,\\n                _useItemId,\\n                1,\\n                true,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n            );\\n            // emit MixCall(_id, 0, true, s.p0_gradeInfos[_AIEN.p2Level].mixFee);\\n\\n            return true;\\n        }\\n\\n        uint _random = __random(_sender);\\n\\n        // \\uc131\\uacf5\\uc2dc\\n        if (_random <= _AIEN.baseProb) {\\n            // \\uc131\\uacf5\\ub960 \\ucd08\\uae30\\ud654\\n            // \\ub808\\ubca8 \\uc0c1\\uc2b9\\n            IDB(s.contracts[\\\"db\\\"])._levelUpSucess(_id, _AIEN.p2Level);\\n        } else {\\n            // base\\uc131\\uacf5\\ub960\\uc5d0 \\ub79c\\ub364 \\uc131\\uacf5\\ub960 \\ucd94\\uac00\\n\\n            uint _randomAdd = __randomAddProb(\\n                _sender,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMax,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMin\\n            );\\n            // \\uacbd\\ud5d8\\uce58 \\uc0c1\\uc2b9\\n            // _AIEN[_id].baseProb += _randomAdd;\\n\\n            IDB(s.contracts[\\\"db\\\"])._levelUpFailed(_id, _randomAdd);\\n        }\\n\\n        // emit MixCall(\\n        //     _id,\\n        //     0,\\n        //     _random <= _AIEN.baseProb,\\n        //     s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        // );\\n        emit P0_BaseMix_Event(\\n            _sender,\\n            _id,\\n            _useItemId,\\n            1,\\n            _random <= _AIEN.baseProb,\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n        return true;\\n    }\\n\\n    function _premiumMixCall(\\n        address _sender,\\n        uint _aienId,\\n        uint _useItemId\\n    ) internal returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        IDB.aien memory _AIEN = IDB(s.contracts[\\\"db\\\"]).AIENS(_aienId);\\n\\n        require(_AIEN.p2Level != 0, \\\"not premium level\\\");\\n        require(s.p0_gradeInfos[_AIEN.p2Level].isOpen == true, \\\"not open\\\");\\n\\n        (\\n            address _influencer,\\n            address _agency,\\n            uint _influencerFee,\\n            uint _agencyFee\\n        ) = IDB(s.contracts[\\\"db\\\"])._levelUpCalcul(\\n                _useItemId,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n            );\\n\\n        IERC1155(s.contracts[\\\"item\\\"]).burn(_sender, _useItemId, 1);\\n\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee,\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        uint _random = __random(_sender);\\n        uint totalProb = 0;\\n        if (_AIEN.baseProb + _AIEN.addProb >= s.p0_states.maxProb) {\\n            // if (_AIEN.baseProb + _AIEN.addProb > _random) {\\n            totalProb = _AIEN.baseProb + _AIEN.addProb - s.p0_states.maxProb;\\n        }\\n\\n        if (_AIEN.baseProb + _AIEN.addProb >= _random) {\\n            emit P0_PremiumMix_Event(\\n                _sender,\\n                _aienId,\\n                _useItemId,\\n                1,\\n                true,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee,\\n                totalProb == 0 ? _AIEN.addProb : _AIEN.addProb - totalProb\\n            );\\n            // \\uc131\\uacf5\\ub960 \\ucd08\\uae30\\ud654\\n            // \\ub808\\ubca8 \\uc0c1\\uc2b9\\n            IDB(s.contracts[\\\"db\\\"])._successAienSet(\\n                _aienId,\\n                _AIEN.p2Level + 1,\\n                _AIEN.totalExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                _AIEN.influExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                s.p0_gradeInfos[_AIEN.p2Level].initBaseProb,\\n                totalProb\\n            );\\n        } else {\\n            emit P0_PremiumMix_Event(\\n                _sender,\\n                _aienId,\\n                _useItemId,\\n                1,\\n                false,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee,\\n                totalProb == 0 ? _AIEN.addProb : _AIEN.addProb - totalProb\\n            );\\n\\n            uint _randomAdd = __randomAddProb(\\n                _sender,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMax,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMin\\n            );\\n\\n            IDB(s.contracts[\\\"db\\\"])._failedAienSet(\\n                _aienId,\\n                _AIEN.totalExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                _AIEN.influExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                _AIEN.baseProb + _randomAdd,\\n                totalProb\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    function _itemMerge(\\n        address _sender,\\n        uint _itemId,\\n        uint _itemAmount\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint mergeFee;\\n        address _influencer;\\n        uint _influencerFee;\\n        address _agency;\\n        uint _agencyFee;\\n        uint _influencerItemAmount;\\n\\n        if (_itemId <= 50) {\\n            (\\n                mergeFee,\\n                _influencer,\\n                _influencerFee,\\n                _agency,\\n                _agencyFee,\\n                _influencerItemAmount\\n            ) = IDB(s.contracts[\\\"db\\\"])._mergeCalcul(_itemId);\\n        } else {\\n            (\\n                mergeFee,\\n                _influencer,\\n                _influencerFee,\\n                _agency,\\n                _agencyFee,\\n                _influencerItemAmount\\n            ) = IDB(s.contracts[\\\"db\\\"])._mergeCalcul2(_itemId);\\n        }\\n\\n        require(_itemAmount == _influencerItemAmount);\\n\\n        // merge \\ud560\\ub54c \\uce74\\uc6b4\\ud2b8 \\uc801\\uc6a9 \\ud568\\uc218\\n        IDB(s.contracts[\\\"db\\\"])._mergeCount(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee\\n        );\\n        //\\n        IERC1155(s.contracts[\\\"item\\\"]).burn(_sender, _itemId, _itemAmount);\\n\\n        // IERC20(PER).transferFrom(msg.sender, address(this), mergeFee);\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            mergeFee\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee,\\n            mergeFee\\n        );\\n\\n        (uint mintPfId, string memory _pfURI) = IDB(s.contracts[\\\"db\\\"])\\n            ._influencerMerge(_sender, _itemId, 0);\\n\\n        emit P0_ItemMerge_Event(\\n            _sender,\\n            mintPfId,\\n            _itemId,\\n            _itemAmount,\\n            mergeFee,\\n            1,\\n            bytes(_pfURI)\\n        );\\n    }\\n\\n    function _itemGradeMerge(\\n        address _sender,\\n        uint _itemId,\\n        uint _itemAmount,\\n        uint8 _grade\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        P0_MergePfGrade storage _mergePfGrade = s.p0_mergePfGrades[_grade];\\n        string memory _seedHash = s.pfMetaURI[_mergePfGrade.latestId];\\n        require(_mergePfGrade.isOpen, \\\"PF Grade Merge function not open\\\");\\n\\n        (\\n            uint _mergeFee,\\n            address _influencer,\\n            uint _influencerFee,\\n            address _agency,\\n            uint _agencyFee,\\n            uint _influencerItemAmount\\n        ) = _mergeCalculate(_itemId, _grade);\\n\\n        IDB(s.contracts[\\\"db\\\"])._mergeCount(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee\\n        );\\n        // require(\\n        //     _mergeFee < IERC20(s.contracts[\\\"per\\\"]).balanceOf(_sender),\\n        //     \\\"not enough per\\\"\\n        // );\\n        // require(_itemAmount == _influencerItemAmount, \\\"not equal item amount\\\");\\n        IERC1155(s.contracts[\\\"item\\\"]).burn(\\n            _sender,\\n            _itemId,\\n            _influencerItemAmount\\n        );\\n\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            _mergeFee\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee,\\n            _mergeFee\\n        );\\n\\n        IDB(s.contracts[\\\"db\\\"])._itemMergeFromDiamond(\\n            _sender,\\n            _mergePfGrade.latestId,\\n            _seedHash,\\n            _grade\\n        );\\n\\n        emit P0_ItemMerge_Event(\\n            _sender,\\n            _mergePfGrade.latestId,\\n            _itemId,\\n            _influencerItemAmount,\\n            _mergeFee,\\n            _grade,\\n            bytes(_seedHash)\\n        );\\n\\n        _mergePfGrade.latestId += 1;\\n    }\\n\\n    function _addProbCall(\\n        address _sender,\\n        uint _aienId,\\n        uint[] memory _pf_Ids\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IERC721(s.contracts[\\\"aien\\\"]).ownerOf(_aienId) == _sender,\\n            \\\"not owner\\\"\\n        );\\n\\n        require(__checkDuplicates(_pf_Ids) == false, \\\"duplicate pf id\\\");\\n        require(\\n            __checkERC721sOwner(_sender, _pf_Ids) == true,\\n            \\\"not owner of perfriends\\\"\\n        );\\n        uint _gradeProb = __checkERC721sGrade(_pf_Ids);\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            s.p0_states.addProbFee * _pf_Ids.length\\n        );\\n\\n        for (uint i = 0; i < _pf_Ids.length; i++) {\\n            IERC721(s.contracts[\\\"perfriends\\\"]).burn(_pf_Ids[i]);\\n            IDB(s.contracts[\\\"db\\\"]).subPfGrades(_pf_Ids[i]);\\n        }\\n\\n        IDB.aien memory _AIEN = IDB(s.contracts[\\\"db\\\"]).AIENS(_aienId);\\n        IDB(s.contracts[\\\"db\\\"]).setAienAll(\\n            _aienId,\\n            _AIEN.mixCount,\\n            _AIEN.p2Level,\\n            _AIEN.totalExp + (s.p0_states.addProbExp * _pf_Ids.length),\\n            _AIEN.influExp,\\n            _AIEN.baseProb,\\n            0,\\n            _AIEN.isPFid,\\n            _AIEN.addProb + _gradeProb\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            s.contracts[\\\"team\\\"],\\n            (s.p0_states.addProbFee * _pf_Ids.length) / 10,\\n            s.contracts[\\\"team\\\"],\\n            0,\\n            s.p0_states.addProbFee * _pf_Ids.length\\n        );\\n\\n        emit P0_AddProb_Event(\\n            _sender,\\n            _aienId,\\n            s.p0_states.addProbFee,\\n            _gradeProb,\\n            _pf_Ids\\n        );\\n    }\\n\\n    // internal functions\\n    function __random(address _sender) internal view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        // if (s.orakl  ? oraklVRF() : nativeRF())\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(block.timestamp, _sender, block.coinbase)\\n        );\\n        return (uint(hash) % (s.p0_states.maxProb - 0 + 1)) + 0;\\n    }\\n\\n    function __randomAddProb(\\n        address _sender,\\n        uint _max,\\n        uint _min\\n    ) internal view returns (uint) {\\n        // if (s.orakl  ? oraklVRF() : nativeRF())\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(block.timestamp, _sender, block.coinbase)\\n        );\\n        return (uint(hash) % (_max - _min + 1)) + _min;\\n    }\\n\\n    function __checkDuplicates(\\n        uint[] memory array\\n    ) internal pure returns (bool) {\\n        for (uint i = 0; i < array.length - 1; i++) {\\n            for (uint j = i + 1; j < array.length; j++) {\\n                if (array[i] == array[j]) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // \\ub2e4\\uc911 ERC721 owner\\ud655\\uc778\\n    function __checkERC721sOwner(\\n        address _owner,\\n        uint[] memory _ids\\n    ) internal view returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        for (uint i = 0; i < _ids.length; i++) {\\n            if (IERC721(s.contracts[\\\"perfriends\\\"]).ownerOf(_ids[i]) != _owner)\\n                return false;\\n        }\\n        return true;\\n    }\\n\\n    // \\ub2e4\\uc911 ERC721\\uc758 \\ub4f1\\uae09\\ubcc4 mixPFInfos \\ud569\\uc744 \\uad6c\\ud55c\\ub2e4.\\n    function __checkERC721sGrade(\\n        uint[] memory _ids\\n    ) internal view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint _gradeProb = 0;\\n        for (uint i = 0; i < _ids.length; i++) {\\n            _gradeProb += s\\n                .p0_perFriendsProbs[IDB(s.contracts[\\\"db\\\"]).PFS(_ids[i]).class]\\n                .gradeProb;\\n        }\\n        return _gradeProb;\\n    }\\n\\n    function _getAddProbFee() internal view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"p0\\\"]).addProbFee();\\n    }\\n\\n    function _getMergeState(uint _itemId) internal view returns (uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        (uint PerPrice, , , , , uint ItemAmount) = IDB(s.contracts[\\\"db\\\"])\\n            ._mergeCalcul(_itemId);\\n        return (PerPrice, ItemAmount);\\n    }\\n\\n    function _mergeCalculate(\\n        uint _itemId,\\n        uint8 _grade\\n    ) internal view returns (uint, address, uint, address, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        P0_MergeState memory _mergeState = s.p0_mergeState;\\n        IDB.User memory _user = IDB(s.contracts[\\\"db\\\"]).getUserFromItem(_itemId);\\n        P0_MergePfGrade storage _mergePfGrade = s.p0_mergePfGrades[_grade];\\n\\n        address agency;\\n        address influencer;\\n        uint _influeIncome = (_mergePfGrade.mergeFee *\\n            _mergeState.influencerIncomePercent) / 1e5;\\n        uint _agencyIncome = (_mergePfGrade.mergeFee *\\n            _mergeState.agencyIncomePercent) / 1e5;\\n\\n        _user.agency == address(0)\\n            ? agency = s.contracts[\\\"team\\\"]\\n            : agency = _user.agency;\\n        influencer = _user.incomeAddr == address(0)\\n            ? s.contracts[\\\"team\\\"]\\n            : _user.incomeAddr;\\n\\n        return (\\n            _mergePfGrade.mergeFee,\\n            influencer,\\n            _influeIncome,\\n            agency,\\n            _agencyIncome,\\n            _mergePfGrade.mergeUseItemAmount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4c239eef2dbfb492b1cecc88320f59a8b33e035dd4ffdeb0fea16f075a80acf7\",\"license\":\"UNLICENSED\"},\"contracts/Channel_iN/libraries/LibP2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {LibAppStorage, AppStorage, P2_Layer,P2_Aien,P2_User} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {IERC721} from \\\"../../shared/interfaces/IERC721.sol\\\";\\nimport {IERC20} from \\\"../../shared/interfaces/IERC20.sol\\\";\\nimport {IDB} from \\\"../interfaces/IDB.sol\\\";\\n\\n// libs\\nimport \\\"../../shared/libraries/LibEnumerableSet.sol\\\";\\n\\nlibrary LibP2 {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct AienLoadData {\\n\\t\\t//aien\\uc815\\ubcf4\\n\\t\\tuint _aienId;\\n\\t\\tuint _aienLevel;\\n\\t\\t// \\ucd9c\\uae08 \\ud1a0\\ud0c8\\n\\t\\tuint _aien_base_received;\\n\\t\\tuint _aien_plus_received;\\n\\t\\t//\\ucd9c\\uae08 \\uac00\\ub2a5\\n\\t\\tuint base_withdrawable;\\n\\t\\tuint plus_withdrawable;\\n\\t\\t// block\\ub2f9 \\ub9ac\\uc6cc\\ub4dc\\n\\t\\tuint block_reward_base;\\n\\t\\tuint block_reward_plus;\\n\\t}\\n\\n\\tstruct LayerLoadData {\\n\\t\\tbool isOpen;\\n\\t\\tuint _layerNumber;\\n\\t\\tuint _24h_reward_base;\\n\\t\\tuint _24h_reward_plus;\\n\\t\\tuint totalStakedAien;\\n\\t}\\n\\tstruct UserLoadData {\\n\\t\\tuint _baseRewarded;\\n\\t\\tuint _plusRewarded;\\n\\t\\tbool _isBlockUser;\\n\\t}\\n\\n    modifier isOpenLayer(uint _layer) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(s.p2_layers[_layer].isOpen, \\\"P2: Layer is not open\\\");\\n        _;\\n    }\\n\\n    modifier isBlackUser(address _sender) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(!s.p2_users[_sender].isBlockUser, \\\"P2: BlackList User\\\");\\n        _;\\n    }\\n\\n    modifier isP2StopCheck() {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(s.isP2Stop, \\\"P2: P2 is stopped\\\");\\n        _;\\n    }\\n\\n    modifier isMaxStakingLimit(address _sender) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(s.p2_users[_sender].tokenIds.length() < s.P2_MAX_STAKING_LIMIT, \\\"P2: Max Staking Limit\\\");\\n        _;\\n    }\\n\\n\\n    function _P2_Layer_Reset(uint _layerNumber) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        \\n        s.p2_layers[_layerNumber].dailyRewardUpdateBlock = block.number;\\n        s.p2_layers[_layerNumber].lastRewardBlock = block.number;\\n\\n        s.p2_layers[_layerNumber].balances.savedBaseBalance += s.p2_layers[_layerNumber].balances.baseBalance;\\n        s.p2_layers[_layerNumber].balances.savedPlusBalance += s.p2_layers[_layerNumber].balances.plusBalance;\\n\\n        (uint dailyBASE, uint dailyPLUS) = __P2_Daily_Calculate(s.P2_baseBalance,s.P2_plusBalance, s.P2_dailyRewardPercent);\\n        (uint add_dailyBASE, uint add_dailyPLUS) = __P2_Daily_Calculate(\\n            s.p2_layers[_layerNumber].balances.savedBaseBalance, \\n            s.p2_layers[_layerNumber].balances.savedPlusBalance, \\n            s.p2_layers[_layerNumber].add_dailyReward_Percent\\n        );\\n        \\n        s.p2_layers[_layerNumber].balances.savedBaseBalance -= add_dailyBASE;\\n        s.p2_layers[_layerNumber].balances.savedPlusBalance -= add_dailyPLUS;\\n\\n        s.p2_layers[_layerNumber].balances.baseBalance = \\n        ((dailyBASE / s.REWARD_PERCENT_DECIMAL) * s.p2_layers[_layerNumber].rewardBasePercent) + \\n        add_dailyBASE;\\n\\n        s.p2_layers[_layerNumber].balances.plusBalance = \\n        ((dailyPLUS / s.REWARD_PERCENT_DECIMAL) * s.p2_layers[_layerNumber].rewardPlusPercent) +\\n        add_dailyPLUS;\\n\\n        __P2_Layer_Update(_layerNumber);\\n    }\\n\\n\\n    function _P2_Add_Base_Distribution(uint _base, uint _plus) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.P2_baseBalance += _base;\\n        s.P2_plusBalance += _plus;\\n\\n        __P2_Update();\\n    }\\n\\n    function _P2_Add_Plus_Distribution(uint _plus) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.P2_plusBalance += _plus;\\n\\n        __P2_Update();\\n    }\\n\\n    function __P2_Update() internal isP2StopCheck() returns (uint){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        if(s.P2_dailyRewardUpdateBlock == block.number) return block.number;\\n\\n        if(block.number > s.P2_dailyRewardUpdateBlock + s.DAY_TO_SEC ) {\\n\\n            uint distri_base = 0;\\n            uint distri_plus = 0;\\n\\n\\n            while(block.number > s.P2_dailyRewardUpdateBlock + s.DAY_TO_SEC){\\n                s.P2_dailyRewardUpdateBlock += s.DAY_TO_SEC;\\n                \\n                (uint dailyBASE, uint dailyPLUS) = __P2_Daily_Calculate(s.P2_baseBalance,s.P2_plusBalance, s.P2_dailyRewardPercent);\\n                \\n                for(uint8 i = 1; i < 11; i++){\\n\\n                    // \\ubbf8\\uc624\\ud508 \\ub808\\uc774\\uc5b4\\ub77c\\uba74, saved \\ub9ac\\uc6cc\\ub4dc\\ub9cc \\ucd94\\uac00\\n                    if(!s.p2_layers[i].isOpen){\\n                        s.p2_layers[i].balances.baseBalance = 0;\\n                        s.p2_layers[i].balances.plusBalance = 0;\\n                        s.p2_layers[i].balances.savedBaseBalance += ((dailyBASE / s.REWARD_PERCENT_DECIMAL) * \\n                        s.p2_layers[i].rewardBasePercent);\\n                        s.p2_layers[i].balances.savedPlusBalance += ((dailyPLUS / s.REWARD_PERCENT_DECIMAL) *\\n                        s.p2_layers[i].rewardPlusPercent);\\n\\n                        distri_base += ((dailyBASE / s.REWARD_PERCENT_DECIMAL) * \\n                        s.p2_layers[i].rewardBasePercent);\\n\\n                        distri_plus += ((dailyPLUS / s.REWARD_PERCENT_DECIMAL) *\\n                        s.p2_layers[i].rewardPlusPercent);\\n\\n                        continue;\\n                    }\\n\\n                (uint add_dailyBASE, uint add_dailyPLUS) = __P2_Daily_Calculate(\\n                        s.p2_layers[i].balances.savedBaseBalance,\\n                        s.p2_layers[i].balances.savedPlusBalance,\\n                        s.p2_layers[i].add_dailyReward_Percent\\n                );                \\n\\n                s.p2_layers[i].balances.baseBalance = \\n                ((dailyBASE / s.REWARD_PERCENT_DECIMAL) * s.p2_layers[i].rewardBasePercent) +\\n                add_dailyBASE;\\n\\n                s.p2_layers[i].balances.plusBalance = \\n                ((dailyPLUS / s.REWARD_PERCENT_DECIMAL) * s.p2_layers[i].rewardPlusPercent) +\\n                add_dailyPLUS;\\n\\n                s.p2_layers[i].balances.savedBaseBalance -= add_dailyBASE;\\n                s.p2_layers[i].balances.savedPlusBalance -= add_dailyPLUS;\\n\\n                distri_base += (dailyBASE / s.REWARD_PERCENT_DECIMAL) * s.p2_layers[i].rewardBasePercent;\\n                distri_plus += (dailyPLUS / s.REWARD_PERCENT_DECIMAL) * s.p2_layers[i].rewardPlusPercent;\\n                    \\n                }\\n            s.P2_baseBalance -= distri_base;\\n            s.P2_plusBalance -= distri_plus;\\n            }\\n        }\\n        return block.number;\\n    }\\n    // function __P2_Update() internal isP2StopCheck() returns (uint){\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n    //     if(s.P2_dailyRewardUpdateBlock == block.number) return block.number;\\n\\n    //     if(block.number > s.P2_dailyRewardUpdateBlock + s.DAY_TO_SEC ) {\\n\\n    //         uint distri_base = 0;\\n    //         uint distri_plus = 0;\\n\\n\\n    //         while(block.number > s.P2_dailyRewardUpdateBlock + s.DAY_TO_SEC){\\n    //             s.P2_dailyRewardUpdateBlock += s.DAY_TO_SEC;\\n    //             (uint dailyBASE, uint dailyPLUS) = __P2_Daily_Calculate(s.P2_baseBalance,s.P2_plusBalance, s.P2_dailyRewardPercent);\\n                \\n    //             for(uint8 i = 1; i < 11; i++){\\n    //                 (uint add_dailyBASE, uint add_dailyPLUS) = __P2_Daily_Calculate(\\n    //                     s.p2_layers[i].balances.savedBaseBalance,\\n    //                     s.p2_layers[i].balances.savedPlusBalance,\\n    //                     s.p2_layers[i].add_dailyReward_Percent\\n    //                 );\\n    //             distri_base += (dailyBASE / s.REWARD_PERCENT_DECIMAL) * s.p2_layers[i].rewardBasePercent;\\n    //             distri_plus += (dailyPLUS / s.REWARD_PERCENT_DECIMAL) * s.p2_layers[i].rewardPlusPercent;\\n\\n    //             if(!s.p2_layers[i].isOpen){\\n    //                 s.p2_layers[i].balances.baseBalance = 0;\\n    //                 s.p2_layers[i].balances.plusBalance = 0;\\n    //                 s.p2_layers[i].balances.savedBaseBalance += ((dailyBASE / s.REWARD_PERCENT_DECIMAL) * \\n    //                 s.p2_layers[i].rewardBasePercent);\\n    //                 s.p2_layers[i].balances.savedPlusBalance += ((dailyPLUS / s.REWARD_PERCENT_DECIMAL) *\\n    //                 s.p2_layers[i].rewardPlusPercent);\\n\\n    //             continue;\\n\\n    //             }\\n\\n    //             s.p2_layers[i].balances.savedBaseBalance -= add_dailyBASE;\\n    //             s.p2_layers[i].balances.savedPlusBalance -= add_dailyPLUS;\\n\\n    //             s.p2_layers[i].balances.baseBalance = \\n    //             ((dailyBASE / s.REWARD_PERCENT_DECIMAL) * s.p2_layers[i].rewardBasePercent) +\\n    //             add_dailyBASE;\\n\\n    //             s.p2_layers[i].balances.plusBalance = \\n    //             ((dailyPLUS / s.REWARD_PERCENT_DECIMAL) * s.p2_layers[i].rewardPlusPercent) +\\n    //             add_dailyPLUS;\\n\\n    //         }\\n    //         //\\ubd84\\ubc30 \\ub418\\uc5b4\\uc57c\\ud560 dailyReward \\ucc28\\uac10\\n    //         s.P2_baseBalance -= distri_base;\\n    //         s.P2_plusBalance -= distri_plus;\\n    //         }\\n    //     }\\n    //     return block.number;\\n    // }\\n\\n    function __P2_Layer_Update(uint _layerNumber) internal isOpenLayer(_layerNumber) returns (uint){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(s.p2_layers[_layerNumber].isOpen, \\\"P2: Layer is not open\\\");\\n        P2_Layer storage layer = s.p2_layers[_layerNumber];\\n        \\n        uint accRewardBase = 0;\\n        uint accRewardPlus = 0;\\n\\n        if(layer.lastRewardBlock == block.number) return block.number;\\n        if(layer.totalStakedAien == 0) return block.number;\\n\\n        if(block.number > layer.dailyRewardUpdateBlock + s.DAY_TO_SEC){\\n            while(block.number > layer.dailyRewardUpdateBlock + s.DAY_TO_SEC){\\n                layer.dailyRewardUpdateBlock += s.DAY_TO_SEC;\\n\\n                // acc = \\ub0a8\\uc740\\ube14\\ub85d\\uc758 \\ub9ac\\uc6cc\\ub4dc * \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8                \\n                accRewardBase = ((layer.dailyRewardUpdateBlock - layer.lastRewardBlock) *\\n                (layer.balances.baseBalance / s.DAY_TO_SEC) *\\n                ((layer.dailyReward_Percent * s.PRECISION_FACTOR)/s.REWARD_PERCENT_DECIMAL));\\n                \\n                layer.rewardBase += accRewardBase / layer.totalStakedAien;\\n                \\n\\n                // acc = \\ub0a8\\uc740\\ube14\\ub85d\\uc758 \\ub9ac\\uc6cc\\ub4dc * \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n                accRewardPlus = ((layer.dailyRewardUpdateBlock - layer.lastRewardBlock) *\\n                (layer.balances.plusBalance / s.DAY_TO_SEC) *\\n                ((layer.dailyReward_Percent * s.PRECISION_FACTOR)/s.REWARD_PERCENT_DECIMAL));\\n\\n                layer.rewardPlus += accRewardPlus / layer.totalStakedAien;\\n\\n                ///////////// \\n                layer.lastRewardBlock = layer.dailyRewardUpdateBlock;\\n            }\\n        }\\n\\n        accRewardBase = ((block.number - layer.lastRewardBlock) *\\n        (layer.balances.baseBalance / s.DAY_TO_SEC) *\\n        ((layer.dailyReward_Percent * s.PRECISION_FACTOR)/s.REWARD_PERCENT_DECIMAL));\\n        layer.rewardBase += accRewardBase / layer.totalStakedAien;\\n\\n\\n        accRewardPlus = ((block.number - layer.lastRewardBlock) *\\n        (layer.balances.plusBalance / s.DAY_TO_SEC) *\\n        ((layer.dailyReward_Percent * s.PRECISION_FACTOR)/s.REWARD_PERCENT_DECIMAL));\\n        layer.rewardPlus += accRewardPlus / layer.totalStakedAien;\\n        /////////////\\n        layer.lastRewardBlock = block.number;\\n\\n        return block.number;\\n    }\\n\\n    function __P2_Pending_Reward(uint _aienId, uint _layerNumber) internal view returns (uint, uint){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        P2_Layer memory layer = s.p2_layers[_layerNumber];\\n        P2_Aien memory aien = s.p2_aiens[_aienId];\\n        if(layer.totalStakedAien == 0) return (0,0);\\n\\n        uint _dailyRewardUpdateBlock = layer.dailyRewardUpdateBlock;\\n\\t\\tuint _lastRewardBlock = layer.lastRewardBlock;\\n\\t\\tuint _rewardBase = layer.rewardBase;\\n\\t\\tuint _rewardPlus = layer.rewardPlus;\\n\\t\\tuint _REWARD_BASE_SUPPLY = layer.balances.baseBalance;\\n\\t\\tuint _REWARD_PLUS_SUPPLY = layer.balances.plusBalance;\\n\\t\\tuint accRewardBase = 0;\\n\\t\\tuint accRewardPlus = 0;\\n\\t\\tuint _nowBlock = block.number;\\n\\n        if(_nowBlock > layer.dailyRewardUpdateBlock + s.DAY_TO_SEC){\\n            while(_nowBlock > _dailyRewardUpdateBlock + s.DAY_TO_SEC){\\n                \\n                _dailyRewardUpdateBlock += s.DAY_TO_SEC;\\n\\n                accRewardBase = ((_dailyRewardUpdateBlock - _lastRewardBlock) *\\n                (_REWARD_BASE_SUPPLY / s.DAY_TO_SEC) *\\n                ((layer.dailyReward_Percent * s.PRECISION_FACTOR)/s.REWARD_PERCENT_DECIMAL));\\n                \\n\\n                _rewardBase += accRewardBase / layer.totalStakedAien;\\n                _REWARD_BASE_SUPPLY = accRewardBase / s.PRECISION_FACTOR;\\n\\n                accRewardPlus = ((_dailyRewardUpdateBlock - _lastRewardBlock) *\\n                (_REWARD_PLUS_SUPPLY / s.DAY_TO_SEC) *\\n                ((layer.dailyReward_Percent * s.PRECISION_FACTOR)/s.REWARD_PERCENT_DECIMAL));\\n                \\n\\n                _rewardPlus += accRewardPlus / layer.totalStakedAien;\\n                _REWARD_PLUS_SUPPLY = accRewardPlus / s.PRECISION_FACTOR;\\n\\n                _lastRewardBlock = _dailyRewardUpdateBlock;\\n            }\\n        }\\n        // \\n        accRewardBase = ((_nowBlock - _lastRewardBlock) *\\n        (_REWARD_BASE_SUPPLY / s.DAY_TO_SEC) *\\n        ((layer.dailyReward_Percent * s.PRECISION_FACTOR) / s.REWARD_PERCENT_DECIMAL));\\n\\n        _rewardBase += accRewardBase / layer.totalStakedAien;\\n        // \\n        accRewardPlus = ((_nowBlock - _lastRewardBlock) *\\n        (_REWARD_PLUS_SUPPLY / s.DAY_TO_SEC) *\\n        ((layer.dailyReward_Percent * s.PRECISION_FACTOR) / s.REWARD_PERCENT_DECIMAL));\\n\\n        _rewardPlus += accRewardPlus / layer.totalStakedAien;  \\n        // \\n\\n        uint totalRewardBase = _rewardBase - aien.rewardBaseDebt;\\n        uint totalRewardPlus = _rewardPlus - aien.rewardPlusDebt;\\n\\n        return (totalRewardBase / s.PRECISION_FACTOR, totalRewardPlus / s.PRECISION_FACTOR);\\n    }\\n\\n    // \\n    // \\n    // \\n\\n    function __P2_Daily_Calculate(uint _baseBalance, uint _plusBalance, uint _dailyRewardPercent) internal pure returns(uint,uint) {\\n        uint dailyBASE = (_baseBalance * _dailyRewardPercent) / 1e5;\\n        uint dailyPLUS = (_plusBalance * _dailyRewardPercent) / 1e5;\\n\\n        return (dailyBASE, dailyPLUS);\\n    }\\n\\n\\n\\n    function __P2_Reward_Transfer(address _to, uint _base, uint _plus) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\t\\tIERC20(s.contracts[\\\"per\\\"]).transferFrom(s.contracts[\\\"p2balance\\\"], _to, _base);\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(s.contracts[\\\"p2balance\\\"], _to, _plus);\\n    }\\n\\n    function __P2_Aien_Transfer(address _staker, uint _aienId) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        IERC721(s.contracts[\\\"aien\\\"]).safeTransferFrom(s.contracts[\\\"p2balance\\\"], _staker, _aienId);\\n    }\\n\\n\\n    \\n\\n\\n    // admin Functions\\n    function __P2_Layer_Start(uint _layerNumber) internal {\\n        _P2_Layer_Reset(_layerNumber);\\n    }\\n\\n    // user call functions\\n    function diamond_P2_deposit(\\n\\t\\taddress _sender,\\n\\t\\tuint _aienId\\n\\t) internal isMaxStakingLimit(_sender) isBlackUser(_sender) isP2StopCheck {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint _layer = IDB(s.contracts[\\\"db\\\"]).getAienLevel(_aienId);\\n        P2_Layer storage layer = s.p2_layers[_layer];\\n\\n\\n        \\n        if(layer.totalStakedAien == 0){\\n            __P2_Layer_Start(_layer);\\n        }\\n\\n        __P2_Update();\\n        __P2_Layer_Update(_layer);\\n\\n        P2_User storage user = s.p2_users[_sender];\\n        P2_Aien storage aien = s.p2_aiens[_aienId];\\n\\n        user.tokenIds.add(_aienId);\\n\\n        aien.staker = _sender;\\n        aien.level = _layer;\\n\\n        layer.totalStakedAien += 1;\\n\\n        aien.rewardBaseDebt = layer.rewardBase;\\n        aien.rewardPlusDebt = layer.rewardPlus;\\n\\n        \\n    }\\n\\n        \\n    function diamond_P2_withdraw(\\n        address _sender,\\n\\t\\tuint _aienId) internal isBlackUser(_sender) isP2StopCheck returns(uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        P2_User storage user = s.p2_users[_sender];\\n        P2_Aien storage aien = s.p2_aiens[_aienId];\\n        P2_Layer storage layer = s.p2_layers[aien.level];\\n\\n        uint pendingBASE;\\n        uint pendingPLUS;\\n\\n        __P2_Update();\\n        __P2_Layer_Update(aien.level);\\n\\n        (pendingBASE, pendingPLUS) = __P2_Pending_Reward(_aienId, aien.level);\\n\\n\\n        __P2_Reward_Transfer(aien.staker, pendingBASE, pendingPLUS);\\n\\n        user.baseRewarded += pendingBASE;\\n        user.plusRewarded += pendingPLUS;\\n        \\n        aien.base_received += pendingBASE;\\n        aien.plus_received += pendingPLUS;\\n        \\n        user.tokenIds.remove(_aienId);\\n\\n        layer.totalStakedAien -= 1;\\n\\n        if(layer.totalStakedAien == 0){\\n        layer.dailyRewardUpdateBlock = 0;\\n        layer.lastRewardBlock = 0;\\n        layer.balances.add_dailyBASE = 0;\\n        layer.balances.add_dailyPLUS = 0;\\n\\n        layer.rewardBase = 0;\\n        layer.rewardPlus = 0;\\n        }\\n\\n        aien.rewardBase += pendingBASE;\\n        aien.rewardPlus += pendingPLUS;\\n        aien.rewardBaseDebt = layer.rewardBase;\\n        aien.rewardPlusDebt = layer.rewardPlus;\\n\\n        __P2_Aien_Transfer(aien.staker, _aienId);\\n\\n        aien.staker = address(0);\\n\\n        return block.number;\\n    }\\n\\n    function diamond_P2_harvest(address _sender, uint _aienId) isP2StopCheck internal returns (uint){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        P2_User storage user = s.p2_users[_sender];\\n        P2_Aien storage aien = s.p2_aiens[_aienId];\\n        P2_Layer storage layer = s.p2_layers[aien.level];\\n\\n        uint pendingBASE;\\n        uint pendingPLUS;\\n\\n        __P2_Update();\\n        __P2_Layer_Update(aien.level);\\n\\n        (pendingBASE, pendingPLUS) = __P2_Pending_Reward(_aienId, aien.level);\\n\\n        __P2_Reward_Transfer(_sender, pendingBASE, pendingPLUS);\\n\\n        user.baseRewarded += pendingBASE;\\n        user.plusRewarded += pendingPLUS;\\n        \\n        aien.rewardBaseDebt = layer.rewardBase;\\n        aien.rewardPlusDebt = layer.rewardPlus;\\n\\n        aien.rewardBase += pendingBASE;\\n        aien.rewardPlus += pendingPLUS;\\n\\n        aien.base_received += pendingBASE;\\n        aien.plus_received += pendingPLUS;\\n\\n        return block.number;\\n    }\\n\\n\\n\\n// view data\\n    function diamond_P2_getUserInfo(address _user) internal view returns (UserLoadData memory, AienLoadData[] memory, LayerLoadData[] memory){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        P2_User storage user = s.p2_users[_user];\\n        UserLoadData memory _UserLoadData = UserLoadData(\\n            user.baseRewarded,\\n            user.plusRewarded,\\n            user.isBlockUser\\n        );\\n\\n        AienLoadData[] memory _AienLoadData = new AienLoadData[](user.tokenIds.length());\\n\\t\\tLayerLoadData[] memory _LayerLoadData = new LayerLoadData[](11);\\n\\n        for (uint i = 0; i < user.tokenIds.length(); i++) {\\n            \\n            P2_Aien memory aien = s.p2_aiens[user.tokenIds.at(i)];\\n\\n\\t\\t\\t(uint _base, uint _plus) = __P2_Pending_Reward(user.tokenIds.at(i), aien.level);\\n\\n\\t\\t\\t_AienLoadData[i]._aienId = user.tokenIds.at(i);\\n\\t\\t\\t_AienLoadData[i]._aienLevel = aien.level;\\n\\t\\t\\t_AienLoadData[i]._aien_base_received = aien.base_received;\\n\\t\\t\\t_AienLoadData[i]._aien_plus_received = aien.plus_received;\\n\\t\\t\\t_AienLoadData[i].block_reward_base =\\n\\t\\t\\t\\t((s.p2_layers[aien.level].balances.baseBalance *\\n\\t\\t\\t\\t\\ts.p2_layers[aien.level].dailyReward_Percent) /\\n\\t\\t\\t\\t\\ts.REWARD_PERCENT_DECIMAL /\\n\\t\\t\\t\\t\\ts.p2_layers[aien.level].totalStakedAien) /\\n\\t\\t\\t\\ts.DAY_TO_SEC;\\n\\n\\t\\t\\t_AienLoadData[i].block_reward_plus =\\n\\t\\t\\t\\t((s.p2_layers[aien.level].balances.plusBalance *\\n\\t\\t\\t\\t\\ts.p2_layers[aien.level].dailyReward_Percent) /\\n\\t\\t\\t\\t\\ts.REWARD_PERCENT_DECIMAL /\\n\\t\\t\\t\\t\\ts.p2_layers[aien.level].totalStakedAien) /\\n\\t\\t\\t\\ts.DAY_TO_SEC;\\n\\t\\t\\t_AienLoadData[i].base_withdrawable = _base;\\n\\t\\t\\t_AienLoadData[i].plus_withdrawable = _plus;\\n\\t\\t}\\n\\n        for (uint i = 1; i < 11; i++) {\\n\\t\\t\\tP2_Layer memory layer = s.p2_layers[i];\\n\\n\\t\\t\\t(uint add_dailyBASE, uint add_dailyPLUS) = __P2_Daily_Calculate(\\n\\t\\t\\t\\tlayer.balances.savedBaseBalance,\\n\\t\\t\\t\\tlayer.balances.savedPlusBalance,\\n\\t\\t\\t\\tlayer.add_dailyReward_Percent\\n\\t\\t\\t);\\n\\t\\t\\tuint _totalStakedAien;\\n\\t\\t\\tlayer.totalStakedAien == 0 ? _totalStakedAien = 1 : _totalStakedAien = layer.totalStakedAien;\\n\\t\\t\\t_LayerLoadData[i]._layerNumber = i;\\n\\t\\t\\t_LayerLoadData[i].isOpen = layer.isOpen;\\n\\t\\t\\t_LayerLoadData[i]._24h_reward_base =\\n\\t\\t\\t\\t(((((s.P2_baseBalance * s.P2_dailyRewardPercent) / s.REWARD_PERCENT_DECIMAL) * layer.rewardBasePercent) /\\n\\t\\t\\t\\t\\ts.REWARD_PERCENT_DECIMAL) + add_dailyBASE) /\\n\\t\\t\\t\\t_totalStakedAien;\\n\\n\\t\\t\\t_LayerLoadData[i]._24h_reward_plus =\\n\\t\\t\\t\\t(((((s.P2_plusBalance * s.P2_dailyRewardPercent) / s.REWARD_PERCENT_DECIMAL) * layer.rewardPlusPercent) /\\n\\t\\t\\t\\t\\ts.REWARD_PERCENT_DECIMAL) + add_dailyPLUS) /\\n\\t\\t\\t\\t_totalStakedAien;\\n\\n\\t\\t\\t_LayerLoadData[i].totalStakedAien = layer.totalStakedAien;\\n\\t\\t}\\n\\n\\t\\treturn (_UserLoadData, _AienLoadData, _LayerLoadData);\\n    }\\n    \\n    function diamond_p2_beforeLayer(uint _layerNumber) internal view returns(uint){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        P2_Layer memory layer = s.p2_layers[_layerNumber];\\n\\n        (uint add_dailyBASE, uint add_dailyPLUS) = __P2_Daily_Calculate(\\n\\t\\t\\t\\tlayer.balances.savedBaseBalance,\\n\\t\\t\\t\\tlayer.balances.savedPlusBalance,\\n\\t\\t\\t\\tlayer.add_dailyReward_Percent\\n\\t\\t);\\n\\n        uint _base =  (((((s.P2_baseBalance * s.P2_dailyRewardPercent) / s.REWARD_PERCENT_DECIMAL) * 13000) /\\n        // uint _base =  (((((s.P2_baseBalance * s.P2_dailyRewardPercent) / s.REWARD_PERCENT_DECIMAL) * layer.rewardBasePercent) /\\n\\t\\t\\t\\t\\ts.REWARD_PERCENT_DECIMAL) + add_dailyBASE) /\\n\\t\\t\\t\\t1;\\n        uint _plus = (((((s.P2_plusBalance * s.P2_dailyRewardPercent) / s.REWARD_PERCENT_DECIMAL) * layer.rewardPlusPercent) /\\n\\t\\t\\t\\t\\ts.REWARD_PERCENT_DECIMAL) + add_dailyPLUS) /\\n\\t\\t\\t\\t1;\\n\\n        \\n\\n        return (_base+_plus);\\n        \\n\\n    }\\n\\n    function diamond_p2_getLayerData(uint _layerNumber) internal view returns(uint,uint,uint){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        P2_Layer memory layer = s.p2_layers[_layerNumber];\\n        \\n        uint base = (layer.balances.savedBaseBalance * layer.dailyReward_Percent) / \\n        s.REWARD_PERCENT_DECIMAL / \\n        (layer.totalStakedAien + 1);\\n\\n        uint plus = (layer.balances.savedPlusBalance * layer.dailyReward_Percent) /\\n        s.REWARD_PERCENT_DECIMAL /\\n        (layer.totalStakedAien + 1);\\n\\n        return (base / s.DAY_TO_SEC, plus / s.DAY_TO_SEC, layer.totalStakedAien);\\n    }\\n\\n\\n    function onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory data\\n\\t) internal pure returns (bytes4) {\\n\\t\\treturn bytes4(keccak256('onERC721Received(address,address,uint256,bytes)'));\\n\\t}\\n\\n    \\n\\n\\n}\\n\\n\",\"keccak256\":\"0x6294808d898d780a3c2586e9a64942ad7525dca6e0a03a50eb2bb2746496e1dd\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xdc916985bab8246380c2188436b2e25e333d34e9fdc7bf3b0245f5bcc716e5dc\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC1155 {\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address account, uint256 id, uint256 value) external;\\n\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcbee42741d36c65c96f34a6e3e32ced2d36d50cd51dc3da21954e48b8bb6cf6e\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n//import \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\n/* interface IERC721 is IERC165 { */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function burn(uint256 _tokenId) external;\\n\\n    function safeMintByMinter(address _to) external;\\n\\n    function nextTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3dfb334f4ed930d3eb3b781f7605fe1ab071b54c66540e99c4e37c437ff4a93a\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IKlaySwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// 0xc6a2ad8cc6e4a7e08fc37cc5954be07d499e7654 KSP\\n// 0x7A74B3be679E194E1D6A0C29A343ef8D2a5AC876 Util\\ninterface IKlaySwap {\\n    function estimateSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] memory path\\n    ) external view returns (uint amountOut);\\n\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint amountA,\\n        address tokenB,\\n        uint amountB,\\n        address[] memory path\\n    ) external;\\n}\\n\\n\\n\\n\\n\",\"keccak256\":\"0xdf4506259a183c376f7e8dec594a1ea6dd1e07c6cf048c0a0ea1b5014e666cba\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {EnumerableSet} from \\\"../../shared/libraries/LibEnumerableSet.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\n\\nusing EnumerableSet for EnumerableSet.UintSet;\\n// i-Tez Structs\\n//- P0 struct\\nstruct P0_State {\\n    uint24 maxProb;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\uac1c\\ub2f9 \\uc218\\uc218\\ub8cc\\n    uint addProbFee;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\ud68d\\ub4dd \\uacbd\\ud5d8\\uce58\\n    uint16 addProbExp;\\n    // bool\\n    bool isVRF;\\n}\\nstruct P0_PerFriendsProb {\\n    string pfGrade;\\n    uint24 gradeProb;\\n}\\n\\nstruct P0_GradeInfo {\\n    // \\ub2e4\\uc74c level\\uc774 \\uc5f4\\ub838\\ub294\\uc9c0 \\ud655\\uc778\\n    bool isOpen;\\n    // level\\ubcc4 mix fee\\n    uint mixFee;\\n    // \\ub808\\ubca8\\uc5c5 \\uc131\\uacf5\\uc2dc level\\ubcc4 \\ucd08\\uae30 base \\ud655\\ub960\\n    uint24 initBaseProb;\\n    // level\\ubcc4 \\ucd94\\uac00 \\ud655\\ub960 \\ubc38\\ub7f0\\uc2a4 \\uc870\\uc815\\uac12\\n    uint16 mixExp;\\n    // level\\ubcc4 \\ud569\\uc131 \\uc2e4\\ud328\\uc2dc \\ucd94\\uac00 \\ud655\\ub960 min,max\\n    uint24 failedAddProbMin;\\n    // 1000 = 0.1%, 10000 = 0.01%\\n    uint24 failedAddProbMax;\\n}\\n\\nstruct P0_MergePfGrade {\\n    uint8 grade;\\n    string gradeName;\\n    uint mergeFee;\\n    uint mergeUseItemAmount;\\n    uint latestId;\\n    uint setMatadataId;\\n    bool isOpen;\\n}\\nstruct P0_MergeState {\\n    uint agencyIncomePercent;\\n    uint influencerIncomePercent;\\n}\\n// //- Distribute struct\\nstruct Distribute_State {\\n    uint beforeP2Usdt;\\n    uint beforeP2Per;\\n    uint beforeTeamUsdt;\\n    // distribute ratios\\n    uint24 p1Ratio;\\n    uint24 p2BaseRatio;\\n    // uint24 p2PerRatio;\\n    uint24 p2PlusRatio;\\n    // uint24 p2UsdtRatio;\\n    uint24 burnRatio;\\n    uint24 teamFeeRatio;\\n    // uint24 teamUsdtRatio;\\n}\\n// DB > Filtered User Struct\\nstruct User {\\n    // DB > idx\\n    uint userId;\\n    // token itme ID\\n    uint itemId;\\n    address incomeAddr;\\n    uint feeBalance;\\n    bool isAble;\\n    uint mintCount;\\n    uint useLevelupCount;\\n    uint useMergeCount;\\n    //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n    uint referralIncome;\\n    address agency;\\n    uint agencyIncome;\\n}\\n\\n// struct P3_AienCollection {\\n//     address nftAddress;\\n//     string name;\\n//     string symbol;\\n//     uint highestPrice;\\n//     uint floorPrice;\\n//     uint totalTradeVolume;\\n//     uint totalTradeCount;\\n// }\\n\\n// struct P3_Aien {\\n//     uint tokenId;\\n//     uint lastTradePrice;\\n//     // maybe add tx history\\n// }\\n\\n// struct P3_AienOrder {\\n//     uint orderId;\\n//     address seller;\\n//     address buyer;\\n//     uint tokenId;\\n//     uint8 level;\\n//     uint32 baseProb;\\n//     uint32 addProb;\\n//     uint price;\\n//     uint tradeTime;\\n//     uint8 orderType;\\n// }\\n\\n// struct P3_PfCollection {\\n//     address nftAddress;\\n//     string name;\\n//     string symbol;\\n//     uint highestPrice;\\n//     uint floorPrice;\\n//     uint totalTradeVolume;\\n//     uint totalTradeCount;\\n// }\\n\\n// struct P3_PfOrder {\\n//     uint orderId;\\n//     address seller;\\n//     address buyer;\\n//     uint tokenId;\\n//     uint8 grade;\\n//     uint price;\\n//     uint tradeTime;\\n//     uint8 orderType;\\n// }\\n\\n//\\n//\\n//\\n//\\n// P2 start\\nstruct P2_State {\\n    // P2 global state\\n    bool isP2Stop;\\n    // \\n    uint P2_baseBalance;\\n    uint P2_plusBalance;\\n    // \\n    uint P2_dailyRewardPercent;\\n    // \\n    uint P2_dailyRewardUpdateBlock;\\n    uint P2_lastRewardBlock;\\n    // \\n    uint MAX_STAKING_LIMIT;\\n}\\n\\nstruct P2_User {\\n    // \\ube14\\ub799\\uc720\\uc800 \\ucc3e\\uc544\\uc57c\\ud568\\n    bool isBlockUser;\\n\\tuint plusRewarded;\\n\\tuint baseRewarded;\\n\\tEnumerableSet.UintSet tokenIds;\\n}\\n\\nstruct P2_Aien {\\n    address staker;\\n\\tuint level;\\n\\t// requires value\\n\\tuint rewardPlus;\\n\\tuint rewardBase;\\n\\tuint rewardBaseDebt;\\n\\tuint rewardPlusDebt;\\n\\t////////////////////\\n\\tuint plus_received;\\n\\tuint base_received;\\n}\\n\\nstruct P2_Balances {\\n// \\ub85c\\uc9c1\\uc0c1 \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\ud55c \\ubc38\\ub7f0\\uc2a4 \\ubcc0\\uc218 (\\uc2e4\\uc81c\\uc640 \\ub2e4\\ub97c \\uc218 \\uc788\\uc74c)\\n\\tuint baseBalance;\\n\\tuint plusBalance;\\n\\t// \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508 \\ub418\\uc9c0 \\uc54a\\uc740 \\uc0c1\\ud0dc\\uc5d0\\uc11c\\n\\t// \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508\\ub418\\uba74 \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\uc800\\uc7a5\\ub41c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ubcc0\\uc218\\n\\tuint savedBaseBalance;\\n\\tuint savedPlusBalance;\\n\\t// \\ud604\\uc7ac savedUsdt, savedPer\\ub97c \\ud1b5\\ud574 \\ub098\\uc628 \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\n\\tuint add_dailyBASE;\\n\\tuint add_dailyPLUS;\\n\\t// \\ubcf4\\uc548\\uc0c1 \\ubb38\\uc81c\\uac00 \\uc0dd\\uaca8\\n\\t// \\uc608\\uc0c1\\ubcf4\\ub2e4 \\ub9ce\\uc740 withdraw\\ub97c \\uc694\\uccad\\ud558\\uac8c \\ub418\\ub294 \\uacbd\\uc6b0\\n\\t// \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ud1a0\\ud0c8 \\ubc38\\ub7f0\\uc2a4\\uc640\\n\\t// \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ucd9c\\uae08 \\ubc38\\ub7f0\\uc2a4\\ub97c \\ube44\\uad50\\ud558\\uc5ec\\n\\t// \\ucd9c\\uae08 \\uac00\\ub2a5\\ud55c\\uc9c0 \\uccb4\\ud06c\\ud558\\ub294 \\ubcc0\\uc218\\n\\tuint a;\\n\\tuint b;\\n\\tuint c;\\n\\tuint d;\\n}\\n// 0,\\n// 0,\\n// 80833997355037257560000,\\n// 74403075216168882064000,\\n// 0,0,\\n// 0,0,0,0,\\n\\n// 1000,\\n// 2000,\\n// 100000,\\n// 1000,\\n// 0,\\n// 0,\\n// 0,\\n// 0,\\n// 0,\\n// false\\n\\nstruct P2_Layer {\\n    P2_Balances balances;\\n\\t// P2\\uc5d0\\uc11c \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\ud1a0\\ud070 \\ubc30\\uc815 \\ubc1b\\uc744\\ub54c \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n    // 1~5 // \\uad6c oUSDT\\n\\tuint rewardBasePercent;\\n    // 6~10 // \\uad6c PER\\n\\tuint rewardPlusPercent;\\n    // \\n\\t// \\uc720\\uc800\\uc5d0\\uac8c \\ud558\\ub8e8\\uc5d0 \\ubd84\\ubc30\\ud558\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n\\tuint dailyReward_Percent;\\n    // \\ubbf8\\uc624\\ud508\\uc2dc \\uc800\\uc7a5\\ud55c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ud37c\\uc13c\\ud2b8\\ubcc0\\uc218\\n\\tuint add_dailyReward_Percent;\\n    // \\n\\t// \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\n\\tuint rewardPlus;\\n\\tuint rewardBase;\\n\\t// \\n    uint lastRewardBlock;\\n\\tuint dailyRewardUpdateBlock;\\n\\tuint totalStakedAien;\\n\\tbool isOpen;\\n}\\n\\n\\n// P0 End\\nstruct AppStorage {\\n    // address constants\\n    mapping(string => address) contracts;\\n    // i-Tez/////////////////////////////\\n    // P0 ///////////////////////////////\\n    P0_State p0_states;\\n    P0_GradeInfo[11] p0_gradeInfos;\\n    mapping(uint => P0_PerFriendsProb) p0_perFriendsProbs;\\n    /////////////////////////////////////\\n    // Distribute ///////////////////////\\n    Distribute_State distribute_states;\\n    uint aienMintFee;\\n    // Distribute\\n    uint ksSwapLimit;\\n    bool isAutoDistribute;\\n    // P0 - Item Merge Grade Infos\\n    mapping(uint8 => P0_MergePfGrade) p0_mergePfGrades;\\n    mapping(uint => string) pfMetaURI;\\n    P0_MergeState p0_mergeState;\\n    //////////////////////////\\n    // P3/////////////////////\\n    //\\n    // // userAddr => orderIds;\\n    // mapping(address => uint[]) p3_userOrders;\\n    // //\\n    // //\\n    // // tokenId => orderIds;\\n    // mapping(uint => uint[]) p3_aienTokenOrders;\\n    // // orderId => orderInfo\\n    // // mapping(uint => P3_Aien_Order) p3_aienOrders;\\n    // //\\n    // // tokenId => orderIds;\\n    // mapping(uint => uint[]) p3_pfTokenOrders;\\n    // // orderId => orderInfo\\n    // mapping(uint => P3_PfOrder) p3_pfOrders;\\n    //\\n    //\\n    //\\n    //\\n    // //////////////////////////\\n    // P2////////////////////////   \\n    bool isP2Stop;\\n    uint P2_baseBalance;\\n    uint P2_plusBalance;\\n    uint P2_dailyRewardPercent;\\n    uint P2_dailyRewardUpdateBlock;\\n    uint P2_lastRewardBlock;\\n    uint P2_MAX_STAKING_LIMIT;\\n    uint DAY_TO_SEC;\\n    uint REWARD_PERCENT_DECIMAL;\\n    uint PRECISION_FACTOR;\\n    // \\n    uint[5] __gap;\\n    mapping(address => P2_User) p2_users;\\n    mapping(uint => P2_Aien) p2_aiens;\\n    mapping(string => P2_Balances) p2_balances;\\n    mapping(uint => P2_Layer) p2_layers;\\n    // mapping(uint => P2_AienLoadData) p2_aienLoadDatas;\\n    // mapping(uint => P2_LayerLoadData) p2_layerLoadDatas;\\n    // mapping(address => P2_UserLoadData) p2_userLoadDatas;\\n    \\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\\n/**\\n@dev global modifier\\n */\\ncontract Modifiers {\\n    modifier onlyDev() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3231774170c1bde9501a437a5bed2ee647a5e1958921c503edc57ae5cbd02a97\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xaea50a523e0ff67f5fc59946320f11efcfc09c75a972788f2884b9d1198a83d9\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDistribute.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, LibAppStorage} from \\\"./LibAppStorage.sol\\\";\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\nimport {LibP2} from \\\"../../Channel_iN/libraries/LibP2.sol\\\";\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {IKlaySwap} from \\\"../interfaces/IKlaySwap.sol\\\";\\nimport {IP2} from \\\"../../Channel_iN/interfaces/IP2.sol\\\";\\nimport {IP1} from \\\"../../Channel_iN/interfaces/IP1.sol\\\";\\n\\nlibrary LibDistribute {\\n    //\\n    //\\n    // \\u2500\\u2500\\u2500 P0 LV UP DISTRIBUTION \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    function p0LvUpDistribute(\\n        address _agency,\\n        uint _agencyAmount,\\n        address _influencer,\\n        uint _influencerAmount,\\n        uint _totalAmount\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        (\\n            uint p1Amount,\\n            uint p2BaseAmount,\\n            uint p2PlusAmount,\\n            uint burnAmount,\\n            uint teamFeeAmount\\n        ) = distributeCalc(_totalAmount);\\n        address per = s.contracts[\\\"per\\\"];\\n\\n        IERC20(per).transfer(_agency, _agencyAmount);\\n        IERC20(per).transfer(_influencer, _influencerAmount);\\n        IERC20(per).transfer(s.contracts[\\\"p1\\\"], p1Amount);\\n        IERC20(per).transfer(s.contracts[\\\"p2balance\\\"], p2BaseAmount+ p2PlusAmount);\\n        IERC20(per).transfer(s.contracts[\\\"burn\\\"], burnAmount);\\n        IERC20(per).transfer(s.contracts[\\\"team\\\"], teamFeeAmount);\\n\\n        // // LibP2._P2_Add_Base_Distribution(p2Amount, 0);\\n        LibP2._P2_Add_Base_Distribution(p2BaseAmount, 0);\\n        LibP2._P2_Add_Plus_Distribution(p2PlusAmount);\\n        IP1(s.contracts[\\\"p1\\\"]).diamond_P1_addDistributionAmountAll(p1Amount);\\n        // // IERC20(PER).transfer(P1, )\\n        // // \\ucd94\\uac00 \\ub418\\uc5b4\\uc57c\\ud560 \\uac83\\ub4e4\\n        // // 1.P1 10% PER\\n        // // 2.P2 20% PER\\n        // // 3.Burn 1% PER\\n        // s.distribute_states.beforeP2Per += p2Amount;\\n        // s.distribute_states.beforeP2Usdt += p2AmountForUsdt;\\n        // s.distribute_states.beforeTeamUsdt += teamAmountForUsdt;\\n    }\\n\\n    function distributeCalc(\\n        uint _amount\\n    ) internal view returns (uint, uint, uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint _p1Amount = (_amount * s.distribute_states.p1Ratio) / 100;\\n        uint _p2BaseAmount = (_amount * s.distribute_states.p2BaseRatio) / 100;\\n        uint _p2PlusAmount = (_amount * s.distribute_states.p2PlusRatio) /\\n            100;\\n        uint _burnAmount = (_amount * s.distribute_states.burnRatio) / 100;\\n        uint _teamFeeAmount = (_amount *\\n            s.distribute_states.teamFeeRatio) / 100;\\n        return (\\n            _p1Amount,\\n            _p2BaseAmount,\\n            _p2PlusAmount,\\n            _burnAmount,\\n            _teamFeeAmount\\n        );\\n    }\\n\\n    // function swapToDistribute() internal {\\n    //     (bool run, uint thisBalance, uint estimateUsdt) = isSwap();\\n    //     require(run == true, \\\"swapToDistribute: swap is not needed\\\");\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n    //     address[] memory path;\\n\\n    //     IERC20(s.contracts[\\\"per\\\"]).approve(\\n    //         s.contracts[\\\"klayswap\\\"],\\n    //         thisBalance\\n    //     );\\n\\n    //     IKlaySwap(s.contracts[\\\"klayswap\\\"]).exchangeKctPos(\\n    //         s.contracts[\\\"per\\\"],\\n    //         thisBalance,\\n    //         s.contracts[\\\"usdt\\\"],\\n    //         estimateUsdt,\\n    //         path\\n    //     );\\n\\n    //     _swapToCalculate();\\n    // }\\n\\n    // function _swapToCalculate() internal returns (uint, uint, uint) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     uint usdtBalance = IERC20(s.contracts[\\\"usdt\\\"]).balanceOf(address(this));\\n    //     uint calculatePercent = s.distribute_states.p2UsdtRatio +\\n    //         s.distribute_states.teamUsdtRatio;\\n\\n    //     uint _p2UsdtAmount = (usdtBalance * s.distribute_states.p2UsdtRatio) /\\n    //         calculatePercent;\\n    //     uint _teamUsdtAmount = (usdtBalance *\\n    //         s.distribute_states.teamUsdtRatio) / calculatePercent;\\n\\n    //     IERC20(s.contracts[\\\"per\\\"]).transfer(s.contracts[\\\"p2balance\\\"], _p2UsdtAmount);\\n\\n    //     IERC20(s.contracts[\\\"per\\\"]).transfer(\\n    //         s.contracts[\\\"team\\\"],\\n    //         _teamUsdtAmount\\n    //     );\\n\\n    //     IP2(s.contracts[\\\"p2balance\\\"]).addPerUsdtDistribution(_p2UsdtAmount, 0);\\n\\n    //     s.distribute_states.beforeP2Per = 0;\\n    //     s.distribute_states.beforeP2Usdt = 0;\\n    //     s.distribute_states.beforeTeamUsdt = 0;\\n    // }\\n\\n    // function getDistributePrice() internal view returns (uint, uint, uint) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     return (\\n    //         s.distribute_states.beforeP2Usdt,\\n    //         s.distribute_states.beforeTeamUsdt,\\n    //         s.distribute_states.beforeP2Per\\n    //     );\\n    // }\\n\\n    function isSwap() internal view returns (bool, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address[] memory path;\\n        uint _balance = IERC20(s.contracts[\\\"per\\\"]).balanceOf(address(this));\\n\\n        uint estimateUsdt = IKlaySwap(s.contracts[\\\"klayswaputil\\\"]).estimateSwap(\\n            s.contracts[\\\"per\\\"],\\n            s.contracts[\\\"per\\\"],\\n            _balance,\\n            path\\n        );\\n\\n        if (estimateUsdt > s.ksSwapLimit && s.isAutoDistribute == true) {\\n            return (true, _balance, estimateUsdt);\\n        } else {\\n            return (false, 0, 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x002a51060d16f4fc89597ba574d4e6d56cd4210324cccc76af1f136aa426a3c3\",\"license\":\"UNLICENSED\"},\"contracts/shared/libraries/LibEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"\\n            )\\n        );\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194f61daa9d3c92ca3de358b76506dbb1e9e39211dc5b49768f18cc38f85b1ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063ce47adfa1161008c578063ddb2bedf11610066578063ddb2bedf146101de578063e488a83a146101f1578063f3ebac5714610204578063f6afa8471461021157600080fd5b8063ce47adfa146101ad578063d2236a54146101ce578063d229a392146101d657600080fd5b806355f939d9116100c857806355f939d91461014d5780636a60affb146101625780636d1d105e146101775780637174e2581461019a57600080fd5b80630b0e517a146100ef5780632b2dc69e146101175780633576742f14610137575b600080fd5b6100f7610239565b604080519384526020840192909252908201526060015b60405180910390f35b61012a61012536600461385b565b6102d1565b60405161010e9190613928565b61013f610415565b60405190815260200161010e565b6101556104a1565b60405161010e919061393b565b61017561017036600461399f565b6106cd565b005b61018a610185366004613a69565b6106eb565b604051901515815260200161010e565b61018a6101a8366004613b1b565b61070d565b6101c06101bb366004613b3d565b610730565b60405161010e929190613b56565b61013f6107ca565b61013f6107d9565b6101756101ec366004613b1b565b61083a565b61018a6101ff366004613b1b565b610852565b60015462ffffff1661013f565b61022461021f366004613b3d565b610877565b6040805192835260208301919091520161010e565b60008080808060000160405161024e90613b78565b9081526040805191829003602001822054637cedcc4b60e11b835290516001600160a01b039091169163f9db98969160048083019260609291908290030181865afa1580156102a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c59190613b86565b93509350935050909192565b6103166040518060e00160405280600060ff16815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60ff8281166000908152602d60209081526040808320815160e081019092528054909416815260018401805493949193919284019161035490613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461038090613bb4565b80156103cd5780601f106103a2576101008083540402835291602001916103cd565b820191906000526020600020905b8154815290600101906020018083116103b057829003601f168201915b50505091835250506002820154602082015260038201546040820152600482015460608201526005820154608082015260069091015460ff16151560a0909101529392505050565b6000808060000160405161042890613b78565b90815260408051602092819003830181205463340c2acd60e01b825291516001600160a01b039092169263340c2acd926004808401938290030181865afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190613bee565b91505090565b606060008060015b600b8160ff1610156104e75760ff8082166000908152602d85016020526040902060060154166104d957816104de565b809150815b506001016104a9565b5060008160ff1667ffffffffffffffff811115610506576105066139d4565b60405190808252806020026020018201604052801561057c57816020015b6105696040518060e00160405280600060ff16815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581525090565b8152602001906001900390816105245790505b50905060015b8260ff168160ff16116106c55760ff8082166000908152602d86016020908152604091829020825160e0810190935280549093168252600183018054929392918401916105ce90613bb4565b80601f01602080910402602001604051908101604052809291908181526020018280546105fa90613bb4565b80156106475780601f1061061c57610100808354040283529160200191610647565b820191906000526020600020905b81548152906001019060200180831161062a57829003601f168201915b50505091835250506002820154602082015260038201546040820152600482015460608201526005820154608082015260069091015460ff16151560a09091015282610694600184613c1d565b60ff16815181106106a7576106a7613c36565b602002602001018190525080806106bd90613c4c565b915050610582565b509392505050565b60006106d761088c565b90506106e5818585856108e8565b50505050565b60008060006106f861088c565b9050610705818686610d1b565b505092915050565b600080600061071a61088c565b905061072781868661135d565b50505092915050565b6040805161070360f41b81526000600282018190529151908190036022018120546316dba26f60e01b8252600482018490526060929182916001600160a01b0316906316dba26f90602401600060405180830381865afa158015610798573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c09190810190613ccf565b9250925050915091565b60006107d4611bf6565b905090565b600080806000016040516107ec90613b78565b90815260408051602092819003830181205462f6e5f560e81b825291516001600160a01b039092169263f6e5f500926004808401938290030181865afa158015610477573d6000803e3d6000fd5b60008061084561088c565b90506106e5818585611c5c565b600080600061085f61088c565b905061086c81868661208c565b925050505b92915050565b600080610883836127d5565b91509150915091565b60003033036108e257600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506108e59050565b50335b90565b60ff81166000908152602d6020908152604080832060048101548452602e9092528220805483919061091990613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461094590613bb4565b80156109925780601f1061096757610100808354040283529160200191610992565b820191906000526020600020905b81548152906001019060200180831161097557829003601f168201915b5050505060068401549192505060ff166109f35760405162461bcd60e51b815260206004820181905260248201527f5046204772616465204d657267652066756e6374696f6e206e6f74206f70656e60448201526064015b60405180910390fd5b600080600080600080610a068c8b61287b565b95509550955095509550955088600001604051610a2290613b78565b90815260405190819003602001812054634625a5a160e11b82526001600160a01b038581166004840152602483018590528781166044840152606483018790521690638c4b4b4290608401600060405180830381600087803b158015610a8757600080fd5b505af1158015610a9b573d6000803e3d6000fd5b5050604051636974656d60e01b81528b92506004019050908152602001604051809103902060009054906101000a90046001600160a01b03166001600160a01b031663f5298aca8e8e846040518463ffffffff1660e01b8152600401610b0393929190613d16565b600060405180830381600087803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b50506040518b9250610b439150613d37565b908152604051908190036020018120546001600160a01b0316906323b872dd908f908c90610b8190696469737472696275746560b01b8152600a0190565b908152604051908190036020018120546001600160e01b031960e085901b168252610bbd92916001600160a01b03909116908b90600401613d46565b6020604051808303816000875af1158015610bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c009190613d7a565b50610c0e838387878a612a5c565b6040518990610c1c90613b78565b908152602001604051809103902060009054906101000a90046001600160a01b03166001600160a01b031663562034cc8e8a600401548a8e6040518563ffffffff1660e01b8152600401610c739493929190613d95565b600060405180830381600087803b158015610c8d57600080fd5b505af1158015610ca1573d6000803e3d6000fd5b505050508b88600401548e6001600160a01b03167f2b5c6da75471a32fa816831df06c6a172203625ece9bf5c72a71f67c6aabff81848a8f8d604051610cea9493929190613dd0565b60405180910390a46001886004016000828254610d079190613e02565b909155505050505050505050505050505050565b604080516330b4b2b760e11b815260006004808301829052925160249281900383018120546331a9108f60e11b825293810186905290926001600160a01b0387811693911691636352211e9101602060405180830381865afa158015610d85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da99190613e2c565b6001600160a01b031614610deb5760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b60448201526064016109ea565b610df482612eba565b15610e335760405162461bcd60e51b815260206004820152600f60248201526e191d5c1b1a58d85d19481c19881a59608a1b60448201526064016109ea565b610e3d8483612f49565b1515600114610e8e5760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f6620706572667269656e647300000000000000000060448201526064016109ea565b6000610e9983613044565b905081600001604051610eab90613d37565b908152604051908190036020018120546001600160a01b0316906323b872dd9087908590610ee990696469737472696275746560b01b8152600a0190565b90815260405190819003602001902054865160028701546001600160a01b0390921691610f169190613e47565b6040518463ffffffff1660e01b8152600401610f3493929190613d46565b6020604051808303816000875af1158015610f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f779190613d7a565b5060005b83518110156110d25760405169706572667269656e647360b01b81528390600a019081526040519081900360200190205484516001600160a01b03909116906342966c6890869084908110610fd257610fd2613c36565b60200260200101516040518263ffffffff1660e01b8152600401610ff891815260200190565b600060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b50506040518592506110389150613b78565b9081526040519081900360200190205484516001600160a01b039091169063c2a6a0629086908490811061106e5761106e613c36565b60200260200101516040518263ffffffff1660e01b815260040161109491815260200190565b600060405180830381600087803b1580156110ae57600080fd5b505af11580156110c2573d6000803e3d6000fd5b505060019092019150610f7b9050565b506000826000016040516110e590613b78565b90815260405190819003602001812054631c4de8d760e01b82526001600160a01b031690631c4de8d79061112190889060040190815260200190565b61012060405180830381865afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190613e5e565b90508260000160405161117590613b78565b9081526040805160209281900383019020549183015190830151865160038701546001600160a01b039094169363a02db9a0938a93909290916111bc919061ffff16613e47565b86606001516111cb9190613e02565b86608001518760a0015160008960e001518b8b61010001516111ed9190613e02565b6040516001600160e01b031960e08c901b1681526004810199909952602489019790975260448801959095526064870193909352608486019190915260a485015260c484015260e483015261010482015261012401600060405180830381600087803b15801561125c57600080fd5b505af1158015611270573d6000803e3d6000fd5b5050604051637465616d60e01b8152611309925085915060040190815260405190819003602001902054855160028601546001600160a01b0390921691600a916112b991613e47565b6112c39190613eef565b604051637465616d60e01b8152869060040190815260405190819003602001902054875160028801546001600160a01b039092169160009161130491613e47565b612a5c565b826001016001015485876001600160a01b03167f99cb040f26b9f8ab0196325428931da1473bc4b7e3f5477d08e93c1713bc0513858860405161134d929190613f03565b60405180910390a4505050505050565b60008060008160000160405161137290613b78565b90815260405190819003602001812054631c4de8d760e01b82526001600160a01b031690631c4de8d7906113ae90889060040190815260200190565b61012060405180830381865afa1580156113cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f09190613e5e565b9050806040015160000361143a5760405162461bcd60e51b81526020600482015260116024820152701b9bdd081c1c995b5a5d5b481b195d995b607a1b60448201526064016109ea565b816004018160400151600b811061145357611453613c36565b600302015460ff1615156001146114975760405162461bcd60e51b81526020600482015260086024820152673737ba1037b832b760c11b60448201526064016109ea565b600080600080856000016040516114ad90613b78565b908152602001604051809103902060009054906101000a90046001600160a01b03166001600160a01b0316637bcb71a689886004018860400151600b81106114f7576114f7613c36565b60030201600101546040518363ffffffff1660e01b8152600401611525929190918252602082015260400190565b6080604051808303816000875af1158015611544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115689190613f53565b604051636974656d60e01b815293975091955093509150869060040190815260405190819003602001812054637a94c56560e11b82526001600160a01b03169063f5298aca906115c1908d908c90600190600401613d16565b600060405180830381600087803b1580156115db57600080fd5b505af11580156115ef573d6000803e3d6000fd5b50506040518892506116019150613d37565b908152604051908190036020018120546001600160a01b0316906323b872dd908c90899061163f90696469737472696275746560b01b8152600a0190565b908152602001604051809103902060009054906101000a90046001600160a01b0316896004018960400151600b811061167a5761167a613c36565b60030201600101546040518463ffffffff1660e01b81526004016116a093929190613d46565b6020604051808303816000875af11580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e39190613d7a565b50611711838286858a6004018a60400151600b811061170457611704613c36565b6003020160010154612a5c565b600061171c8b613138565b600188015461010088015160a089015192935060009262ffffff909216916117449190613e02565b1061177857600188015461010088015160a089015162ffffff9092169161176b9190613e02565b6117759190613f96565b90505b818761010001518860a0015161178e9190613e02565b1061199057898b8d6001600160a01b03167f2204f6ff22d33db4677f6c4e555d9994ed7df4af0ae306770814a6e91d920c896001808d6004018d60400151600b81106117dc576117dc613c36565b60030201600101548760001461180257878e61010001516117fd9190613f96565b611809565b8d61010001515b60408051948552921515602085015291830152606082015260800160405180910390a4604051889061183a90613b78565b908152604080519182900360200190912054908801516001600160a01b039091169063eab96581908d9061186f906001613e02565b8b6004018b60400151600b811061188857611888613c36565b6003020160020160039054906101000a900461ffff1661ffff168b606001516118b19190613e02565b8c6004018c60400151600b81106118ca576118ca613c36565b6003020160020160039054906101000a900461ffff1661ffff168c608001516118f39190613e02565b8d6004018d60400151600b811061190c5761190c613c36565b600302016002015460405160e087901b6001600160e01b0319168152600481019590955260248501939093526044840191909152606483015262ffffff16608482015260a4810184905260c401600060405180830381600087803b15801561197357600080fd5b505af1158015611987573d6000803e3d6000fd5b50505050611be2565b898b8d6001600160a01b03167f2204f6ff22d33db4677f6c4e555d9994ed7df4af0ae306770814a6e91d920c89600160008d6004018d60400151600b81106119da576119da613c36565b600302016001015487600014611a0057878e61010001516119fb9190613f96565b611a07565b8d61010001515b60408051948552921515602085015291830152606082015260800160405180910390a46000611a9f8d8a6004018a60400151600b8110611a4957611a49613c36565b6003020160020160089054906101000a900462ffffff1662ffffff168b6004018b60400151600b8110611a7e57611a7e613c36565b6003020160020160059054906101000a900462ffffff1662ffffff166131d7565b905088600001604051611ab190613b78565b908152602001604051809103902060009054906101000a90046001600160a01b03166001600160a01b031663588e8f858d8b6004018b60400151600b8110611afb57611afb613c36565b6003020160020160039054906101000a900461ffff1661ffff168b60600151611b249190613e02565b8c6004018c60400151600b8110611b3d57611b3d613c36565b6003020160020160039054906101000a900461ffff1661ffff168c60800151611b669190613e02565b858d60a00151611b769190613e02565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810185905260a401600060405180830381600087803b158015611bc857600080fd5b505af1158015611bdc573d6000803e3d6000fd5b50505050505b6001985050505050505050505b9392505050565b6000808060405161070360f41b81529091508190600201908152604080516020928190038301812054631ea8215d60e21b825291516001600160a01b0390921692637aa08574926004808401938290030181865afa158015610477573d6000803e3d6000fd5b6000808060008060008060328911611d0d576040518790611c7c90613b78565b90815260405190819003602001812054637382589360e01b82526001600160a01b031690637382589390611cb8908c9060040190815260200190565b60c060405180830381865afa158015611cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf99190613fa9565b949a50929850909650945092509050611da8565b6040518790611d1b90613b78565b90815260405190819003602001812054631abe24c560e11b82526001600160a01b03169063357c498a90611d57908c9060040190815260200190565b60c060405180830381865afa158015611d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d989190613fa9565b949a509298509096509450925090505b808814611db457600080fd5b6040518790611dc290613b78565b90815260405190819003602001812054634625a5a160e11b82526001600160a01b038581166004840152602483018590528781166044840152606483018790521690638c4b4b4290608401600060405180830381600087803b158015611e2757600080fd5b505af1158015611e3b573d6000803e3d6000fd5b5050604051636974656d60e01b8152899250600401905090815260405190819003602001812054637a94c56560e11b82526001600160a01b03169063f5298aca90611e8e908d908d908d90600401613d16565b600060405180830381600087803b158015611ea857600080fd5b505af1158015611ebc573d6000803e3d6000fd5b5050604051899250611ece9150613d37565b908152604051908190036020018120546001600160a01b0316906323b872dd908c908a90611f0c90696469737472696275746560b01b8152600a0190565b908152604051908190036020018120546001600160e01b031960e085901b168252611f4892916001600160a01b03909116908b90600401613d46565b6020604051808303816000875af1158015611f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8b9190613d7a565b50611f99838387878a612a5c565b60008088600001604051611fac90613b78565b90815260405190819003602001812054632b2e8efb60e01b82526001600160a01b031690632b2e8efb90611fe9908f908f90600090600401613d16565b6000604051808303816000875af1158015612008573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120309190810190614001565b915091508a828d6001600160a01b03167f2b5c6da75471a32fa816831df06c6a172203625ece9bf5c72a71f67c6aabff818d8c6001876040516120769493929190614048565b60405180910390a4505050505050505050505050565b604080516330b4b2b760e11b815260006004808301829052925160249281900383018120546331a9108f60e11b8252938101869052909283926001600160a01b0388811693921691636352211e9101602060405180830381865afa1580156120f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211c9190613e2c565b6001600160a01b03161461215e5760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b60448201526064016109ea565b60008160000160405161217090613b78565b90815260405190819003602001812054631c4de8d760e01b82526001600160a01b031690631c4de8d7906121ac90889060040190815260200190565b61012060405180830381865afa1580156121ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ee9190613e5e565b9050816004018160400151600b811061220957612209613c36565b600302015460ff16151560011461224d5760405162461bcd60e51b81526020600482015260086024820152673737ba1037b832b760c11b60448201526064016109ea565b6000806000808560000160405161226390613b78565b908152602001604051809103902060009054906101000a90046001600160a01b03166001600160a01b0316637bcb71a689886004018860400151600b81106122ad576122ad613c36565b60030201600101546040518363ffffffff1660e01b81526004016122db929190918252602082015260400190565b6080604051808303816000875af11580156122fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231e9190613f53565b604051636974656d60e01b815293975091955093509150869060040190815260405190819003602001812054637a94c56560e11b82526001600160a01b03169063f5298aca90612377908d908c90600190600401613d16565b600060405180830381600087803b15801561239157600080fd5b505af11580156123a5573d6000803e3d6000fd5b50506040518892506123b79150613d37565b908152604051908190036020018120546001600160a01b0316906323b872dd908c9089906123f590696469737472696275746560b01b8152600a0190565b908152602001604051809103902060009054906101000a90046001600160a01b0316896004018960400151600b811061243057612430613c36565b60030201600101546040518463ffffffff1660e01b815260040161245693929190613d46565b6020604051808303816000875af1158015612475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124999190613d7a565b506124ba838286858a6004018a60400151600b811061170457611704613c36565b84604001516000036125cc5760405186906124d490613b78565b908152604080519182900360200182205490870151630e1c1b2b60e01b8352600483018c905260248301526001600160a01b031690630e1c1b2b90604401600060405180830381600087803b15801561252c57600080fd5b505af1158015612540573d6000803e3d6000fd5b5050505087898b6001600160a01b03167f9c2d00f9bd857ba01e3db2db9ad693ac6ada7c0d12cf673bddac07e2f52f93cf6001808b6004018b60400151600b811061258d5761258d613c36565b60030201600101546040516125b5939291909283529015156020830152604082015260600190565b60405180910390a460019650505050505050611bef565b60006125d78b613138565b90508560a0015181116126675760405187906125f290613b78565b908152604080519182900360200182205490880151630e1c1b2b60e01b8352600483018d905260248301526001600160a01b031690630e1c1b2b90604401600060405180830381600087803b15801561264a57600080fd5b505af115801561265e573d6000803e3d6000fd5b50505050612744565b60006126bb8c896004018960400151600b811061268657612686613c36565b6003020160020160089054906101000a900462ffffff1662ffffff168a6004018a60400151600b8110611a7e57611a7e613c36565b9050876000016040516126cd90613b78565b9081526040519081900360200181205463a76373c160e01b82526001600160a01b03169063a76373c190612710908e908590600401918252602082015260400190565b600060405180830381600087803b15801561272a57600080fd5b505af115801561273e573d6000803e3d6000fd5b50505050505b888a8c6001600160a01b03167f9c2d00f9bd857ba01e3db2db9ad693ac6ada7c0d12cf673bddac07e2f52f93cf60018a60a001518611158c6004018c60400151600b811061279457612794613c36565b60030201600101546040516127bc939291909283529015156020830152604082015260600190565b60405180910390a45060019a9950505050505050505050565b60008080600080826000016040516127ec90613b78565b90815260405190819003602001812054637382589360e01b82526001600160a01b03169063738258939061282890899060040190815260200190565b60c060405180830381865afa158015612845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128699190613fa9565b949b949a509398505050505050505050565b604080518082018252602f5481526030546020820152905160009182918291829182918291829190829081906128b090613b78565b9081526040519081900360200181205463295d6f7360e21b82526001600160a01b03169063a575bdcc906128ec908e9060040190815260200190565b61016060405180830381865afa15801561290a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292e919061406d565b60ff8b166000908152602d8501602090815260408220908501516002820154939450909282918291620186a09161296491613e47565b61296e9190613eef565b90506000620186a08760000151866002015461298a9190613e47565b6129949190613eef565b6101208701519091506001600160a01b0316156129b9578561012001519350836129e8565b604051637465616d60e01b81528890600401908152604051908190036020019020546001600160a01b03169350835b5060408601516001600160a01b031615612a06578560400151612a32565b604051637465616d60e01b81528890600401908152604051908190036020019020546001600160a01b03165b6002860154600390960154959e509c50909a50919850909650909450505050509295509295509295565b600080806000806000612a6e87613263565b94509450945094509450600086600001604051612a8a90613d37565b9081526040519081900360200181205463a9059cbb60e01b82526001600160a01b038e81166004840152602483018e9052169150819063a9059cbb906044016020604051808303816000875af1158015612ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0c9190613d7a565b5060405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018b905282169063a9059cbb906044016020604051808303816000875af1158015612b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b809190613d7a565b5060405161703160f01b81526001600160a01b0382169063a9059cbb908990600201908152604051908190036020018120546001600160e01b031960e084901b1682526001600160a01b03166004820152602481018990526044016020604051808303816000875af1158015612bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1e9190613d7a565b5060405168703262616c616e636560b81b81526001600160a01b0382169063a9059cbb908990600901908152604051908190036020019020546001600160a01b0316612c6a8789613e02565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015612cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd99190613d7a565b5060405163313ab93760e11b81526001600160a01b0382169063a9059cbb908990600401908152604051908190036020018120546001600160e01b031960e084901b1682526001600160a01b03166004820152602481018690526044016020604051808303816000875af1158015612d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d799190613d7a565b50604051637465616d60e01b81526001600160a01b0382169063a9059cbb908990600401908152604051908190036020018120546001600160e01b031960e084901b1682526001600160a01b03166004820152602481018590526044016020604051808303816000875af1158015612df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e199190613d7a565b50612e25856000613367565b612e2e846133a6565b60405161703160f01b81528790600201908152604051908190036020018120546345e17d1d60e11b82526001600160a01b031690638bc2fa3a90612e7a90899060040190815260200190565b600060405180830381600087803b158015612e9457600080fd5b505af1158015612ea8573d6000803e3d6000fd5b50505050505050505050505050505050565b6000805b60018351612ecc9190613f96565b811015612f40576000612ee0826001613e02565b90505b8351811015612f3757838181518110612efe57612efe613c36565b6020026020010151848381518110612f1857612f18613c36565b602002602001015103612f2f575060019392505050565b600101612ee3565b50600101612ebe565b50600092915050565b60008060005b83518110156130395760405169706572667269656e647360b01b81526001600160a01b038616908390600a019081526040519081900360200190205485516001600160a01b0390911690636352211e90879085908110612fb157612fb1613c36565b60200260200101516040518263ffffffff1660e01b8152600401612fd791815260200190565b602060405180830381865afa158015612ff4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130189190613e2c565b6001600160a01b03161461303157600092505050610871565b600101612f4f565b506001949350505050565b6000806000805b84518110156106c5578260250160008460000160405161306a90613b78565b9081526040519081900360200190205487516001600160a01b03909116906342ab8805908990869081106130a0576130a0613c36565b60200260200101516040518263ffffffff1660e01b81526004016130c691815260200190565b608060405180830381865afa1580156130e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131079190614112565b60209081015182528101919091526040016000206001015461312e9062ffffff1683613e02565b915060010161304b565b600080600042844160405160200161317993929190928352606091821b6bffffffffffffffffffffffff199081166020850152911b16603482015260480190565b60408051601f19818403018152919052805160209091012060018301549091506131aa9060009062ffffff1661417f565b6131b59060016141a2565b6131c49062ffffff16826141be565b6131cf906000613e02565b949350505050565b60008042854160405160200161321693929190928352606091821b6bffffffffffffffffffffffff199081166020850152911b16603482015260480190565b60405160208183030381529060405280519060200120905082838561323b9190613f96565b613246906001613e02565b61325090836141be565b61325a9190613e02565b95945050505050565b600080808080808060298101549091506000906064906132889062ffffff168a613e47565b6132929190613eef565b60298301549091506000906064906132b6906301000000900462ffffff168b613e47565b6132c09190613eef565b60298401549091506000906064906132e7906601000000000000900462ffffff168c613e47565b6132f19190613eef565b602985015490915060009060649061331b906901000000000000000000900462ffffff168d613e47565b6133259190613eef565b602986015490915060009060649061334990600160601b900462ffffff168e613e47565b6133539190613eef565b949c939b5091995097509195509350505050565b60008281603201600082825461337d9190613e02565b92505081905550818160330160008282546133989190613e02565b909155506106e590506133cf565b6000818160330160008282546133bc9190613e02565b909155506133ca90506133cf565b505050565b603154600090819060ff1661341a5760405162461bcd60e51b8152602060048201526011602482015270140c8e88140c881a5cc81cdd1bdc1c1959607a1b60448201526064016109ea565b60004381603501540361342f57439250505090565b806038015481603501546134439190613e02565b4311156137f7576000805b826038015483603501546134629190613e02565b4311156137f45782603801548360350160008282546134819190613e02565b925050819055506000806134a28560320154866033015487603401546137ff565b909250905060015b600b8160ff1610156137b75760ff80821660009081526043880160205260409020601301541661361a5760ff8116600090815260438701602052604081208181556001810191909155600a015460398701546135069085613eef565b6135109190613e47565b60ff8216600090815260438801602052604081206002018054909190613537908490613e02565b909155505060ff811660009081526043870160205260409020600b015460398701546135639084613eef565b61356d9190613e47565b60ff8216600090815260438801602052604081206003018054909190613594908490613e02565b909155505060ff811660009081526043870160205260409020600a015460398701546135c09085613eef565b6135ca9190613e47565b6135d49086613e02565b60ff821660009081526043880160205260409020600b01546039880154919650906135ff9084613eef565b6136099190613e47565b6136139085613e02565b93506137af565b60ff81166000908152604387016020526040812060028101546003820154600d90920154839261364a92916137ff565b60ff8516600090815260438b0160205260409020600a015460398b015492945090925083916136799088613eef565b6136839190613e47565b61368d9190613e02565b60ff8416600090815260438a0160205260409020908155600b015460398901548291906136ba9087613eef565b6136c49190613e47565b6136ce9190613e02565b60ff8416600090815260438a01602052604081206001810192909255600290910180548492906136ff908490613f96565b909155505060ff831660009081526043890160205260408120600301805483929061372b908490613f96565b909155505060ff831660009081526043890160205260409020600a015460398901546137579087613eef565b6137619190613e47565b61376b9088613e02565b60ff8416600090815260438a0160205260409020600b015460398a0154919850906137969086613eef565b6137a09190613e47565b6137aa9087613e02565b955050505b6001016134aa565b50838560320160008282546137cc9190613f96565b92505081905550828560330160008282546137e79190613f96565b9091555061344e92505050565b50505b439250505090565b60008080620186a06138118588613e47565b61381b9190613eef565b90506000620186a061382d8688613e47565b6138379190613eef565b919791965090945050505050565b803560ff8116811461385657600080fd5b919050565b60006020828403121561386d57600080fd5b611bef82613845565b60005b83811015613891578181015183820152602001613879565b50506000910152565b600081518084526138b2816020860160208601613876565b601f01601f19169290920160200192915050565b60ff81511682526000602082015160e060208501526138e860e085018261389a565b905060408301516040850152606083015160608501526080830151608085015260a083015160a085015260c0830151151560c08501528091505092915050565b602081526000611bef60208301846138c6565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561399257603f198886030184526139808583516138c6565b94509285019290850190600101613964565b5092979650505050505050565b6000806000606084860312156139b457600080fd5b83359250602084013591506139cb60408501613845565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715613a0e57613a0e6139d4565b60405290565b604051610160810167ffffffffffffffff81118282101715613a0e57613a0e6139d4565b604051601f8201601f1916810167ffffffffffffffff81118282101715613a6157613a616139d4565b604052919050565b60008060408385031215613a7c57600080fd5b8235915060208084013567ffffffffffffffff80821115613a9c57600080fd5b818601915086601f830112613ab057600080fd5b813581811115613ac257613ac26139d4565b8060051b9150613ad3848301613a38565b8181529183018401918481019089841115613aed57600080fd5b938501935b83851015613b0b57843582529385019390850190613af2565b8096505050505050509250929050565b60008060408385031215613b2e57600080fd5b50508035926020909101359150565b600060208284031215613b4f57600080fd5b5035919050565b604081526000613b69604083018561389a565b90508260208301529392505050565b61323160f11b815260020190565b600080600060608486031215613b9b57600080fd5b8351925060208401519150604084015190509250925092565b600181811c90821680613bc857607f821691505b602082108103613be857634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215613c0057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60ff828116828216039081111561087157610871613c07565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8103613c6257613c62613c07565b60010192915050565b600082601f830112613c7c57600080fd5b815167ffffffffffffffff811115613c9657613c966139d4565b613ca9601f8201601f1916602001613a38565b818152846020838601011115613cbe57600080fd5b6131cf826020830160208701613876565b60008060408385031215613ce257600080fd5b825167ffffffffffffffff811115613cf957600080fd5b613d0585828601613c6b565b925050602083015190509250929050565b6001600160a01b039390931683526020830191909152604082015260600190565b623832b960e91b815260030190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b8051801515811461385657600080fd5b600060208284031215613d8c57600080fd5b611bef82613d6a565b60018060a01b0385168152836020820152608060408201526000613dbc608083018561389a565b905060ff8316606083015295945050505050565b84815283602082015260ff83166040820152608060608201526000613df8608083018461389a565b9695505050505050565b8082018082111561087157610871613c07565b80516001600160a01b038116811461385657600080fd5b600060208284031215613e3e57600080fd5b611bef82613e15565b808202811582820484141761087157610871613c07565b60006101208284031215613e7157600080fd5b613e796139ea565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b634e487b7160e01b600052601260045260246000fd5b600082613efe57613efe613ed9565b500490565b60006040820184835260206040602085015281855180845260608601915060208701935060005b81811015613f4657845183529383019391830191600101613f2a565b5090979650505050505050565b60008060008060808587031215613f6957600080fd5b613f7285613e15565b9350613f8060208601613e15565b6040860151606090960151949790965092505050565b8181038181111561087157610871613c07565b60008060008060008060c08789031215613fc257600080fd5b86519550613fd260208801613e15565b945060408701519350613fe760608801613e15565b92506080870151915060a087015190509295509295509295565b6000806040838503121561401457600080fd5b82519150602083015167ffffffffffffffff81111561403257600080fd5b61403e85828601613c6b565b9150509250929050565b848152836020820152826040820152608060608201526000613df8608083018461389a565b6000610160828403121561408057600080fd5b614088613a14565b82518152602083015160208201526140a260408401613e15565b6040820152606083015160608201526140bd60808401613d6a565b608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101206140fa818501613e15565b90820152610140928301519281019290925250919050565b60006080828403121561412457600080fd5b6040516080810181811067ffffffffffffffff82111715614147576141476139d4565b8060405250825181526020830151602082015261416660408401613d6a565b6040820152606083015160608201528091505092915050565b62ffffff82811682821603908082111561419b5761419b613c07565b5092915050565b62ffffff81811683821601908082111561419b5761419b613c07565b6000826141cd576141cd613ed9565b50069056fea2646970667358221220a08e06b25b022d5f88437853c3190c7afd0befd4f3538ebcf80dc33f5c28fcb364736f6c63430008160033",
  "devdoc": {
    "details": "i-TEZ : P0 (Mix) Facet Contract",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "P0_getMaxProb()": {
        "notice": "P0 _ get functions"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}