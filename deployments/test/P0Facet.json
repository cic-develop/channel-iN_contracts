{
  "address": "0x5F1f9eE0d7b94646873564FEEEa303dBD7934A82",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addProb",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "perfs",
          "type": "uint256[]"
        }
      ],
      "name": "P0_AddProb_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLevelUp",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "P0_BaseMix_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "perfId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "perfGrade",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "perfURI",
          "type": "bytes"
        }
      ],
      "name": "P0_ItemMerge_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLevelUp",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usePower",
          "type": "uint256"
        }
      ],
      "name": "P0_PremiumMix_Event",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aienId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_pf_Ids",
          "type": "uint256[]"
        }
      ],
      "name": "P0_addProbCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_useItemId",
          "type": "uint256"
        }
      ],
      "name": "P0_baseMixCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_basicMergeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_getAddProbFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_getMaxProb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "P0_getMergeState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_grade",
          "type": "uint8"
        }
      ],
      "name": "P0_getMergeStates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "grade",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "gradeName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "mergeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mergeUseItemAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "latestId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setMatadataId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct P0_MergePfGrade",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_getMetadataMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_influencerMergeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_itemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_grade",
          "type": "uint8"
        }
      ],
      "name": "P0_itemGradeMerge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_itemAmount",
          "type": "uint256"
        }
      ],
      "name": "P0_itemMerge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "P0_mixPFInfos",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_useItemId",
          "type": "uint256"
        }
      ],
      "name": "P0_premiumMixCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf787448ee80d82f6000260e5f11b50205bb2a0c67132007ea08b70dca51cecb0",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe34f22cF55db5209bA6546701d408e5F58d8703f",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "6746535",
    "logsBloom": "0x
    "blockHash": "0x72b45da3a314b1a6e7f73a8117d32f02187378bbf2cf55c66b793a6b5b4a0fb2",
    "transactionHash": "0xf787448ee80d82f6000260e5f11b50205bb2a0c67132007ea08b70dca51cecb0",
    "logs": [],
    "blockNumber": 142985994,
    "cumulativeGasUsed": "6746535",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 28,
  "solcInputHash": "83f95329f367c5fc59356a499438560a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addProb\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"perfs\",\"type\":\"uint256[]\"}],\"name\":\"P0_AddProb_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLevelUp\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"P0_BaseMix_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"perfId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perfGrade\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"perfURI\",\"type\":\"bytes\"}],\"name\":\"P0_ItemMerge_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLevelUp\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usePower\",\"type\":\"uint256\"}],\"name\":\"P0_PremiumMix_Event\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_pf_Ids\",\"type\":\"uint256[]\"}],\"name\":\"P0_addProbCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_useItemId\",\"type\":\"uint256\"}],\"name\":\"P0_baseMixCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_basicMergeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_getAddProbFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_getMaxProb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"P0_getMergeState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_grade\",\"type\":\"uint8\"}],\"name\":\"P0_getMergeStates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"grade\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"gradeName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mergeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mergeUseItemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setMatadataId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"internalType\":\"struct P0_MergePfGrade\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_getMetadataMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_influencerMergeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_itemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_grade\",\"type\":\"uint8\"}],\"name\":\"P0_itemGradeMerge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_itemAmount\",\"type\":\"uint256\"}],\"name\":\"P0_itemMerge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"P0_mixPFInfos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_useItemId\",\"type\":\"uint256\"}],\"name\":\"P0_premiumMixCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"i-TEZ : P0 (Mix) Facet Contract\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"P0_getMaxProb()\":{\"notice\":\"P0 _ get functions\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Channel_iN/facets/P0Facet.sol\":\"P0Facet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Channel_iN/facets/P0Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {P0_MergePfGrade, AppStorage, Modifiers, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IDB} from \\\"../interfaces/IDB.sol\\\";\\nimport {IERC20} from \\\"../../shared/interfaces/IERC20.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC721} from \\\"../../shared/interfaces/IERC721.sol\\\";\\nimport {LibP0} from \\\"../libraries/LibP0.sol\\\";\\n\\ninterface IP0 {\\n    function mixPFInfos(\\n        uint _level\\n    ) external view returns (string memory, uint);\\n}\\n\\n/**\\n@dev i-TEZ : P0 (Mix) Facet Contract\\n */\\ncontract P0Facet is Modifiers {\\n    function P0_itemMerge(uint _itemId, uint _itemAmount) external {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        LibP0._itemMerge(msgsender, _itemId, _itemAmount);\\n    }\\n\\n    function P0_itemGradeMerge(\\n        uint _itemId,\\n        uint _itemAmount,\\n        uint8 _grade\\n    ) external {\\n        address msgsender = LibMeta.msgSender();\\n        LibP0._itemGradeMerge(msgsender, _itemId, _itemAmount, _grade);\\n    }\\n\\n    function P0_baseMixCall(uint _id, uint _useItemId) external returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        return LibP0._baseMixCall(msgsender, _id, _useItemId);\\n    }\\n\\n    function P0_premiumMixCall(\\n        uint _id,\\n        uint _useItemId\\n    ) external returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        LibP0._premiumMixCall(msgsender, _id, _useItemId);\\n    }\\n\\n    function P0_addProbCall(\\n        uint _aienId,\\n        uint[] memory _pf_Ids\\n    ) external returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        LibP0._addProbCall(msgsender, _aienId, _pf_Ids);\\n    }\\n\\n    /**\\n    P0 _ get functions\\n     */\\n\\n    function P0_getMaxProb() external view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.p0_states.maxProb;\\n    }\\n\\n    // input ItemId\\ubcc4\\ub85c \\ubcd1\\ud569\\uc2dc \\uc18c\\uc694\\ub418\\ub294 Per, item\\uc218\\ub7c9\\n    function P0_getMergeState(uint _itemId) external view returns (uint, uint) {\\n        return LibP0._getMergeState(_itemId);\\n    }\\n\\n    // PF POWER ZONE \\uc0ac\\uc6a9\\ub418\\ub294 Per \\uc218\\ub7c9\\n    function P0_getAddProbFee() external view returns (uint) {\\n        return LibP0._getAddProbFee();\\n    }\\n\\n    // \\uc778\\ud50c\\ub8e8\\uc5b8\\uc11c \\ub8e8\\ube44\\uc628 \\ubcd1\\ud569\\uc2dc amount\\n    function P0_influencerMergeAmount() external view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"db\\\"]).influencerMergeAmount();\\n    }\\n\\n    // \\uc7ac\\ub2e8 \\ub8e8\\ube44\\uc628 \\ubcd1\\ud569\\uc2dc amount\\n    function P0_basicMergeAmount() external view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"db\\\"]).basicMergeAmount();\\n    }\\n\\n    // MixPFInfos\\n    function P0_mixPFInfos(\\n        uint _level\\n    ) external view returns (string memory, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IP0(s.contracts[\\\"p0\\\"]).mixPFInfos(_level);\\n    }\\n\\n    // Aien Metadata set Margin value\\n    function P0_getMetadataMargin() external view returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"db\\\"])._getMedataMargin();\\n    }\\n\\n    function P0_getMergeStates(\\n        uint8 _grade\\n    ) external view returns (P0_MergePfGrade memory) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.p0_mergePfGrades[_grade];\\n    }\\n}\\n\",\"keccak256\":\"0x9c920e4ecd5eb0f9414b3ae23d23dc5c6507c883d6e3cf73d4455f43626126bb\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IDB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// legacy db contract interface\\ninterface IDB {\\n    struct pf {\\n        uint id;\\n        uint class;\\n        bool isAien;\\n        uint usedAienId;\\n    }\\n\\n    struct pfGrade {\\n        uint normal;\\n        uint uncommon;\\n        uint rare;\\n        uint unique;\\n        uint legendary;\\n        uint myth;\\n        uint ancient;\\n    }\\n\\n    struct aien {\\n        uint id;\\n        // \\uac15\\ud654 \\ud69f\\uc218\\n        uint mixCount;\\n        //\\n        uint p2Level;\\n        // \\ud1a0\\ud0c8 \\uacbd\\ud5d8\\uce58\\n        uint totalExp;\\n        // \\ubbf8\\uc158 \\ubc0f, \\uc778\\ud50c\\ub8e8\\uc5b8\\uc11c \\ud65c\\ub3d9 \\uad00\\ub828 \\uacbd\\ud5d8\\uce58\\n        uint influExp;\\n        // \\uae30\\ubcf8 \\ud655\\ub960\\n        uint baseProb;\\n        // \\ud1a0\\ud0c8 \\ud655\\ub960\\n        uint totalProb;\\n        // is PF\\n        uint isPFid;\\n        // \\ucd94\\uac00\\ud655\\ub960\\n        uint addProb;\\n    }\\n\\n    struct User {\\n        // DB > idx\\n        uint userId;\\n        // token itme ID\\n        uint itemId;\\n        address incomeAddr;\\n        uint feeBalance;\\n        bool isAble;\\n        uint mintCount;\\n        uint useLevelupCount;\\n        uint useMergeCount;\\n        // uint ownerIncomePercent;\\n        // uint userIncomPercent;\\n        //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n        uint referralIncome;\\n        address agency;\\n        uint agencyIncome;\\n    }\\n\\n    function AIENS(uint _key) external view returns (aien memory);\\n\\n    function PFS(uint _key) external view returns (pf memory);\\n\\n    function getAien(uint _id) external view;\\n\\n    function getPF(uint _id) external view;\\n\\n    function getPfGrade(uint _id) external view returns (uint);\\n\\n    function setAien(uint _id) external;\\n\\n    function usePFimg(uint _aienId, uint _pfId) external;\\n\\n    function setAienAll(\\n        uint _id,\\n        uint _mixCount,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _totalProb,\\n        uint _isPFid,\\n        uint _addProb\\n    ) external;\\n\\n    function getContractAddr(\\n        string memory _name\\n    ) external view returns (address);\\n\\n    function burnValue(uint _burnAmount) external;\\n\\n    function setAienGradeInfo(uint _toGrade) external;\\n\\n    function subPfGrades(uint _pfId) external;\\n\\n    function setLevelUpStatus(uint _toGrade) external;\\n\\n    function _failedAienSet(\\n        uint _id,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _successAienSet(\\n        uint _id,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _mergeCalcul(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _mergeCalcul2(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _influencerMerge(\\n        address _to,\\n        uint _itemId,\\n        uint _referralIncome\\n    ) external returns (uint, string memory);\\n\\n    function _levelUpCalcul(\\n        uint _itemId,\\n        uint _fee\\n    ) external returns (address, address, uint, uint);\\n\\n    function _levelUpSucess(uint _id, uint _p2Level) external;\\n\\n    function _levelUpFailed(uint _id, uint _addProb) external;\\n\\n    function _mergeCount(\\n        address _agency,\\n        uint _agencyFee,\\n        address _influencer,\\n        uint _influencerFee\\n    ) external;\\n\\n    function usePFPower(uint _id, uint _usePower) external;\\n\\n    function addProbFee() external view returns (uint);\\n\\n    function PfGrades() external view returns (pfGrade memory);\\n\\n    function getAienGradeInfo() external view returns (uint[] memory);\\n\\n    function basicMergeAmount() external view returns (uint);\\n\\n    function influencerMergeAmount() external view returns (uint);\\n\\n    function _getMedataMargin() external view returns (uint, uint, uint);\\n\\n    function getAienLevel(uint _aienId) external view returns (uint);\\n\\n    function setPerprojectWallet(address _addr) external;\\n\\n    function setAgencyAddr(address _influencer, address _agency) external;\\n\\n    function setAgencyIncomePercent(uint _agencyIncomePercent) external;\\n\\n    function adminSetMergeAmount(\\n        uint _influencerMergeAmount,\\n        uint _basicMergeAmount,\\n        uint _agencyIncomePercent,\\n        uint _ownerIncomePercent\\n    ) external;\\n\\n    function getUserFromItem(uint _itemId) external view returns (User memory);\\n\\n    function adminSetMetaData(\\n        uint _pfId,\\n        uint8 _grade,\\n        string memory _seedHash\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb7bfad81b676bb5e847be713ae6e926ffe3b80f6c78b825a1d8c2ed2b1d3838e\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IP1 {\\n    struct PendingInfo {\\n        address user;\\n        // 1: \\ucd9c\\uae08\\uc694\\uccad,\\n        // 2: \\ucd9c\\uae08\\ucde8\\uc18c,\\n        // 3: \\uc644\\ub8cc,\\n        // 4: \\ucde8\\uc18c\\uc644\\ub8cc: \\uc644\\ub8cc\\uc2dc \\uc7ac\\uc608\\uce58 \\ubc84\\ud2bc \\ud65c\\uc131\\ud654\\n        uint8 pendingType;\\n        uint startTime;\\n        uint endTime;\\n        uint amount;\\n        // pending Id\\n        uint pendingId;\\n    }\\n\\n    function update() external returns (uint);\\n\\n    function diamond_P1_deposit(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint);\\n\\n    function diamond_P1_reDposit(address _sender) external returns (uint);\\n\\n    function diamond_P1_harvest(address _sender) external returns (uint);\\n\\n    function diamond_P1_pendingReward(\\n        address _sender,\\n        uint _withdrawBlock\\n    ) external view returns (uint);\\n\\n    function diamond_P1_addPower(\\n        address _sender,\\n        uint _aienId,\\n        uint _usePower\\n    ) external returns (uint);\\n\\n    function diamond_P1_widthdraw(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawCancel(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_widthdrawCancelConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_getPoolData() external view returns (uint, uint, uint);\\n\\n    function diamond_P1_getUserData(\\n        address _sender\\n    ) external view returns (uint, uint, uint, uint, uint);\\n\\n    function diamond_P1_getUnstakeData(\\n        address _sender\\n    ) external view returns (PendingInfo[] memory);\\n\\n    function diamond_P1_addDistributionAmountAll(uint _amount) external;\\n\\n    function unStakeTimeLock() external view returns (uint16);\\n\\n    function unStakeCancelTimeLock() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x07efaa8c8bc5cf474a039cab55457d26d607d1eb1a5b133c27962cba3bba2b39\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IP2 {\\n    struct User {\\n        bool isBlockUser;\\n        uint perRewarded;\\n        uint usdtRewarded;\\n        EnumerableSet.UintSet tokenIds;\\n    }\\n\\n    struct Aien {\\n        address staker;\\n        uint level;\\n        // requires value\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        uint rewardUsdtDebt;\\n        uint rewardPerDebt;\\n        ////////////////////\\n        uint per_received;\\n        uint usdt_received;\\n    }\\n\\n    struct Balances {\\n        // \\ub85c\\uc9c1\\uc0c1 \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\ud55c \\ubc38\\ub7f0\\uc2a4 \\ubcc0\\uc218 (\\uc2e4\\uc81c\\uc640 \\ub2e4\\ub97c \\uc218 \\uc788\\uc74c)\\n        uint perBalance;\\n        uint usdtBalance;\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508 \\ub418\\uc9c0 \\uc54a\\uc740 \\uc0c1\\ud0dc\\uc5d0\\uc11c\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508\\ub418\\uba74 \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\uc800\\uc7a5\\ub41c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ubcc0\\uc218\\n        uint savedPerBalance;\\n        uint savedUsdtBalance;\\n        // \\ud604\\uc7ac savedUsdt, savedPer\\ub97c \\ud1b5\\ud574 \\ub098\\uc628 \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\n        uint add_dailyUSDT;\\n        uint add_dailyPER;\\n        // \\ubcf4\\uc548\\uc0c1 \\ubb38\\uc81c\\uac00 \\uc0dd\\uaca8\\n        // \\uc608\\uc0c1\\ubcf4\\ub2e4 \\ub9ce\\uc740 withdraw\\ub97c \\uc694\\uccad\\ud558\\uac8c \\ub418\\ub294 \\uacbd\\uc6b0\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ud1a0\\ud0c8 \\ubc38\\ub7f0\\uc2a4\\uc640\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ucd9c\\uae08 \\ubc38\\ub7f0\\uc2a4\\ub97c \\ube44\\uad50\\ud558\\uc5ec\\n        // \\ucd9c\\uae08 \\uac00\\ub2a5\\ud55c\\uc9c0 \\uccb4\\ud06c\\ud558\\ub294 \\ubcc0\\uc218\\n        uint total_checkWithdrawPER;\\n        uint withdrawal_checkWithdrawPER;\\n        uint total_checkWithdrawUSDT;\\n        uint withdrawal_checkWithdrawUSDT;\\n    }\\n\\n    struct Layer {\\n        Balances balances;\\n        // P2\\uc5d0\\uc11c \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\ud1a0\\ud070 \\ubc30\\uc815 \\ubc1b\\uc744\\ub54c \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint rewardUsdtPercent;\\n        uint rewardPerPercent;\\n        // \\uc720\\uc800\\uc5d0\\uac8c \\ud558\\ub8e8\\uc5d0 \\ubd84\\ubc30\\ud558\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint dailyReward_Percent;\\n        // \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        // \\ubbf8\\uc624\\ud508\\uc2dc \\uc800\\uc7a5\\ud55c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ud37c\\uc13c\\ud2b8\\ubcc0\\uc218\\n        uint add_dailyReward_Percent;\\n        uint lastRewardBlock;\\n        uint dailyRewardUpdateBlock;\\n        uint totalStakedAien;\\n        bool isOpen;\\n    }\\n\\n    struct AienLoadData {\\n        //aien\\uc815\\ubcf4\\n        uint _aienId;\\n        uint _aienLevel;\\n        // \\ucd9c\\uae08 \\ud1a0\\ud0c8\\n        uint _aien_per_received;\\n        uint _aien_usdt_received;\\n        //\\ucd9c\\uae08 \\uac00\\ub2a5\\n        uint usdt_withdrawable;\\n        uint per_withdrawable;\\n        // block\\ub2f9 \\ub9ac\\uc6cc\\ub4dc\\n        uint block_reward_per;\\n        uint block_reward_usdt;\\n    }\\n\\n    struct LayerLoadData {\\n        bool isOpen;\\n        uint _layerNumber;\\n        uint _24h_reward_per;\\n        uint _24h_reward_usdt;\\n        uint totalStakedAien;\\n    }\\n    struct UserLoadData {\\n        uint _usdtRewarded;\\n        uint _perRewarded;\\n        bool _isBlockUser;\\n    }\\n\\n    function aiens(uint _id) external view returns (Aien memory);\\n\\n    function diamond_P2_deposit(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_withdraw(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_harvest(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_getUserInfo(\\n        address _sender\\n    )\\n        external\\n        view\\n        returns (\\n            UserLoadData memory,\\n            AienLoadData[] memory,\\n            LayerLoadData[] memory\\n        );\\n\\n    function diamond_P2_getLayerData(\\n        uint _number\\n    ) external view returns (uint, uint, uint);\\n\\n    function addPerUsdtDistribution(uint _usdt, uint _per) external;\\n\\n    function P2_usdtBalance() external view returns (uint);\\n\\n    function P2_perBalance() external view returns (uint);\\n\\n    function MAX_STAKING_LIMIT() external view returns (uint);\\n\\n    function layers(uint _number) external view returns (Layer memory);\\n\\n    function pendingReward(\\n        uint _aienId,\\n        uint _layerNumber,\\n        uint _withdrawBlock\\n    ) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0x2e90a8470442fec4da79c46739fcf8b958fe1503f519a5f7b2fa048697e2396d\",\"license\":\"MIT\"},\"contracts/Channel_iN/libraries/LibP0.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {User, P0_MergeState, P0_MergePfGrade, AppStorage, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IDB} from \\\"../interfaces/IDB.sol\\\";\\nimport {IERC721} from \\\"../../shared/interfaces/IERC721.sol\\\";\\nimport {IERC1155} from \\\"../../shared/interfaces/IERC1155.sol\\\";\\nimport {IERC20} from \\\"../../shared/interfaces/IERC20.sol\\\";\\nimport {LibDistribute} from \\\"../../shared/libraries/LibDistribute.sol\\\";\\n\\nlibrary LibP0 {\\n    event P0_BaseMix_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed itemId,\\n        uint itemAmount,\\n        bool isLevelUp,\\n        uint payment\\n    );\\n\\n    event P0_PremiumMix_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed itemId,\\n        uint itemAmount,\\n        bool isLevelUp,\\n        uint payment,\\n        uint usePower\\n    );\\n\\n    event P0_ItemMerge_Event(\\n        address indexed to,\\n        uint indexed perfId,\\n        uint indexed itemId,\\n        uint itemAmount,\\n        uint payment,\\n        uint perfGrade,\\n        bytes perfURI\\n    );\\n\\n    event P0_AddProb_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed payment,\\n        uint addProb,\\n        uint[] perfs\\n    );\\n\\n    // uint payment\\n    function _baseMixCall(\\n        address _sender,\\n        uint _id,\\n        uint _useItemId\\n    ) internal returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        require(\\n            IERC721(s.contracts[\\\"aien\\\"]).ownerOf(_id) == _sender,\\n            \\\"not owner\\\"\\n        );\\n        IDB.aien memory _AIEN = IDB(s.contracts[\\\"db\\\"]).AIENS(_id);\\n\\n        require(s.p0_gradeInfos[_AIEN.p2Level].isOpen == true, \\\"not open\\\");\\n\\n        (\\n            address _influencer,\\n            address _agency,\\n            uint _influencerFee,\\n            uint _agencyFee\\n        ) = IDB(s.contracts[\\\"db\\\"])._levelUpCalcul(\\n                _useItemId,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n            );\\n\\n        IERC1155(s.contracts[\\\"item\\\"]).burn(_sender, _useItemId, 1);\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee,\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        if (_AIEN.p2Level == 0) {\\n            IDB(s.contracts[\\\"db\\\"])._levelUpSucess(_id, _AIEN.p2Level);\\n            emit P0_BaseMix_Event(\\n                _sender,\\n                _id,\\n                _useItemId,\\n                1,\\n                true,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n            );\\n            // emit MixCall(_id, 0, true, s.p0_gradeInfos[_AIEN.p2Level].mixFee);\\n\\n            return true;\\n        }\\n\\n        uint _random = __random(_sender);\\n\\n        // \\uc131\\uacf5\\uc2dc\\n        if (_random <= _AIEN.baseProb) {\\n            // \\uc131\\uacf5\\ub960 \\ucd08\\uae30\\ud654\\n            // \\ub808\\ubca8 \\uc0c1\\uc2b9\\n            IDB(s.contracts[\\\"db\\\"])._levelUpSucess(_id, _AIEN.p2Level);\\n        } else {\\n            // base\\uc131\\uacf5\\ub960\\uc5d0 \\ub79c\\ub364 \\uc131\\uacf5\\ub960 \\ucd94\\uac00\\n\\n            uint _randomAdd = __randomAddProb(\\n                _sender,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMax,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMin\\n            );\\n            // \\uacbd\\ud5d8\\uce58 \\uc0c1\\uc2b9\\n            // _AIEN[_id].baseProb += _randomAdd;\\n\\n            IDB(s.contracts[\\\"db\\\"])._levelUpFailed(_id, _randomAdd);\\n        }\\n\\n        // emit MixCall(\\n        //     _id,\\n        //     0,\\n        //     _random <= _AIEN.baseProb,\\n        //     s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        // );\\n        emit P0_BaseMix_Event(\\n            _sender,\\n            _id,\\n            _useItemId,\\n            1,\\n            _random <= _AIEN.baseProb,\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n        return true;\\n    }\\n\\n    function _premiumMixCall(\\n        address _sender,\\n        uint _aienId,\\n        uint _useItemId\\n    ) internal returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        IDB.aien memory _AIEN = IDB(s.contracts[\\\"db\\\"]).AIENS(_aienId);\\n\\n        require(_AIEN.p2Level != 0, \\\"not premium level\\\");\\n        require(s.p0_gradeInfos[_AIEN.p2Level].isOpen == true, \\\"not open\\\");\\n\\n        (\\n            address _influencer,\\n            address _agency,\\n            uint _influencerFee,\\n            uint _agencyFee\\n        ) = IDB(s.contracts[\\\"db\\\"])._levelUpCalcul(\\n                _useItemId,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n            );\\n\\n        IERC1155(s.contracts[\\\"item\\\"]).burn(_sender, _useItemId, 1);\\n\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee,\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        uint _random = __random(_sender);\\n        uint totalProb = 0;\\n        if (_AIEN.baseProb + _AIEN.addProb >= s.p0_states.maxProb) {\\n            // if (_AIEN.baseProb + _AIEN.addProb > _random) {\\n            totalProb = _AIEN.baseProb + _AIEN.addProb - s.p0_states.maxProb;\\n        }\\n\\n        if (_AIEN.baseProb + _AIEN.addProb >= _random) {\\n            emit P0_PremiumMix_Event(\\n                _sender,\\n                _aienId,\\n                _useItemId,\\n                1,\\n                true,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee,\\n                totalProb == 0 ? _AIEN.addProb : _AIEN.addProb - totalProb\\n            );\\n            // \\uc131\\uacf5\\ub960 \\ucd08\\uae30\\ud654\\n            // \\ub808\\ubca8 \\uc0c1\\uc2b9\\n            IDB(s.contracts[\\\"db\\\"])._successAienSet(\\n                _aienId,\\n                _AIEN.p2Level + 1,\\n                _AIEN.totalExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                _AIEN.influExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                s.p0_gradeInfos[_AIEN.p2Level].initBaseProb,\\n                totalProb\\n            );\\n        } else {\\n            emit P0_PremiumMix_Event(\\n                _sender,\\n                _aienId,\\n                _useItemId,\\n                1,\\n                false,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee,\\n                totalProb == 0 ? _AIEN.addProb : _AIEN.addProb - totalProb\\n            );\\n\\n            uint _randomAdd = __randomAddProb(\\n                _sender,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMax,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMin\\n            );\\n\\n            IDB(s.contracts[\\\"db\\\"])._failedAienSet(\\n                _aienId,\\n                _AIEN.totalExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                _AIEN.influExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                _AIEN.baseProb + _randomAdd,\\n                totalProb\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    function _itemMerge(\\n        address _sender,\\n        uint _itemId,\\n        uint _itemAmount\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint mergeFee;\\n        address _influencer;\\n        uint _influencerFee;\\n        address _agency;\\n        uint _agencyFee;\\n        uint _influencerItemAmount;\\n\\n        if (_itemId <= 50) {\\n            (\\n                mergeFee,\\n                _influencer,\\n                _influencerFee,\\n                _agency,\\n                _agencyFee,\\n                _influencerItemAmount\\n            ) = IDB(s.contracts[\\\"db\\\"])._mergeCalcul(_itemId);\\n        } else {\\n            (\\n                mergeFee,\\n                _influencer,\\n                _influencerFee,\\n                _agency,\\n                _agencyFee,\\n                _influencerItemAmount\\n            ) = IDB(s.contracts[\\\"db\\\"])._mergeCalcul2(_itemId);\\n        }\\n\\n        require(_itemAmount == _influencerItemAmount);\\n\\n        // merge \\ud560\\ub54c \\uce74\\uc6b4\\ud2b8 \\uc801\\uc6a9 \\ud568\\uc218\\n        IDB(s.contracts[\\\"db\\\"])._mergeCount(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee\\n        );\\n        //\\n        IERC1155(s.contracts[\\\"item\\\"]).burn(_sender, _itemId, _itemAmount);\\n\\n        // IERC20(PER).transferFrom(msg.sender, address(this), mergeFee);\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            mergeFee\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee,\\n            mergeFee\\n        );\\n\\n        (uint mintPfId, string memory _pfURI) = IDB(s.contracts[\\\"db\\\"])\\n            ._influencerMerge(_sender, _itemId, 0);\\n\\n        emit P0_ItemMerge_Event(\\n            _sender,\\n            mintPfId,\\n            _itemId,\\n            _itemAmount,\\n            mergeFee,\\n            1,\\n            bytes(_pfURI)\\n        );\\n    }\\n\\n    function _itemGradeMerge(\\n        address _sender,\\n        uint _itemId,\\n        uint _itemAmount,\\n        uint8 _grade\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        P0_MergePfGrade memory _mergePfGrade = s.p0_mergePfGrades[_grade];\\n\\n        require(_mergePfGrade.isOpen, \\\"PF Grade Merge function not open\\\");\\n\\n        uint mergeFee;\\n        address _influencer;\\n        uint _influencerFee;\\n        address _agency;\\n        uint _agencyFee;\\n        uint _influencerItemAmount;\\n\\n        if (_itemId <= 50) {\\n            (\\n                mergeFee,\\n                _influencer,\\n                _influencerFee,\\n                _agency,\\n                _agencyFee,\\n                _influencerItemAmount\\n            ) = IDB(s.contracts[\\\"db\\\"])._mergeCalcul(_itemId);\\n        } else {\\n            (\\n                mergeFee,\\n                _influencer,\\n                _influencerFee,\\n                _agency,\\n                _agencyFee,\\n                _influencerItemAmount\\n            ) = IDB(s.contracts[\\\"db\\\"])._mergeCalcul2(_itemId);\\n        }\\n\\n        require(_itemAmount == _influencerItemAmount);\\n\\n        // merge \\ud560\\ub54c \\uce74\\uc6b4\\ud2b8 \\uc801\\uc6a9 \\ud568\\uc218\\n        IDB(s.contracts[\\\"db\\\"])._mergeCount(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee\\n        );\\n        //\\n        IERC1155(s.contracts[\\\"item\\\"]).burn(_sender, _itemId, _itemAmount);\\n\\n        // IERC20(PER).transferFrom(msg.sender, address(this), mergeFee);\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            mergeFee\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee,\\n            mergeFee\\n        );\\n\\n        (uint mintPfId, string memory _pfURI) = IDB(s.contracts[\\\"db\\\"])\\n            ._influencerMerge(_sender, _itemId, 0);\\n\\n        emit P0_ItemMerge_Event(\\n            _sender,\\n            mintPfId,\\n            _itemId,\\n            _itemAmount,\\n            mergeFee,\\n            1,\\n            bytes(_pfURI)\\n        );\\n    }\\n\\n    function _addProbCall(\\n        address _sender,\\n        uint _aienId,\\n        uint[] memory _pf_Ids\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IERC721(s.contracts[\\\"aien\\\"]).ownerOf(_aienId) == _sender,\\n            \\\"not owner\\\"\\n        );\\n\\n        require(__checkDuplicates(_pf_Ids) == false, \\\"duplicate pf id\\\");\\n        require(\\n            __checkERC721sOwner(_sender, _pf_Ids) == true,\\n            \\\"not owner of perfriends\\\"\\n        );\\n        uint _gradeProb = __checkERC721sGrade(_pf_Ids);\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            s.p0_states.addProbFee * _pf_Ids.length\\n        );\\n\\n        for (uint i = 0; i < _pf_Ids.length; i++) {\\n            IERC721(s.contracts[\\\"perfriends\\\"]).burn(_pf_Ids[i]);\\n            IDB(s.contracts[\\\"db\\\"]).subPfGrades(_pf_Ids[i]);\\n        }\\n\\n        IDB.aien memory _AIEN = IDB(s.contracts[\\\"db\\\"]).AIENS(_aienId);\\n        IDB(s.contracts[\\\"db\\\"]).setAienAll(\\n            _aienId,\\n            _AIEN.mixCount,\\n            _AIEN.p2Level,\\n            _AIEN.totalExp + (s.p0_states.addProbExp * _pf_Ids.length),\\n            _AIEN.influExp,\\n            _AIEN.baseProb,\\n            0,\\n            _AIEN.isPFid,\\n            _AIEN.addProb + _gradeProb\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            s.contracts[\\\"team\\\"],\\n            (s.p0_states.addProbFee * _pf_Ids.length) / 10,\\n            s.contracts[\\\"team\\\"],\\n            0,\\n            s.p0_states.addProbFee * _pf_Ids.length\\n        );\\n\\n        emit P0_AddProb_Event(\\n            _sender,\\n            _aienId,\\n            s.p0_states.addProbFee,\\n            _gradeProb,\\n            _pf_Ids\\n        );\\n    }\\n\\n    // internal functions\\n    function __random(address _sender) internal returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        // if (s.orakl  ? oraklVRF() : nativeRF())\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(block.timestamp, _sender, block.coinbase)\\n        );\\n        return (uint(hash) % (s.p0_states.maxProb - 0 + 1)) + 0;\\n    }\\n\\n    function __randomAddProb(\\n        address _sender,\\n        uint _max,\\n        uint _min\\n    ) internal returns (uint) {\\n        // if (s.orakl  ? oraklVRF() : nativeRF())\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(block.timestamp, _sender, block.coinbase)\\n        );\\n        return (uint(hash) % (_max - _min + 1)) + _min;\\n    }\\n\\n    function __checkDuplicates(\\n        uint[] memory array\\n    ) internal pure returns (bool) {\\n        for (uint i = 0; i < array.length - 1; i++) {\\n            for (uint j = i + 1; j < array.length; j++) {\\n                if (array[i] == array[j]) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // \\ub2e4\\uc911 ERC721 owner\\ud655\\uc778\\n    function __checkERC721sOwner(\\n        address _owner,\\n        uint[] memory _ids\\n    ) internal view returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        for (uint i = 0; i < _ids.length; i++) {\\n            if (IERC721(s.contracts[\\\"perfriends\\\"]).ownerOf(_ids[i]) != _owner)\\n                return false;\\n        }\\n        return true;\\n    }\\n\\n    // \\ub2e4\\uc911 ERC721\\uc758 \\ub4f1\\uae09\\ubcc4 mixPFInfos \\ud569\\uc744 \\uad6c\\ud55c\\ub2e4.\\n    function __checkERC721sGrade(\\n        uint[] memory _ids\\n    ) internal view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint _gradeProb = 0;\\n        for (uint i = 0; i < _ids.length; i++) {\\n            _gradeProb += s\\n                .p0_perFriendsProbs[IDB(s.contracts[\\\"db\\\"]).PFS(_ids[i]).class]\\n                .gradeProb;\\n        }\\n        return _gradeProb;\\n    }\\n\\n    function _getAddProbFee() internal view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"p0\\\"]).addProbFee();\\n    }\\n\\n    function _getMergeState(uint _itemId) internal view returns (uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        (uint PerPrice, , , , , uint ItemAmount) = IDB(s.contracts[\\\"db\\\"])\\n            ._mergeCalcul(_itemId);\\n        return (PerPrice, ItemAmount);\\n    }\\n\\n    // function _mergeCalculate(\\n    //     uint _itemId,\\n    //     uint8 _grade\\n    // ) internal returns (uint, address, uint, address, uint, uint) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     P0_MergeState memory _mergeState = s.p0_mergeState;\\n    //     User memory _user = IDB(s.contracts[\\\"db\\\"]).getUserFromItem(_itemId);\\n    //     P0_MergePfGrade memory _mergePfGrade = s.p0_mergePfGrades[_grade];\\n\\n    //     address agency;\\n    //     address influencer;\\n    //     uint _influeIncome = _mergePfGrade.mergeFee * _mergePfGrade.influencerIncomePercent / 1e5;\\n    //     uint _agencyIncome = _mergePfGrade.mergeFee * _mergePfGrade.agencyIncomePercent / 1e5;\\n\\n    //     if(_itemId < 50){\\n    //         agency = s.contracts[\\\"team\\\"];\\n    //         influencer = s.contracts[\\\"team\\\"];\\n    //     } else {\\n    //         _user.agency == address(0) ? agency = s.contracts[\\\"team\\\"]\\n    //         influencer = _user.incomeAddr;\\n    //     }\\n\\n    //     return(_mergePfGrade.mergeFee, influencer, _influeIncome, agency, _agencyIncome, _mergePfGrade.mergeUseItemAmount);\\n\\n    // }\\n}\\n\",\"keccak256\":\"0xdb31c8ed561943fb7163aca324fe7fc4f20ffce896736a34d88247af5a49cda6\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xdc916985bab8246380c2188436b2e25e333d34e9fdc7bf3b0245f5bcc716e5dc\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC1155 {\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address account, uint256 id, uint256 value) external;\\n\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcbee42741d36c65c96f34a6e3e32ced2d36d50cd51dc3da21954e48b8bb6cf6e\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n//import \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\n/* interface IERC721 is IERC165 { */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function burn(uint256 _tokenId) external;\\n\\n    function safeMintByMinter(address _to) external;\\n\\n    function nextTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3dfb334f4ed930d3eb3b781f7605fe1ab071b54c66540e99c4e37c437ff4a93a\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IKlaySwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// 0xc6a2ad8cc6e4a7e08fc37cc5954be07d499e7654 KSP\\n// 0x7A74B3be679E194E1D6A0C29A343ef8D2a5AC876 Util\\ninterface IKlaySwap {\\n    function estimateSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] memory path\\n    ) external view returns (uint amountOut);\\n\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint amountA,\\n        address tokenB,\\n        uint amountB,\\n        address[] memory path\\n    ) external;\\n}\\n\\n\\n\\n\\n\",\"keccak256\":\"0xdf4506259a183c376f7e8dec594a1ea6dd1e07c6cf048c0a0ea1b5014e666cba\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\n// using EnumerableSet for EnumerableSet.AddressSet;\\n// i-Tez Structs\\n//- P0 struct\\nstruct P0_State {\\n    uint24 maxProb;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\uac1c\\ub2f9 \\uc218\\uc218\\ub8cc\\n    uint addProbFee;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\ud68d\\ub4dd \\uacbd\\ud5d8\\uce58\\n    uint16 addProbExp;\\n    // bool\\n    bool isVRF;\\n}\\nstruct P0_PerFriendsProb {\\n    string pfGrade;\\n    uint24 gradeProb;\\n}\\n\\nstruct P0_GradeInfo {\\n    // \\ub2e4\\uc74c level\\uc774 \\uc5f4\\ub838\\ub294\\uc9c0 \\ud655\\uc778\\n    bool isOpen;\\n    // level\\ubcc4 mix fee\\n    uint mixFee;\\n    // \\ub808\\ubca8\\uc5c5 \\uc131\\uacf5\\uc2dc level\\ubcc4 \\ucd08\\uae30 base \\ud655\\ub960\\n    uint24 initBaseProb;\\n    // level\\ubcc4 \\ucd94\\uac00 \\ud655\\ub960 \\ubc38\\ub7f0\\uc2a4 \\uc870\\uc815\\uac12\\n    uint16 mixExp;\\n    // level\\ubcc4 \\ud569\\uc131 \\uc2e4\\ud328\\uc2dc \\ucd94\\uac00 \\ud655\\ub960 min,max\\n    uint24 failedAddProbMin;\\n    // 1000 = 0.1%, 10000 = 0.01%\\n    uint24 failedAddProbMax;\\n}\\n\\nstruct P0_MergePfGrade {\\n    uint8 grade;\\n    string gradeName;\\n    uint mergeFee;\\n    uint mergeUseItemAmount;\\n    uint latestId;\\n    uint setMatadataId;\\n    bool isOpen;\\n}\\nstruct P0_MergeState {\\n    uint agencyIncomePercent;\\n    uint influencerIncomePercent;\\n    // 1e5 = 100%\\n    // uint maxIncomePercent;\\n}\\n// //- Distribute struct\\nstruct Distribute_State {\\n    uint beforeP2Usdt;\\n    uint beforeP2Per;\\n    uint beforeTeamUsdt;\\n    // distribute ratios\\n    uint24 p1Ratio;\\n    uint24 p2PerRatio;\\n    uint24 p2UsdtRatio;\\n    uint24 burnRatio;\\n    uint24 teamUsdtRatio;\\n}\\n// DB > Filtered User Struct\\nstruct User {\\n    // DB > idx\\n    uint userId;\\n    // token itme ID\\n    uint itemId;\\n    address incomeAddr;\\n    uint feeBalance;\\n    bool isAble;\\n    uint mintCount;\\n    uint useLevelupCount;\\n    uint useMergeCount;\\n    //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n    uint referralIncome;\\n    address agency;\\n    uint agencyIncome;\\n}\\n\\n// P0 End\\nstruct AppStorage {\\n    // address constants\\n    mapping(string => address) contracts;\\n    // i-Tez/////////////////////////////\\n    // P0 ///////////////////////////////\\n    P0_State p0_states;\\n    P0_GradeInfo[11] p0_gradeInfos;\\n    mapping(uint => P0_PerFriendsProb) p0_perFriendsProbs;\\n    /////////////////////////////////////\\n    // Distribute ///////////////////////\\n    Distribute_State distribute_states;\\n    uint aienMintFee;\\n    // Distribute\\n    uint ksSwapLimit;\\n    bool isAutoDistribute;\\n    // P0 - Item Merge Grade Infos\\n    mapping(uint8 => P0_MergePfGrade) p0_mergePfGrades;\\n    mapping(uint => string) pfMetaURI;\\n    P0_MergeState p0_mergeState;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\\n/**\\n@dev global modifier\\n */\\ncontract Modifiers {\\n    modifier onlyDev() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    // modifier checkRole(uint16 _role) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     require(\\n    //         s.roles[_role].accounts.contains(LibMeta.msgSender()),\\n    //         \\\"AccessControl: sender does not have required role\\\"\\n    //     );\\n    //     _;\\n    // }\\n}\\n\",\"keccak256\":\"0x39cfdb5aedd9674c863d4fbbbcb26f112e9a7885b7d3c09570e9511371c86823\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xaea50a523e0ff67f5fc59946320f11efcfc09c75a972788f2884b9d1198a83d9\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDistribute.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, LibAppStorage} from \\\"./LibAppStorage.sol\\\";\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {IKlaySwap} from \\\"../interfaces/IKlaySwap.sol\\\";\\nimport {IP2} from \\\"../../Channel_iN/interfaces/IP2.sol\\\";\\nimport {IP1} from \\\"../../Channel_iN/interfaces/IP1.sol\\\";\\n\\nlibrary LibDistribute {\\n    //\\n    //\\n    // \\u2500\\u2500\\u2500 P0 LV UP DISTRIBUTION \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    function p0LvUpDistribute(\\n        address _agency,\\n        uint _agencyAmount,\\n        address _influencer,\\n        uint _influencerAmount,\\n        uint _totalAmount\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        (\\n            uint p1Amount,\\n            uint p2Amount,\\n            uint burnAmount,\\n            uint teamAmountForUsdt,\\n            uint p2AmountForUsdt\\n        ) = distributeCalc(_totalAmount);\\n        address per = s.contracts[\\\"per\\\"];\\n\\n        IERC20(per).transfer(_agency, _agencyAmount);\\n        IERC20(per).transfer(_influencer, _influencerAmount);\\n        IERC20(per).transfer(s.contracts[\\\"burn\\\"], burnAmount);\\n        IERC20(per).transfer(s.contracts[\\\"p2\\\"], p2Amount);\\n        IERC20(per).transfer(s.contracts[\\\"p1\\\"], p1Amount);\\n        IP2(s.contracts[\\\"p2\\\"]).addPerUsdtDistribution(0, p2Amount);\\n        IP1(s.contracts[\\\"p1\\\"]).diamond_P1_addDistributionAmountAll(p1Amount);\\n\\n        // IERC20(PER).transfer(P1, )\\n        // \\ucd94\\uac00 \\ub418\\uc5b4\\uc57c\\ud560 \\uac83\\ub4e4\\n        // 1.P1 10% PER\\n        // 2.P2 20% PER\\n        // 3.Burn 1% PER\\n        s.distribute_states.beforeP2Per += p2Amount;\\n        s.distribute_states.beforeP2Usdt += p2AmountForUsdt;\\n        s.distribute_states.beforeTeamUsdt += teamAmountForUsdt;\\n    }\\n\\n    function distributeCalc(\\n        uint _amount\\n    ) internal view returns (uint, uint, uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint _p1Amount = (_amount * s.distribute_states.p1Ratio) / 100;\\n        uint _p2Amount = (_amount * s.distribute_states.p2PerRatio) / 100;\\n        uint _burnAmount = (_amount * s.distribute_states.burnRatio) / 100;\\n        uint _teamAmountForUsdt = (_amount *\\n            s.distribute_states.teamUsdtRatio) / 100;\\n        uint _p2AmountForUsdt = (_amount * s.distribute_states.p2UsdtRatio) /\\n            100;\\n        return (\\n            _p1Amount,\\n            _p2Amount,\\n            _burnAmount,\\n            _teamAmountForUsdt,\\n            _p2AmountForUsdt\\n        );\\n    }\\n\\n    function swapToDistribute() internal {\\n        (bool run, uint thisBalance, uint estimateUsdt) = isSwap();\\n        require(run == true, \\\"swapToDistribute: swap is not needed\\\");\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        address[] memory path;\\n\\n        IERC20(s.contracts[\\\"per\\\"]).approve(\\n            s.contracts[\\\"klayswap\\\"],\\n            thisBalance\\n        );\\n\\n        IKlaySwap(s.contracts[\\\"klayswap\\\"]).exchangeKctPos(\\n            s.contracts[\\\"per\\\"],\\n            thisBalance,\\n            s.contracts[\\\"usdt\\\"],\\n            estimateUsdt,\\n            path\\n        );\\n\\n        _swapToCalculate();\\n    }\\n\\n    function _swapToCalculate() internal returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint usdtBalance = IERC20(s.contracts[\\\"usdt\\\"]).balanceOf(address(this));\\n        uint calculatePercent = s.distribute_states.p2UsdtRatio +\\n            s.distribute_states.teamUsdtRatio;\\n\\n        uint _p2UsdtAmount = (usdtBalance * s.distribute_states.p2UsdtRatio) /\\n            calculatePercent;\\n        uint _teamUsdtAmount = (usdtBalance *\\n            s.distribute_states.teamUsdtRatio) / calculatePercent;\\n\\n        IERC20(s.contracts[\\\"usdt\\\"]).transfer(s.contracts[\\\"p2\\\"], _p2UsdtAmount);\\n\\n        IERC20(s.contracts[\\\"usdt\\\"]).transfer(\\n            s.contracts[\\\"team\\\"],\\n            _teamUsdtAmount\\n        );\\n\\n        IP2(s.contracts[\\\"p2\\\"]).addPerUsdtDistribution(\\n            _p2UsdtAmount,\\n            s.distribute_states.beforeP2Per\\n        );\\n\\n        s.distribute_states.beforeP2Per = 0;\\n        s.distribute_states.beforeP2Usdt = 0;\\n        s.distribute_states.beforeTeamUsdt = 0;\\n    }\\n\\n    function getDistributePrice() internal view returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.distribute_states.beforeP2Usdt,\\n            s.distribute_states.beforeP2Per,\\n            s.distribute_states.beforeTeamUsdt\\n        );\\n    }\\n\\n    // function p0_transferForDistribute() internal returns (uint, uint, uint) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     uint beforeP2Usdt = s.distribute_states.beforeP2Usdt;\\n    //     uint beforeP2Per = s.distribute_states.beforeP2Per;\\n    //     uint beforeTeamUsdt = s.distribute_states.beforeTeamUsdt;\\n    //     address per = s.contracts[\\\"per\\\"];\\n    //     // require(\\n    //     //     LibMeta.msgSender() == LibDiamond.enforceIsContractOwner(),\\n    //     //     \\\"you are not dev\\\"\\n    //     // );\\n    //     IERC20(per).transfer(\\n    //         LibMeta.msgSender(),\\n    //         beforeP2Usdt + beforeTeamUsdt\\n    //     );\\n    //     uint _beforeP2Usdt = beforeP2Usdt;\\n    //     uint _beforeP2Per = beforeP2Per;\\n    //     uint _beforeTeamUsdt = beforeTeamUsdt;\\n\\n    //     beforeP2Usdt = 0;\\n    //     beforeP2Per = 0;\\n    //     beforeTeamUsdt = 0;\\n\\n    //     return (_beforeP2Usdt, _beforeP2Per, _beforeTeamUsdt);\\n    // }\\n\\n    function isSwap() internal view returns (bool, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address[] memory path;\\n        uint _balance = IERC20(s.contracts[\\\"per\\\"]).balanceOf(address(this));\\n\\n        uint estimateUsdt = IKlaySwap(s.contracts[\\\"klayswaputil\\\"]).estimateSwap(\\n            s.contracts[\\\"per\\\"],\\n            s.contracts[\\\"usdt\\\"],\\n            _balance,\\n            path\\n        );\\n\\n        if (estimateUsdt > s.ksSwapLimit && s.isAutoDistribute == true) {\\n            return (true, _balance, estimateUsdt);\\n        } else {\\n            return (false, 0, 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce77e1d0c08372bd05129b0b7fe85b7b7ba29a83de5eff262d5b30f8b68f495d\",\"license\":\"UNLICENSED\"},\"contracts/shared/libraries/LibMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"\\n            )\\n        );\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194f61daa9d3c92ca3de358b76506dbb1e9e39211dc5b49768f18cc38f85b1ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506156dd80620000216000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063ce47adfa1161008c578063ddb2bedf11610066578063ddb2bedf1461022b578063e488a83a14610247578063f3ebac5714610277578063f6afa84714610295576100cf565b8063ce47adfa146101be578063d2236a54146101ef578063d229a3921461020d576100cf565b80630b0e517a146100d45780632b2dc69e146100f45780633576742f146101245780636a60affb146101425780636d1d105e1461015e5780637174e2581461018e575b600080fd5b6100dc6102c6565b6040516100eb93929190613bef565b60405180910390f35b61010e60048036038101906101099190613c73565b61038f565b60405161011b9190613e05565b60405180910390f35b61012c6104c3565b6040516101399190613e27565b60405180910390f35b61015c60048036038101906101579190613e6e565b610583565b005b61017860048036038101906101739190614009565b6105a1565b6040516101859190614074565b60405180910390f35b6101a860048036038101906101a3919061408f565b6105cd565b6040516101b59190614074565b60405180910390f35b6101d860048036038101906101d391906140cf565b6105fa565b6040516101e6929190614146565b60405180910390f35b6101f76106d0565b6040516102049190613e27565b60405180910390f35b6102156106df565b6040516102229190613e27565b60405180910390f35b6102456004803603810190610240919061408f565b61079f565b005b610261600480360381019061025c919061408f565b6107c8565b60405161026e9190614074565b60405180910390f35b61027f6107f6565b60405161028c9190613e27565b60405180910390f35b6102af60048036038101906102aa91906140cf565b610825565b6040516102bd929190614176565b60405180910390f35b6000806000806102d461083a565b9050806000016040516102e6906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9db98966040518163ffffffff1660e01b8152600401606060405180830381865afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190614220565b93509350935050909192565b610397613b94565b60006103a161083a565b905080602d0160008460ff1660ff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016001820180546103f6906142a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610422906142a2565b801561046f5780601f106104445761010080835404028352916020019161046f565b820191906000526020600020905b81548152906001019060200180831161045257829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050915050919050565b6000806104ce61083a565b9050806000016040516104e0906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663340c2acd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d91906142d3565b91505090565b600061058d61083f565b905061059b818585856108ef565b50505050565b6000806105ac61083a565b905060006105b861083f565b90506105c5818686610fb6565b505092915050565b6000806105d861083a565b905060006105e461083f565b90506105f181868661172f565b50505092915050565b606060008061060761083a565b9050806000016040516106199061434c565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316dba26f856040518263ffffffff1660e01b81526004016106809190613e27565b600060405180830381865afa15801561069d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106c69190614407565b9250925050915091565b60006106da6120bf565b905090565b6000806106ea61083a565b9050806000016040516106fc906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6e5f5006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079991906142d3565b91505090565b60006107a961083a565b905060006107b561083f565b90506107c281858561217f565b50505050565b6000806107d361083a565b905060006107df61083f565b90506107ec8186866126e4565b9250505092915050565b60008061080161083a565b90508060010160000160009054906101000a900462ffffff1662ffffff1691505090565b60008061083183612fef565b91509150915091565b600090565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036108e857600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff8183015116925050506108ec565b3390505b90565b60006108f961083a565b9050600081602d0160008460ff1660ff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182018054610950906142a2565b80601f016020809104026020016040519081016040528092919081815260200182805461097c906142a2565b80156109c95780601f1061099e576101008083540402835291602001916109c9565b820191906000526020600020905b8154815290600101906020018083116109ac57829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff16151515158152505090508060c00151610a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a52906144af565b60405180910390fd5b60008060008060008060328b11610b415787600001604051610a7c906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663738258938c6040518263ffffffff1660e01b8152600401610ae39190613e27565b60c060405180830381865afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b24919061452d565b809650819750829850839950849a50859b50505050505050610c12565b87600001604051610b51906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663357c498a8c6040518263ffffffff1660e01b8152600401610bb89190613e27565b60c060405180830381865afa158015610bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf9919061452d565b809650819750829850839950849a50859b505050505050505b808a14610c1e57600080fd5b87600001604051610c2e906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c4b4b42848488886040518563ffffffff1660e01b8152600401610c9b94939291906145c9565b600060405180830381600087803b158015610cb557600080fd5b505af1158015610cc9573d6000803e3d6000fd5b5050505087600001604051610cdd9061465a565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca8d8d8d6040518463ffffffff1660e01b8152600401610d489392919061466f565b600060405180830381600087803b158015610d6257600080fd5b505af1158015610d76573d6000803e3d6000fd5b5050505087600001604051610d8a906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8d8a600001604051610de590614753565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b8152600401610e3393929190614768565b6020604051808303816000875af1158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7691906147cb565b50610e84838387878a6130cf565b60008089600001604051610e97906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632b2e8efb8f8f60006040518463ffffffff1660e01b8152600401610f039392919061483d565b6000604051808303816000875af1158015610f22573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f4b9190614874565b915091508c828f73ffffffffffffffffffffffffffffffffffffffff167f2b5c6da75471a32fa816831df06c6a172203625ece9bf5c72a71f67c6aabff818f8c600187604051610f9e9493929190614960565b60405180910390a45050505050505050505050505050565b6000610fc061083a565b90508373ffffffffffffffffffffffffffffffffffffffff1681600001604051610fe9906149f8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016110509190613e27565b602060405180830381865afa15801561106d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110919190614a0d565b73ffffffffffffffffffffffffffffffffffffffff16146110e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110de90614a86565b60405180910390fd5b600015156110f48361362b565b151514611136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112d90614af2565b60405180910390fd5b6001151561114485846136cf565b151514611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117d90614b5e565b60405180910390fd5b600061119183613811565b9050816000016040516111a3906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd86846000016040516111fe90614753565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16865186600101600101546112419190614bad565b6040518463ffffffff1660e01b815260040161125f93929190614768565b6020604051808303816000875af115801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a291906147cb565b5060005b835181101561144257826000016040516112bf90614c3b565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c6885838151811061131c5761131b614c50565b5b60200260200101516040518263ffffffff1660e01b81526004016113409190613e27565b600060405180830381600087803b15801561135a57600080fd5b505af115801561136e573d6000803e3d6000fd5b5050505082600001604051611382906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2a6a0628583815181106113df576113de614c50565b5b60200260200101516040518263ffffffff1660e01b81526004016114039190613e27565b600060405180830381600087803b15801561141d57600080fd5b505af1158015611431573d6000803e3d6000fd5b5050505080806001019150506112a6565b50600082600001604051611455906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c4de8d7866040518263ffffffff1660e01b81526004016114bc9190613e27565b61012060405180830381865afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe9190614d64565b905082600001604051611510906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a02db9a0868360200151846040015188518860010160020160009054906101000a900461ffff1661ffff1661158b9190614bad565b866060015161159a9190614d92565b86608001518760a0015160008960e001518b8b61010001516115bc9190614d92565b6040518a63ffffffff1660e01b81526004016115e099989796959493929190614dc6565b600060405180830381600087803b1580156115fa57600080fd5b505af115801561160e573d6000803e3d6000fd5b505050506116ce8360000160405161162590614e9f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a8651866001016001015461166a9190614bad565b6116749190614ee3565b8560000160405161168490614e9f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000885188600101600101546116c99190614bad565b6130cf565b8260010160010154858773ffffffffffffffffffffffffffffffffffffffff167f99cb040f26b9f8ab0196325428931da1473bc4b7e3f5477d08e93c1713bc0513858860405161171f929190614fc3565b60405180910390a4505050505050565b60008061173a61083a565b905060008160000160405161174e906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c4de8d7866040518263ffffffff1660e01b81526004016117b59190613e27565b61012060405180830381865afa1580156117d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f79190614d64565b90506000816040015103611840576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118379061503f565b60405180910390fd5b60011515826004018260400151600b811061185e5761185d614c50565b5b6003020160000160009054906101000a900460ff161515146118b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ac906150ab565b60405180910390fd5b600080600080856000016040516118cb906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637bcb71a689886004018860400151600b81106119305761192f614c50565b5b60030201600101546040518363ffffffff1660e01b8152600401611955929190614176565b6080604051808303816000875af1158015611974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199891906150cb565b9350935093509350856000016040516119b09061465a565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca8b8a60016040518463ffffffff1660e01b8152600401611a1c93929190615132565b600060405180830381600087803b158015611a3657600080fd5b505af1158015611a4a573d6000803e3d6000fd5b5050505085600001604051611a5e906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8b88600001604051611ab990614753565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896004018960400151600b8110611b0257611b01614c50565b5b60030201600101546040518463ffffffff1660e01b8152600401611b2893929190614768565b6020604051808303816000875af1158015611b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6b91906147cb565b50611b9a838286858a6004018a60400151600b8110611b8d57611b8c614c50565b5b60030201600101546130cf565b6000611ba58b613952565b905060008760010160000160009054906101000a900462ffffff1662ffffff168761010001518860a00151611bda9190614d92565b10611c1d578760010160000160009054906101000a900462ffffff1662ffffff168761010001518860a00151611c109190614d92565b611c1a9190615169565b90505b818761010001518860a00151611c339190614d92565b10611e5057898b8d73ffffffffffffffffffffffffffffffffffffffff167f2204f6ff22d33db4677f6c4e555d9994ed7df4af0ae306770814a6e91d920c896001808d6004018d60400151600b8110611c8f57611c8e614c50565b5b600302016001015460008814611cb557878e6101000151611cb09190615169565b611cbc565b8d61010001515b604051611ccc949392919061519d565b60405180910390a487600001604051611ce4906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eab965818c60018a60400151611d409190614d92565b8b6004018b60400151600b8110611d5a57611d59614c50565b5b6003020160020160039054906101000a900461ffff1661ffff168b60600151611d839190614d92565b8c6004018c60400151600b8110611d9d57611d9c614c50565b5b6003020160020160039054906101000a900461ffff1661ffff168c60800151611dc69190614d92565b8d6004018d60400151600b8110611de057611ddf614c50565b5b6003020160020160009054906101000a900462ffffff16876040518763ffffffff1660e01b8152600401611e1996959493929190615222565b600060405180830381600087803b158015611e3357600080fd5b505af1158015611e47573d6000803e3d6000fd5b505050506120ac565b898b8d73ffffffffffffffffffffffffffffffffffffffff167f2204f6ff22d33db4677f6c4e555d9994ed7df4af0ae306770814a6e91d920c89600160008d6004018d60400151600b8110611ea857611ea7614c50565b5b600302016001015460008814611ece57878e6101000151611ec99190615169565b611ed5565b8d61010001515b604051611ee5949392919061519d565b60405180910390a46000611f648d8a6004018a60400151600b8110611f0d57611f0c614c50565b5b6003020160020160089054906101000a900462ffffff1662ffffff168b6004018b60400151600b8110611f4357611f42614c50565b5b6003020160020160059054906101000a900462ffffff1662ffffff166139e5565b905088600001604051611f76906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663588e8f858d8b6004018b60400151600b8110611fdb57611fda614c50565b5b6003020160020160039054906101000a900461ffff1661ffff168b606001516120049190614d92565b8c6004018c60400151600b811061201e5761201d614c50565b5b6003020160020160039054906101000a900461ffff1661ffff168c608001516120479190614d92565b858d60a001516120579190614d92565b876040518663ffffffff1660e01b8152600401612078959493929190615283565b600060405180830381600087803b15801561209257600080fd5b505af11580156120a6573d6000803e3d6000fd5b50505050505b6001985050505050505050509392505050565b6000806120ca61083a565b9050806000016040516120dc9061434c565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637aa085746040518163ffffffff1660e01b8152600401602060405180830381865afa158015612155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217991906142d3565b91505090565b600061218961083a565b90506000806000806000806032891161227157866000016040516121ac906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663738258938a6040518263ffffffff1660e01b81526004016122139190613e27565b60c060405180830381865afa158015612230573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612254919061452d565b809650819750829850839950849a50859b50505050505050612342565b86600001604051612281906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663357c498a8a6040518263ffffffff1660e01b81526004016122e89190613e27565b60c060405180830381865afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612329919061452d565b809650819750829850839950849a50859b505050505050505b80881461234e57600080fd5b8660000160405161235e906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c4b4b42848488886040518563ffffffff1660e01b81526004016123cb94939291906145c9565b600060405180830381600087803b1580156123e557600080fd5b505af11580156123f9573d6000803e3d6000fd5b505050508660000160405161240d9061465a565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca8b8b8b6040518463ffffffff1660e01b81526004016124789392919061466f565b600060405180830381600087803b15801561249257600080fd5b505af11580156124a6573d6000803e3d6000fd5b50505050866000016040516124ba906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8b8960000160405161251590614753565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b815260040161256393929190614768565b6020604051808303816000875af1158015612582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a691906147cb565b506125b4838387878a6130cf565b600080886000016040516125c7906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632b2e8efb8d8d60006040518463ffffffff1660e01b81526004016126339392919061483d565b6000604051808303816000875af1158015612652573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061267b9190614874565b915091508a828d73ffffffffffffffffffffffffffffffffffffffff167f2b5c6da75471a32fa816831df06c6a172203625ece9bf5c72a71f67c6aabff818d8c6001876040516126ce9493929190614960565b60405180910390a4505050505050505050505050565b6000806126ef61083a565b90508473ffffffffffffffffffffffffffffffffffffffff1681600001604051612718906149f8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b815260040161277f9190613e27565b602060405180830381865afa15801561279c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c09190614a0d565b73ffffffffffffffffffffffffffffffffffffffff1614612816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280d90614a86565b60405180910390fd5b600081600001604051612828906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c4de8d7866040518263ffffffff1660e01b815260040161288f9190613e27565b61012060405180830381865afa1580156128ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d19190614d64565b905060011515826004018260400151600b81106128f1576128f0614c50565b5b6003020160000160009054906101000a900460ff16151514612948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293f906150ab565b60405180910390fd5b6000806000808560000160405161295e906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637bcb71a689886004018860400151600b81106129c3576129c2614c50565b5b60030201600101546040518363ffffffff1660e01b81526004016129e8929190614176565b6080604051808303816000875af1158015612a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2b91906150cb565b935093509350935085600001604051612a439061465a565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca8b8a60016040518463ffffffff1660e01b8152600401612aaf93929190615132565b600060405180830381600087803b158015612ac957600080fd5b505af1158015612add573d6000803e3d6000fd5b5050505085600001604051612af1906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8b88600001604051612b4c90614753565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896004018960400151600b8110612b9557612b94614c50565b5b60030201600101546040518463ffffffff1660e01b8152600401612bbb93929190614768565b6020604051808303816000875af1158015612bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfe91906147cb565b50612c2d838286858a6004018a60400151600b8110612c2057612c1f614c50565b5b60030201600101546130cf565b6000856040015103612d6d5785600001604051612c49906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e1c1b2b8a87604001516040518363ffffffff1660e01b8152600401612cb6929190614176565b600060405180830381600087803b158015612cd057600080fd5b505af1158015612ce4573d6000803e3d6000fd5b5050505087898b73ffffffffffffffffffffffffffffffffffffffff167f9c2d00f9bd857ba01e3db2db9ad693ac6ada7c0d12cf673bddac07e2f52f93cf6001808b6004018b60400151600b8110612d3f57612d3e614c50565b5b6003020160010154604051612d56939291906152d6565b60405180910390a460019650505050505050612fe8565b6000612d788b613952565b90508560a001518111612e395786600001604051612d95906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e1c1b2b8b88604001516040518363ffffffff1660e01b8152600401612e02929190614176565b600060405180830381600087803b158015612e1c57600080fd5b505af1158015612e30573d6000803e3d6000fd5b50505050612f5f565b6000612eb08c896004018960400151600b8110612e5957612e58614c50565b5b6003020160020160089054906101000a900462ffffff1662ffffff168a6004018a60400151600b8110612e8f57612e8e614c50565b5b6003020160020160059054906101000a900462ffffff1662ffffff166139e5565b905087600001604051612ec2906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a76373c18c836040518363ffffffff1660e01b8152600401612f2b929190614176565b600060405180830381600087803b158015612f4557600080fd5b505af1158015612f59573d6000803e3d6000fd5b50505050505b888a8c73ffffffffffffffffffffffffffffffffffffffff167f9c2d00f9bd857ba01e3db2db9ad693ac6ada7c0d12cf673bddac07e2f52f93cf60018a60a001518611158c6004018c60400151600b8110612fbd57612fbc614c50565b5b6003020160010154604051612fd4939291906152d6565b60405180910390a460019750505050505050505b9392505050565b6000806000612ffc61083a565b905060008082600001604051613011906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373825893876040518263ffffffff1660e01b81526004016130789190613e27565b60c060405180830381865afa158015613095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b9919061452d565b9550505050509150818194509450505050915091565b60006130d961083a565b905060008060008060006130ec87613a50565b94509450945094509450600086600001604051613108906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8d8d6040518363ffffffff1660e01b815260040161317492919061530d565b6020604051808303816000875af1158015613193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b791906147cb565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8b8b6040518363ffffffff1660e01b81526004016131f392919061530d565b6020604051808303816000875af1158015613212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323691906147cb565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8860000160405161326390615382565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b81526004016132b092919061530d565b6020604051808303816000875af11580156132cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f391906147cb565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88600001604051613320906153e3565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518363ffffffff1660e01b815260040161336d92919061530d565b6020604051808303816000875af115801561338c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133b091906147cb565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb886000016040516133dd90615444565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040518363ffffffff1660e01b815260040161342a92919061530d565b6020604051808303816000875af1158015613449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061346d91906147cb565b508660000160405161347e906153e3565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b81d9a346000876040518363ffffffff1660e01b81526004016134e8929190615459565b600060405180830381600087803b15801561350257600080fd5b505af1158015613516573d6000803e3d6000fd5b505050508660000160405161352a90615444565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bc2fa3a876040518263ffffffff1660e01b81526004016135919190613e27565b600060405180830381600087803b1580156135ab57600080fd5b505af11580156135bf573d6000803e3d6000fd5b50505050848760260160010160008282546135da9190614d92565b92505081905550818760260160000160008282546135f89190614d92565b92505081905550828760260160020160008282546136169190614d92565b92505081905550505050505050505050505050565b600080600090505b600183516136419190615169565b8110156136c45760006001826136579190614d92565b90505b83518110156136b65783818151811061367657613675614c50565b5b602002602001015184838151811061369157613690614c50565b5b6020026020010151036136a9576001925050506136ca565b808060010191505061365a565b508080600101915050613633565b50600090505b919050565b6000806136da61083a565b905060005b8351811015613804578473ffffffffffffffffffffffffffffffffffffffff168260000160405161370f90614c3b565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e86848151811061376c5761376b614c50565b5b60200260200101516040518263ffffffff1660e01b81526004016137909190613e27565b602060405180830381865afa1580156137ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d19190614a0d565b73ffffffffffffffffffffffffffffffffffffffff16146137f75760009250505061380b565b80806001019150506136df565b5060019150505b92915050565b60008061381c61083a565b90506000805b84518110156139475782602501600084600001604051613841906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342ab880588858151811061389e5761389d614c50565b5b60200260200101516040518263ffffffff1660e01b81526004016138c29190613e27565b608060405180830381865afa1580156138df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390391906154fa565b60200151815260200190815260200160002060010160009054906101000a900462ffffff1662ffffff16826139389190614d92565b91508080600101915050613822565b508092505050919050565b60008061395d61083a565b90506000428441604051602001613976939291906155cb565b6040516020818303038152906040528051906020012090506000600160008460010160000160009054906101000a900462ffffff166139b59190615608565b6139bf919061563f565b62ffffff168260001c6139d29190615676565b6139dc9190614d92565b92505050919050565b6000804285416040516020016139fd939291906155cb565b6040516020818303038152906040528051906020012090508260018486613a249190615169565b613a2e9190614d92565b8260001c613a3c9190615676565b613a469190614d92565b9150509392505050565b600080600080600080613a6161083a565b9050600060648260260160030160009054906101000a900462ffffff1662ffffff1689613a8e9190614bad565b613a989190614ee3565b9050600060648360260160030160039054906101000a900462ffffff1662ffffff168a613ac59190614bad565b613acf9190614ee3565b9050600060648460260160030160099054906101000a900462ffffff1662ffffff168b613afc9190614bad565b613b069190614ee3565b90506000606485602601600301600c9054906101000a900462ffffff1662ffffff168c613b339190614bad565b613b3d9190614ee3565b9050600060648660260160030160069054906101000a900462ffffff1662ffffff168d613b6a9190614bad565b613b749190614ee3565b905084848484849a509a509a509a509a5050505050505091939590929450565b6040518060e00160405280600060ff16815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6000819050919050565b613be981613bd6565b82525050565b6000606082019050613c046000830186613be0565b613c116020830185613be0565b613c1e6040830184613be0565b949350505050565b6000604051905090565b600080fd5b600080fd5b600060ff82169050919050565b613c5081613c3a565b8114613c5b57600080fd5b50565b600081359050613c6d81613c47565b92915050565b600060208284031215613c8957613c88613c30565b5b6000613c9784828501613c5e565b91505092915050565b613ca981613c3a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ce9578082015181840152602081019050613cce565b60008484015250505050565b6000601f19601f8301169050919050565b6000613d1182613caf565b613d1b8185613cba565b9350613d2b818560208601613ccb565b613d3481613cf5565b840191505092915050565b613d4881613bd6565b82525050565b60008115159050919050565b613d6381613d4e565b82525050565b600060e083016000830151613d816000860182613ca0565b5060208301518482036020860152613d998282613d06565b9150506040830151613dae6040860182613d3f565b506060830151613dc16060860182613d3f565b506080830151613dd46080860182613d3f565b5060a0830151613de760a0860182613d3f565b5060c0830151613dfa60c0860182613d5a565b508091505092915050565b60006020820190508181036000830152613e1f8184613d69565b905092915050565b6000602082019050613e3c6000830184613be0565b92915050565b613e4b81613bd6565b8114613e5657600080fd5b50565b600081359050613e6881613e42565b92915050565b600080600060608486031215613e8757613e86613c30565b5b6000613e9586828701613e59565b9350506020613ea686828701613e59565b9250506040613eb786828701613c5e565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613efe82613cf5565b810181811067ffffffffffffffff82111715613f1d57613f1c613ec6565b5b80604052505050565b6000613f30613c26565b9050613f3c8282613ef5565b919050565b600067ffffffffffffffff821115613f5c57613f5b613ec6565b5b602082029050602081019050919050565b600080fd5b6000613f85613f8084613f41565b613f26565b90508083825260208201905060208402830185811115613fa857613fa7613f6d565b5b835b81811015613fd15780613fbd8882613e59565b845260208401935050602081019050613faa565b5050509392505050565b600082601f830112613ff057613fef613ec1565b5b8135614000848260208601613f72565b91505092915050565b600080604083850312156140205761401f613c30565b5b600061402e85828601613e59565b925050602083013567ffffffffffffffff81111561404f5761404e613c35565b5b61405b85828601613fdb565b9150509250929050565b61406e81613d4e565b82525050565b60006020820190506140896000830184614065565b92915050565b600080604083850312156140a6576140a5613c30565b5b60006140b485828601613e59565b92505060206140c585828601613e59565b9150509250929050565b6000602082840312156140e5576140e4613c30565b5b60006140f384828501613e59565b91505092915050565b600082825260208201905092915050565b600061411882613caf565b61412281856140fc565b9350614132818560208601613ccb565b61413b81613cf5565b840191505092915050565b60006040820190508181036000830152614160818561410d565b905061416f6020830184613be0565b9392505050565b600060408201905061418b6000830185613be0565b6141986020830184613be0565b9392505050565b600081905092915050565b7f6462000000000000000000000000000000000000000000000000000000000000600082015250565b60006141e060028361419f565b91506141eb826141aa565b600282019050919050565b6000614201826141d3565b9150819050919050565b60008151905061421a81613e42565b92915050565b60008060006060848603121561423957614238613c30565b5b60006142478682870161420b565b93505060206142588682870161420b565b92505060406142698682870161420b565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806142ba57607f821691505b6020821081036142cd576142cc614273565b5b50919050565b6000602082840312156142e9576142e8613c30565b5b60006142f78482850161420b565b91505092915050565b7f7030000000000000000000000000000000000000000000000000000000000000600082015250565b600061433660028361419f565b915061434182614300565b600282019050919050565b600061435782614329565b9150819050919050565b600080fd5b600067ffffffffffffffff82111561438157614380613ec6565b5b61438a82613cf5565b9050602081019050919050565b60006143aa6143a584614366565b613f26565b9050828152602081018484840111156143c6576143c5614361565b5b6143d1848285613ccb565b509392505050565b600082601f8301126143ee576143ed613ec1565b5b81516143fe848260208601614397565b91505092915050565b6000806040838503121561441e5761441d613c30565b5b600083015167ffffffffffffffff81111561443c5761443b613c35565b5b614448858286016143d9565b92505060206144598582860161420b565b9150509250929050565b7f5046204772616465204d657267652066756e6374696f6e206e6f74206f70656e600082015250565b60006144996020836140fc565b91506144a482614463565b602082019050919050565b600060208201905081810360008301526144c88161448c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006144fa826144cf565b9050919050565b61450a816144ef565b811461451557600080fd5b50565b60008151905061452781614501565b92915050565b60008060008060008060c0878903121561454a57614549613c30565b5b600061455889828a0161420b565b965050602061456989828a01614518565b955050604061457a89828a0161420b565b945050606061458b89828a01614518565b935050608061459c89828a0161420b565b92505060a06145ad89828a0161420b565b9150509295509295509295565b6145c3816144ef565b82525050565b60006080820190506145de60008301876145ba565b6145eb6020830186613be0565b6145f860408301856145ba565b6146056060830184613be0565b95945050505050565b7f6974656d00000000000000000000000000000000000000000000000000000000600082015250565b600061464460048361419f565b915061464f8261460e565b600482019050919050565b600061466582614637565b9150819050919050565b600060608201905061468460008301866145ba565b6146916020830185613be0565b61469e6040830184613be0565b949350505050565b7f7065720000000000000000000000000000000000000000000000000000000000600082015250565b60006146dc60038361419f565b91506146e7826146a6565b600382019050919050565b60006146fd826146cf565b9150819050919050565b7f6469737472696275746500000000000000000000000000000000000000000000600082015250565b600061473d600a8361419f565b915061474882614707565b600a82019050919050565b600061475e82614730565b9150819050919050565b600060608201905061477d60008301866145ba565b61478a60208301856145ba565b6147976040830184613be0565b949350505050565b6147a881613d4e565b81146147b357600080fd5b50565b6000815190506147c58161479f565b92915050565b6000602082840312156147e1576147e0613c30565b5b60006147ef848285016147b6565b91505092915050565b6000819050919050565b6000819050919050565b600061482761482261481d846147f8565b614802565b613bd6565b9050919050565b6148378161480c565b82525050565b600060608201905061485260008301866145ba565b61485f6020830185613be0565b61486c604083018461482e565b949350505050565b6000806040838503121561488b5761488a613c30565b5b60006148998582860161420b565b925050602083015167ffffffffffffffff8111156148ba576148b9613c35565b5b6148c6858286016143d9565b9150509250929050565b6000819050919050565b60006148f56148f06148eb846148d0565b614802565b613bd6565b9050919050565b614905816148da565b82525050565b600081519050919050565b600082825260208201905092915050565b60006149328261490b565b61493c8185614916565b935061494c818560208601613ccb565b61495581613cf5565b840191505092915050565b60006080820190506149756000830187613be0565b6149826020830186613be0565b61498f60408301856148fc565b81810360608301526149a18184614927565b905095945050505050565b7f6169656e00000000000000000000000000000000000000000000000000000000600082015250565b60006149e260048361419f565b91506149ed826149ac565b600482019050919050565b6000614a03826149d5565b9150819050919050565b600060208284031215614a2357614a22613c30565b5b6000614a3184828501614518565b91505092915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000614a706009836140fc565b9150614a7b82614a3a565b602082019050919050565b60006020820190508181036000830152614a9f81614a63565b9050919050565b7f6475706c69636174652070662069640000000000000000000000000000000000600082015250565b6000614adc600f836140fc565b9150614ae782614aa6565b602082019050919050565b60006020820190508181036000830152614b0b81614acf565b9050919050565b7f6e6f74206f776e6572206f6620706572667269656e6473000000000000000000600082015250565b6000614b486017836140fc565b9150614b5382614b12565b602082019050919050565b60006020820190508181036000830152614b7781614b3b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614bb882613bd6565b9150614bc383613bd6565b9250828202614bd181613bd6565b91508282048414831517614be857614be7614b7e565b5b5092915050565b7f706572667269656e647300000000000000000000000000000000000000000000600082015250565b6000614c25600a8361419f565b9150614c3082614bef565b600a82019050919050565b6000614c4682614c18565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b60006101208284031215614c9b57614c9a614c7f565b5b614ca6610120613f26565b90506000614cb68482850161420b565b6000830152506020614cca8482850161420b565b6020830152506040614cde8482850161420b565b6040830152506060614cf28482850161420b565b6060830152506080614d068482850161420b565b60808301525060a0614d1a8482850161420b565b60a08301525060c0614d2e8482850161420b565b60c08301525060e0614d428482850161420b565b60e083015250610100614d578482850161420b565b6101008301525092915050565b60006101208284031215614d7b57614d7a613c30565b5b6000614d8984828501614c84565b91505092915050565b6000614d9d82613bd6565b9150614da883613bd6565b9250828201905080821115614dc057614dbf614b7e565b5b92915050565b600061012082019050614ddc600083018c613be0565b614de9602083018b613be0565b614df6604083018a613be0565b614e036060830189613be0565b614e106080830188613be0565b614e1d60a0830187613be0565b614e2a60c083018661482e565b614e3760e0830185613be0565b614e45610100830184613be0565b9a9950505050505050505050565b7f7465616d00000000000000000000000000000000000000000000000000000000600082015250565b6000614e8960048361419f565b9150614e9482614e53565b600482019050919050565b6000614eaa82614e7c565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614eee82613bd6565b9150614ef983613bd6565b925082614f0957614f08614eb4565b5b828204905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000614f4c8383613d3f565b60208301905092915050565b6000602082019050919050565b6000614f7082614f14565b614f7a8185614f1f565b9350614f8583614f30565b8060005b83811015614fb6578151614f9d8882614f40565b9750614fa883614f58565b925050600181019050614f89565b5085935050505092915050565b6000604082019050614fd86000830185613be0565b8181036020830152614fea8184614f65565b90509392505050565b7f6e6f74207072656d69756d206c6576656c000000000000000000000000000000600082015250565b60006150296011836140fc565b915061503482614ff3565b602082019050919050565b600060208201905081810360008301526150588161501c565b9050919050565b7f6e6f74206f70656e000000000000000000000000000000000000000000000000600082015250565b60006150956008836140fc565b91506150a08261505f565b602082019050919050565b600060208201905081810360008301526150c481615088565b9050919050565b600080600080608085870312156150e5576150e4613c30565b5b60006150f387828801614518565b945050602061510487828801614518565b93505060406151158782880161420b565b92505060606151268782880161420b565b91505092959194509250565b600060608201905061514760008301866145ba565b6151546020830185613be0565b61516160408301846148fc565b949350505050565b600061517482613bd6565b915061517f83613bd6565b925082820390508181111561519757615196614b7e565b5b92915050565b60006080820190506151b260008301876148fc565b6151bf6020830186614065565b6151cc6040830185613be0565b6151d96060830184613be0565b95945050505050565b600062ffffff82169050919050565b600061520c615207615202846151e2565b614802565b613bd6565b9050919050565b61521c816151f1565b82525050565b600060c0820190506152376000830189613be0565b6152446020830188613be0565b6152516040830187613be0565b61525e6060830186613be0565b61526b6080830185615213565b61527860a0830184613be0565b979650505050505050565b600060a0820190506152986000830188613be0565b6152a56020830187613be0565b6152b26040830186613be0565b6152bf6060830185613be0565b6152cc6080830184613be0565b9695505050505050565b60006060820190506152eb60008301866148fc565b6152f86020830185614065565b6153056040830184613be0565b949350505050565b600060408201905061532260008301856145ba565b61532f6020830184613be0565b9392505050565b7f6275726e00000000000000000000000000000000000000000000000000000000600082015250565b600061536c60048361419f565b915061537782615336565b600482019050919050565b600061538d8261535f565b9150819050919050565b7f7032000000000000000000000000000000000000000000000000000000000000600082015250565b60006153cd60028361419f565b91506153d882615397565b600282019050919050565b60006153ee826153c0565b9150819050919050565b7f7031000000000000000000000000000000000000000000000000000000000000600082015250565b600061542e60028361419f565b9150615439826153f8565b600282019050919050565b600061544f82615421565b9150819050919050565b600060408201905061546e600083018561482e565b61547b6020830184613be0565b9392505050565b60006080828403121561549857615497614c7f565b5b6154a26080613f26565b905060006154b28482850161420b565b60008301525060206154c68482850161420b565b60208301525060406154da848285016147b6565b60408301525060606154ee8482850161420b565b60608301525092915050565b6000608082840312156155105761550f613c30565b5b600061551e84828501615482565b91505092915050565b6000819050919050565b61554261553d82613bd6565b615527565b82525050565b60008160601b9050919050565b600061556082615548565b9050919050565b600061557282615555565b9050919050565b61558a615585826144ef565b615567565b82525050565b600061559b826144cf565b9050919050565b60006155ad82615555565b9050919050565b6155c56155c082615590565b6155a2565b82525050565b60006155d78286615531565b6020820191506155e78285615579565b6014820191506155f782846155b4565b601482019150819050949350505050565b6000615613826151e2565b915061561e836151e2565b9250828203905062ffffff81111561563957615638614b7e565b5b92915050565b600061564a826151e2565b9150615655836151e2565b9250828201905062ffffff8111156156705761566f614b7e565b5b92915050565b600061568182613bd6565b915061568c83613bd6565b92508261569c5761569b614eb4565b5b82820690509291505056fea2646970667358221220da97ce03239ffb5441a54a440a3cf4a769f703ca10e2e787aaefc3a17bc8ae2064736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063ce47adfa1161008c578063ddb2bedf11610066578063ddb2bedf1461022b578063e488a83a14610247578063f3ebac5714610277578063f6afa84714610295576100cf565b8063ce47adfa146101be578063d2236a54146101ef578063d229a3921461020d576100cf565b80630b0e517a146100d45780632b2dc69e146100f45780633576742f146101245780636a60affb146101425780636d1d105e1461015e5780637174e2581461018e575b600080fd5b6100dc6102c6565b6040516100eb93929190613bef565b60405180910390f35b61010e60048036038101906101099190613c73565b61038f565b60405161011b9190613e05565b60405180910390f35b61012c6104c3565b6040516101399190613e27565b60405180910390f35b61015c60048036038101906101579190613e6e565b610583565b005b61017860048036038101906101739190614009565b6105a1565b6040516101859190614074565b60405180910390f35b6101a860048036038101906101a3919061408f565b6105cd565b6040516101b59190614074565b60405180910390f35b6101d860048036038101906101d391906140cf565b6105fa565b6040516101e6929190614146565b60405180910390f35b6101f76106d0565b6040516102049190613e27565b60405180910390f35b6102156106df565b6040516102229190613e27565b60405180910390f35b6102456004803603810190610240919061408f565b61079f565b005b610261600480360381019061025c919061408f565b6107c8565b60405161026e9190614074565b60405180910390f35b61027f6107f6565b60405161028c9190613e27565b60405180910390f35b6102af60048036038101906102aa91906140cf565b610825565b6040516102bd929190614176565b60405180910390f35b6000806000806102d461083a565b9050806000016040516102e6906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9db98966040518163ffffffff1660e01b8152600401606060405180830381865afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190614220565b93509350935050909192565b610397613b94565b60006103a161083a565b905080602d0160008460ff1660ff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016001820180546103f6906142a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610422906142a2565b801561046f5780601f106104445761010080835404028352916020019161046f565b820191906000526020600020905b81548152906001019060200180831161045257829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050915050919050565b6000806104ce61083a565b9050806000016040516104e0906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663340c2acd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d91906142d3565b91505090565b600061058d61083f565b905061059b818585856108ef565b50505050565b6000806105ac61083a565b905060006105b861083f565b90506105c5818686610fb6565b505092915050565b6000806105d861083a565b905060006105e461083f565b90506105f181868661172f565b50505092915050565b606060008061060761083a565b9050806000016040516106199061434c565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316dba26f856040518263ffffffff1660e01b81526004016106809190613e27565b600060405180830381865afa15801561069d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106c69190614407565b9250925050915091565b60006106da6120bf565b905090565b6000806106ea61083a565b9050806000016040516106fc906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6e5f5006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079991906142d3565b91505090565b60006107a961083a565b905060006107b561083f565b90506107c281858561217f565b50505050565b6000806107d361083a565b905060006107df61083f565b90506107ec8186866126e4565b9250505092915050565b60008061080161083a565b90508060010160000160009054906101000a900462ffffff1662ffffff1691505090565b60008061083183612fef565b91509150915091565b600090565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036108e857600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff8183015116925050506108ec565b3390505b90565b60006108f961083a565b9050600081602d0160008460ff1660ff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182018054610950906142a2565b80601f016020809104026020016040519081016040528092919081815260200182805461097c906142a2565b80156109c95780601f1061099e576101008083540402835291602001916109c9565b820191906000526020600020905b8154815290600101906020018083116109ac57829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff16151515158152505090508060c00151610a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a52906144af565b60405180910390fd5b60008060008060008060328b11610b415787600001604051610a7c906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663738258938c6040518263ffffffff1660e01b8152600401610ae39190613e27565b60c060405180830381865afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b24919061452d565b809650819750829850839950849a50859b50505050505050610c12565b87600001604051610b51906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663357c498a8c6040518263ffffffff1660e01b8152600401610bb89190613e27565b60c060405180830381865afa158015610bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf9919061452d565b809650819750829850839950849a50859b505050505050505b808a14610c1e57600080fd5b87600001604051610c2e906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c4b4b42848488886040518563ffffffff1660e01b8152600401610c9b94939291906145c9565b600060405180830381600087803b158015610cb557600080fd5b505af1158015610cc9573d6000803e3d6000fd5b5050505087600001604051610cdd9061465a565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca8d8d8d6040518463ffffffff1660e01b8152600401610d489392919061466f565b600060405180830381600087803b158015610d6257600080fd5b505af1158015610d76573d6000803e3d6000fd5b5050505087600001604051610d8a906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8d8a600001604051610de590614753565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b8152600401610e3393929190614768565b6020604051808303816000875af1158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7691906147cb565b50610e84838387878a6130cf565b60008089600001604051610e97906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632b2e8efb8f8f60006040518463ffffffff1660e01b8152600401610f039392919061483d565b6000604051808303816000875af1158015610f22573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f4b9190614874565b915091508c828f73ffffffffffffffffffffffffffffffffffffffff167f2b5c6da75471a32fa816831df06c6a172203625ece9bf5c72a71f67c6aabff818f8c600187604051610f9e9493929190614960565b60405180910390a45050505050505050505050505050565b6000610fc061083a565b90508373ffffffffffffffffffffffffffffffffffffffff1681600001604051610fe9906149f8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016110509190613e27565b602060405180830381865afa15801561106d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110919190614a0d565b73ffffffffffffffffffffffffffffffffffffffff16146110e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110de90614a86565b60405180910390fd5b600015156110f48361362b565b151514611136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112d90614af2565b60405180910390fd5b6001151561114485846136cf565b151514611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117d90614b5e565b60405180910390fd5b600061119183613811565b9050816000016040516111a3906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd86846000016040516111fe90614753565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16865186600101600101546112419190614bad565b6040518463ffffffff1660e01b815260040161125f93929190614768565b6020604051808303816000875af115801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a291906147cb565b5060005b835181101561144257826000016040516112bf90614c3b565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c6885838151811061131c5761131b614c50565b5b60200260200101516040518263ffffffff1660e01b81526004016113409190613e27565b600060405180830381600087803b15801561135a57600080fd5b505af115801561136e573d6000803e3d6000fd5b5050505082600001604051611382906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2a6a0628583815181106113df576113de614c50565b5b60200260200101516040518263ffffffff1660e01b81526004016114039190613e27565b600060405180830381600087803b15801561141d57600080fd5b505af1158015611431573d6000803e3d6000fd5b5050505080806001019150506112a6565b50600082600001604051611455906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c4de8d7866040518263ffffffff1660e01b81526004016114bc9190613e27565b61012060405180830381865afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe9190614d64565b905082600001604051611510906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a02db9a0868360200151846040015188518860010160020160009054906101000a900461ffff1661ffff1661158b9190614bad565b866060015161159a9190614d92565b86608001518760a0015160008960e001518b8b61010001516115bc9190614d92565b6040518a63ffffffff1660e01b81526004016115e099989796959493929190614dc6565b600060405180830381600087803b1580156115fa57600080fd5b505af115801561160e573d6000803e3d6000fd5b505050506116ce8360000160405161162590614e9f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a8651866001016001015461166a9190614bad565b6116749190614ee3565b8560000160405161168490614e9f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000885188600101600101546116c99190614bad565b6130cf565b8260010160010154858773ffffffffffffffffffffffffffffffffffffffff167f99cb040f26b9f8ab0196325428931da1473bc4b7e3f5477d08e93c1713bc0513858860405161171f929190614fc3565b60405180910390a4505050505050565b60008061173a61083a565b905060008160000160405161174e906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c4de8d7866040518263ffffffff1660e01b81526004016117b59190613e27565b61012060405180830381865afa1580156117d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f79190614d64565b90506000816040015103611840576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118379061503f565b60405180910390fd5b60011515826004018260400151600b811061185e5761185d614c50565b5b6003020160000160009054906101000a900460ff161515146118b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ac906150ab565b60405180910390fd5b600080600080856000016040516118cb906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637bcb71a689886004018860400151600b81106119305761192f614c50565b5b60030201600101546040518363ffffffff1660e01b8152600401611955929190614176565b6080604051808303816000875af1158015611974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199891906150cb565b9350935093509350856000016040516119b09061465a565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca8b8a60016040518463ffffffff1660e01b8152600401611a1c93929190615132565b600060405180830381600087803b158015611a3657600080fd5b505af1158015611a4a573d6000803e3d6000fd5b5050505085600001604051611a5e906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8b88600001604051611ab990614753565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896004018960400151600b8110611b0257611b01614c50565b5b60030201600101546040518463ffffffff1660e01b8152600401611b2893929190614768565b6020604051808303816000875af1158015611b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6b91906147cb565b50611b9a838286858a6004018a60400151600b8110611b8d57611b8c614c50565b5b60030201600101546130cf565b6000611ba58b613952565b905060008760010160000160009054906101000a900462ffffff1662ffffff168761010001518860a00151611bda9190614d92565b10611c1d578760010160000160009054906101000a900462ffffff1662ffffff168761010001518860a00151611c109190614d92565b611c1a9190615169565b90505b818761010001518860a00151611c339190614d92565b10611e5057898b8d73ffffffffffffffffffffffffffffffffffffffff167f2204f6ff22d33db4677f6c4e555d9994ed7df4af0ae306770814a6e91d920c896001808d6004018d60400151600b8110611c8f57611c8e614c50565b5b600302016001015460008814611cb557878e6101000151611cb09190615169565b611cbc565b8d61010001515b604051611ccc949392919061519d565b60405180910390a487600001604051611ce4906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eab965818c60018a60400151611d409190614d92565b8b6004018b60400151600b8110611d5a57611d59614c50565b5b6003020160020160039054906101000a900461ffff1661ffff168b60600151611d839190614d92565b8c6004018c60400151600b8110611d9d57611d9c614c50565b5b6003020160020160039054906101000a900461ffff1661ffff168c60800151611dc69190614d92565b8d6004018d60400151600b8110611de057611ddf614c50565b5b6003020160020160009054906101000a900462ffffff16876040518763ffffffff1660e01b8152600401611e1996959493929190615222565b600060405180830381600087803b158015611e3357600080fd5b505af1158015611e47573d6000803e3d6000fd5b505050506120ac565b898b8d73ffffffffffffffffffffffffffffffffffffffff167f2204f6ff22d33db4677f6c4e555d9994ed7df4af0ae306770814a6e91d920c89600160008d6004018d60400151600b8110611ea857611ea7614c50565b5b600302016001015460008814611ece57878e6101000151611ec99190615169565b611ed5565b8d61010001515b604051611ee5949392919061519d565b60405180910390a46000611f648d8a6004018a60400151600b8110611f0d57611f0c614c50565b5b6003020160020160089054906101000a900462ffffff1662ffffff168b6004018b60400151600b8110611f4357611f42614c50565b5b6003020160020160059054906101000a900462ffffff1662ffffff166139e5565b905088600001604051611f76906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663588e8f858d8b6004018b60400151600b8110611fdb57611fda614c50565b5b6003020160020160039054906101000a900461ffff1661ffff168b606001516120049190614d92565b8c6004018c60400151600b811061201e5761201d614c50565b5b6003020160020160039054906101000a900461ffff1661ffff168c608001516120479190614d92565b858d60a001516120579190614d92565b876040518663ffffffff1660e01b8152600401612078959493929190615283565b600060405180830381600087803b15801561209257600080fd5b505af11580156120a6573d6000803e3d6000fd5b50505050505b6001985050505050505050509392505050565b6000806120ca61083a565b9050806000016040516120dc9061434c565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637aa085746040518163ffffffff1660e01b8152600401602060405180830381865afa158015612155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217991906142d3565b91505090565b600061218961083a565b90506000806000806000806032891161227157866000016040516121ac906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663738258938a6040518263ffffffff1660e01b81526004016122139190613e27565b60c060405180830381865afa158015612230573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612254919061452d565b809650819750829850839950849a50859b50505050505050612342565b86600001604051612281906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663357c498a8a6040518263ffffffff1660e01b81526004016122e89190613e27565b60c060405180830381865afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612329919061452d565b809650819750829850839950849a50859b505050505050505b80881461234e57600080fd5b8660000160405161235e906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c4b4b42848488886040518563ffffffff1660e01b81526004016123cb94939291906145c9565b600060405180830381600087803b1580156123e557600080fd5b505af11580156123f9573d6000803e3d6000fd5b505050508660000160405161240d9061465a565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca8b8b8b6040518463ffffffff1660e01b81526004016124789392919061466f565b600060405180830381600087803b15801561249257600080fd5b505af11580156124a6573d6000803e3d6000fd5b50505050866000016040516124ba906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8b8960000160405161251590614753565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b815260040161256393929190614768565b6020604051808303816000875af1158015612582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a691906147cb565b506125b4838387878a6130cf565b600080886000016040516125c7906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632b2e8efb8d8d60006040518463ffffffff1660e01b81526004016126339392919061483d565b6000604051808303816000875af1158015612652573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061267b9190614874565b915091508a828d73ffffffffffffffffffffffffffffffffffffffff167f2b5c6da75471a32fa816831df06c6a172203625ece9bf5c72a71f67c6aabff818d8c6001876040516126ce9493929190614960565b60405180910390a4505050505050505050505050565b6000806126ef61083a565b90508473ffffffffffffffffffffffffffffffffffffffff1681600001604051612718906149f8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b815260040161277f9190613e27565b602060405180830381865afa15801561279c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c09190614a0d565b73ffffffffffffffffffffffffffffffffffffffff1614612816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280d90614a86565b60405180910390fd5b600081600001604051612828906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c4de8d7866040518263ffffffff1660e01b815260040161288f9190613e27565b61012060405180830381865afa1580156128ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d19190614d64565b905060011515826004018260400151600b81106128f1576128f0614c50565b5b6003020160000160009054906101000a900460ff16151514612948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293f906150ab565b60405180910390fd5b6000806000808560000160405161295e906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637bcb71a689886004018860400151600b81106129c3576129c2614c50565b5b60030201600101546040518363ffffffff1660e01b81526004016129e8929190614176565b6080604051808303816000875af1158015612a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2b91906150cb565b935093509350935085600001604051612a439061465a565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca8b8a60016040518463ffffffff1660e01b8152600401612aaf93929190615132565b600060405180830381600087803b158015612ac957600080fd5b505af1158015612add573d6000803e3d6000fd5b5050505085600001604051612af1906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8b88600001604051612b4c90614753565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896004018960400151600b8110612b9557612b94614c50565b5b60030201600101546040518463ffffffff1660e01b8152600401612bbb93929190614768565b6020604051808303816000875af1158015612bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfe91906147cb565b50612c2d838286858a6004018a60400151600b8110612c2057612c1f614c50565b5b60030201600101546130cf565b6000856040015103612d6d5785600001604051612c49906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e1c1b2b8a87604001516040518363ffffffff1660e01b8152600401612cb6929190614176565b600060405180830381600087803b158015612cd057600080fd5b505af1158015612ce4573d6000803e3d6000fd5b5050505087898b73ffffffffffffffffffffffffffffffffffffffff167f9c2d00f9bd857ba01e3db2db9ad693ac6ada7c0d12cf673bddac07e2f52f93cf6001808b6004018b60400151600b8110612d3f57612d3e614c50565b5b6003020160010154604051612d56939291906152d6565b60405180910390a460019650505050505050612fe8565b6000612d788b613952565b90508560a001518111612e395786600001604051612d95906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e1c1b2b8b88604001516040518363ffffffff1660e01b8152600401612e02929190614176565b600060405180830381600087803b158015612e1c57600080fd5b505af1158015612e30573d6000803e3d6000fd5b50505050612f5f565b6000612eb08c896004018960400151600b8110612e5957612e58614c50565b5b6003020160020160089054906101000a900462ffffff1662ffffff168a6004018a60400151600b8110612e8f57612e8e614c50565b5b6003020160020160059054906101000a900462ffffff1662ffffff166139e5565b905087600001604051612ec2906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a76373c18c836040518363ffffffff1660e01b8152600401612f2b929190614176565b600060405180830381600087803b158015612f4557600080fd5b505af1158015612f59573d6000803e3d6000fd5b50505050505b888a8c73ffffffffffffffffffffffffffffffffffffffff167f9c2d00f9bd857ba01e3db2db9ad693ac6ada7c0d12cf673bddac07e2f52f93cf60018a60a001518611158c6004018c60400151600b8110612fbd57612fbc614c50565b5b6003020160010154604051612fd4939291906152d6565b60405180910390a460019750505050505050505b9392505050565b6000806000612ffc61083a565b905060008082600001604051613011906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373825893876040518263ffffffff1660e01b81526004016130789190613e27565b60c060405180830381865afa158015613095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b9919061452d565b9550505050509150818194509450505050915091565b60006130d961083a565b905060008060008060006130ec87613a50565b94509450945094509450600086600001604051613108906146f2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8d8d6040518363ffffffff1660e01b815260040161317492919061530d565b6020604051808303816000875af1158015613193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b791906147cb565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8b8b6040518363ffffffff1660e01b81526004016131f392919061530d565b6020604051808303816000875af1158015613212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323691906147cb565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8860000160405161326390615382565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b81526004016132b092919061530d565b6020604051808303816000875af11580156132cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f391906147cb565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88600001604051613320906153e3565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518363ffffffff1660e01b815260040161336d92919061530d565b6020604051808303816000875af115801561338c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133b091906147cb565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb886000016040516133dd90615444565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040518363ffffffff1660e01b815260040161342a92919061530d565b6020604051808303816000875af1158015613449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061346d91906147cb565b508660000160405161347e906153e3565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b81d9a346000876040518363ffffffff1660e01b81526004016134e8929190615459565b600060405180830381600087803b15801561350257600080fd5b505af1158015613516573d6000803e3d6000fd5b505050508660000160405161352a90615444565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bc2fa3a876040518263ffffffff1660e01b81526004016135919190613e27565b600060405180830381600087803b1580156135ab57600080fd5b505af11580156135bf573d6000803e3d6000fd5b50505050848760260160010160008282546135da9190614d92565b92505081905550818760260160000160008282546135f89190614d92565b92505081905550828760260160020160008282546136169190614d92565b92505081905550505050505050505050505050565b600080600090505b600183516136419190615169565b8110156136c45760006001826136579190614d92565b90505b83518110156136b65783818151811061367657613675614c50565b5b602002602001015184838151811061369157613690614c50565b5b6020026020010151036136a9576001925050506136ca565b808060010191505061365a565b508080600101915050613633565b50600090505b919050565b6000806136da61083a565b905060005b8351811015613804578473ffffffffffffffffffffffffffffffffffffffff168260000160405161370f90614c3b565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e86848151811061376c5761376b614c50565b5b60200260200101516040518263ffffffff1660e01b81526004016137909190613e27565b602060405180830381865afa1580156137ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d19190614a0d565b73ffffffffffffffffffffffffffffffffffffffff16146137f75760009250505061380b565b80806001019150506136df565b5060019150505b92915050565b60008061381c61083a565b90506000805b84518110156139475782602501600084600001604051613841906141f6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342ab880588858151811061389e5761389d614c50565b5b60200260200101516040518263ffffffff1660e01b81526004016138c29190613e27565b608060405180830381865afa1580156138df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390391906154fa565b60200151815260200190815260200160002060010160009054906101000a900462ffffff1662ffffff16826139389190614d92565b91508080600101915050613822565b508092505050919050565b60008061395d61083a565b90506000428441604051602001613976939291906155cb565b6040516020818303038152906040528051906020012090506000600160008460010160000160009054906101000a900462ffffff166139b59190615608565b6139bf919061563f565b62ffffff168260001c6139d29190615676565b6139dc9190614d92565b92505050919050565b6000804285416040516020016139fd939291906155cb565b6040516020818303038152906040528051906020012090508260018486613a249190615169565b613a2e9190614d92565b8260001c613a3c9190615676565b613a469190614d92565b9150509392505050565b600080600080600080613a6161083a565b9050600060648260260160030160009054906101000a900462ffffff1662ffffff1689613a8e9190614bad565b613a989190614ee3565b9050600060648360260160030160039054906101000a900462ffffff1662ffffff168a613ac59190614bad565b613acf9190614ee3565b9050600060648460260160030160099054906101000a900462ffffff1662ffffff168b613afc9190614bad565b613b069190614ee3565b90506000606485602601600301600c9054906101000a900462ffffff1662ffffff168c613b339190614bad565b613b3d9190614ee3565b9050600060648660260160030160069054906101000a900462ffffff1662ffffff168d613b6a9190614bad565b613b749190614ee3565b905084848484849a509a509a509a509a5050505050505091939590929450565b6040518060e00160405280600060ff16815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6000819050919050565b613be981613bd6565b82525050565b6000606082019050613c046000830186613be0565b613c116020830185613be0565b613c1e6040830184613be0565b949350505050565b6000604051905090565b600080fd5b600080fd5b600060ff82169050919050565b613c5081613c3a565b8114613c5b57600080fd5b50565b600081359050613c6d81613c47565b92915050565b600060208284031215613c8957613c88613c30565b5b6000613c9784828501613c5e565b91505092915050565b613ca981613c3a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ce9578082015181840152602081019050613cce565b60008484015250505050565b6000601f19601f8301169050919050565b6000613d1182613caf565b613d1b8185613cba565b9350613d2b818560208601613ccb565b613d3481613cf5565b840191505092915050565b613d4881613bd6565b82525050565b60008115159050919050565b613d6381613d4e565b82525050565b600060e083016000830151613d816000860182613ca0565b5060208301518482036020860152613d998282613d06565b9150506040830151613dae6040860182613d3f565b506060830151613dc16060860182613d3f565b506080830151613dd46080860182613d3f565b5060a0830151613de760a0860182613d3f565b5060c0830151613dfa60c0860182613d5a565b508091505092915050565b60006020820190508181036000830152613e1f8184613d69565b905092915050565b6000602082019050613e3c6000830184613be0565b92915050565b613e4b81613bd6565b8114613e5657600080fd5b50565b600081359050613e6881613e42565b92915050565b600080600060608486031215613e8757613e86613c30565b5b6000613e9586828701613e59565b9350506020613ea686828701613e59565b9250506040613eb786828701613c5e565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613efe82613cf5565b810181811067ffffffffffffffff82111715613f1d57613f1c613ec6565b5b80604052505050565b6000613f30613c26565b9050613f3c8282613ef5565b919050565b600067ffffffffffffffff821115613f5c57613f5b613ec6565b5b602082029050602081019050919050565b600080fd5b6000613f85613f8084613f41565b613f26565b90508083825260208201905060208402830185811115613fa857613fa7613f6d565b5b835b81811015613fd15780613fbd8882613e59565b845260208401935050602081019050613faa565b5050509392505050565b600082601f830112613ff057613fef613ec1565b5b8135614000848260208601613f72565b91505092915050565b600080604083850312156140205761401f613c30565b5b600061402e85828601613e59565b925050602083013567ffffffffffffffff81111561404f5761404e613c35565b5b61405b85828601613fdb565b9150509250929050565b61406e81613d4e565b82525050565b60006020820190506140896000830184614065565b92915050565b600080604083850312156140a6576140a5613c30565b5b60006140b485828601613e59565b92505060206140c585828601613e59565b9150509250929050565b6000602082840312156140e5576140e4613c30565b5b60006140f384828501613e59565b91505092915050565b600082825260208201905092915050565b600061411882613caf565b61412281856140fc565b9350614132818560208601613ccb565b61413b81613cf5565b840191505092915050565b60006040820190508181036000830152614160818561410d565b905061416f6020830184613be0565b9392505050565b600060408201905061418b6000830185613be0565b6141986020830184613be0565b9392505050565b600081905092915050565b7f6462000000000000000000000000000000000000000000000000000000000000600082015250565b60006141e060028361419f565b91506141eb826141aa565b600282019050919050565b6000614201826141d3565b9150819050919050565b60008151905061421a81613e42565b92915050565b60008060006060848603121561423957614238613c30565b5b60006142478682870161420b565b93505060206142588682870161420b565b92505060406142698682870161420b565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806142ba57607f821691505b6020821081036142cd576142cc614273565b5b50919050565b6000602082840312156142e9576142e8613c30565b5b60006142f78482850161420b565b91505092915050565b7f7030000000000000000000000000000000000000000000000000000000000000600082015250565b600061433660028361419f565b915061434182614300565b600282019050919050565b600061435782614329565b9150819050919050565b600080fd5b600067ffffffffffffffff82111561438157614380613ec6565b5b61438a82613cf5565b9050602081019050919050565b60006143aa6143a584614366565b613f26565b9050828152602081018484840111156143c6576143c5614361565b5b6143d1848285613ccb565b509392505050565b600082601f8301126143ee576143ed613ec1565b5b81516143fe848260208601614397565b91505092915050565b6000806040838503121561441e5761441d613c30565b5b600083015167ffffffffffffffff81111561443c5761443b613c35565b5b614448858286016143d9565b92505060206144598582860161420b565b9150509250929050565b7f5046204772616465204d657267652066756e6374696f6e206e6f74206f70656e600082015250565b60006144996020836140fc565b91506144a482614463565b602082019050919050565b600060208201905081810360008301526144c88161448c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006144fa826144cf565b9050919050565b61450a816144ef565b811461451557600080fd5b50565b60008151905061452781614501565b92915050565b60008060008060008060c0878903121561454a57614549613c30565b5b600061455889828a0161420b565b965050602061456989828a01614518565b955050604061457a89828a0161420b565b945050606061458b89828a01614518565b935050608061459c89828a0161420b565b92505060a06145ad89828a0161420b565b9150509295509295509295565b6145c3816144ef565b82525050565b60006080820190506145de60008301876145ba565b6145eb6020830186613be0565b6145f860408301856145ba565b6146056060830184613be0565b95945050505050565b7f6974656d00000000000000000000000000000000000000000000000000000000600082015250565b600061464460048361419f565b915061464f8261460e565b600482019050919050565b600061466582614637565b9150819050919050565b600060608201905061468460008301866145ba565b6146916020830185613be0565b61469e6040830184613be0565b949350505050565b7f7065720000000000000000000000000000000000000000000000000000000000600082015250565b60006146dc60038361419f565b91506146e7826146a6565b600382019050919050565b60006146fd826146cf565b9150819050919050565b7f6469737472696275746500000000000000000000000000000000000000000000600082015250565b600061473d600a8361419f565b915061474882614707565b600a82019050919050565b600061475e82614730565b9150819050919050565b600060608201905061477d60008301866145ba565b61478a60208301856145ba565b6147976040830184613be0565b949350505050565b6147a881613d4e565b81146147b357600080fd5b50565b6000815190506147c58161479f565b92915050565b6000602082840312156147e1576147e0613c30565b5b60006147ef848285016147b6565b91505092915050565b6000819050919050565b6000819050919050565b600061482761482261481d846147f8565b614802565b613bd6565b9050919050565b6148378161480c565b82525050565b600060608201905061485260008301866145ba565b61485f6020830185613be0565b61486c604083018461482e565b949350505050565b6000806040838503121561488b5761488a613c30565b5b60006148998582860161420b565b925050602083015167ffffffffffffffff8111156148ba576148b9613c35565b5b6148c6858286016143d9565b9150509250929050565b6000819050919050565b60006148f56148f06148eb846148d0565b614802565b613bd6565b9050919050565b614905816148da565b82525050565b600081519050919050565b600082825260208201905092915050565b60006149328261490b565b61493c8185614916565b935061494c818560208601613ccb565b61495581613cf5565b840191505092915050565b60006080820190506149756000830187613be0565b6149826020830186613be0565b61498f60408301856148fc565b81810360608301526149a18184614927565b905095945050505050565b7f6169656e00000000000000000000000000000000000000000000000000000000600082015250565b60006149e260048361419f565b91506149ed826149ac565b600482019050919050565b6000614a03826149d5565b9150819050919050565b600060208284031215614a2357614a22613c30565b5b6000614a3184828501614518565b91505092915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000614a706009836140fc565b9150614a7b82614a3a565b602082019050919050565b60006020820190508181036000830152614a9f81614a63565b9050919050565b7f6475706c69636174652070662069640000000000000000000000000000000000600082015250565b6000614adc600f836140fc565b9150614ae782614aa6565b602082019050919050565b60006020820190508181036000830152614b0b81614acf565b9050919050565b7f6e6f74206f776e6572206f6620706572667269656e6473000000000000000000600082015250565b6000614b486017836140fc565b9150614b5382614b12565b602082019050919050565b60006020820190508181036000830152614b7781614b3b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614bb882613bd6565b9150614bc383613bd6565b9250828202614bd181613bd6565b91508282048414831517614be857614be7614b7e565b5b5092915050565b7f706572667269656e647300000000000000000000000000000000000000000000600082015250565b6000614c25600a8361419f565b9150614c3082614bef565b600a82019050919050565b6000614c4682614c18565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b60006101208284031215614c9b57614c9a614c7f565b5b614ca6610120613f26565b90506000614cb68482850161420b565b6000830152506020614cca8482850161420b565b6020830152506040614cde8482850161420b565b6040830152506060614cf28482850161420b565b6060830152506080614d068482850161420b565b60808301525060a0614d1a8482850161420b565b60a08301525060c0614d2e8482850161420b565b60c08301525060e0614d428482850161420b565b60e083015250610100614d578482850161420b565b6101008301525092915050565b60006101208284031215614d7b57614d7a613c30565b5b6000614d8984828501614c84565b91505092915050565b6000614d9d82613bd6565b9150614da883613bd6565b9250828201905080821115614dc057614dbf614b7e565b5b92915050565b600061012082019050614ddc600083018c613be0565b614de9602083018b613be0565b614df6604083018a613be0565b614e036060830189613be0565b614e106080830188613be0565b614e1d60a0830187613be0565b614e2a60c083018661482e565b614e3760e0830185613be0565b614e45610100830184613be0565b9a9950505050505050505050565b7f7465616d00000000000000000000000000000000000000000000000000000000600082015250565b6000614e8960048361419f565b9150614e9482614e53565b600482019050919050565b6000614eaa82614e7c565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614eee82613bd6565b9150614ef983613bd6565b925082614f0957614f08614eb4565b5b828204905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000614f4c8383613d3f565b60208301905092915050565b6000602082019050919050565b6000614f7082614f14565b614f7a8185614f1f565b9350614f8583614f30565b8060005b83811015614fb6578151614f9d8882614f40565b9750614fa883614f58565b925050600181019050614f89565b5085935050505092915050565b6000604082019050614fd86000830185613be0565b8181036020830152614fea8184614f65565b90509392505050565b7f6e6f74207072656d69756d206c6576656c000000000000000000000000000000600082015250565b60006150296011836140fc565b915061503482614ff3565b602082019050919050565b600060208201905081810360008301526150588161501c565b9050919050565b7f6e6f74206f70656e000000000000000000000000000000000000000000000000600082015250565b60006150956008836140fc565b91506150a08261505f565b602082019050919050565b600060208201905081810360008301526150c481615088565b9050919050565b600080600080608085870312156150e5576150e4613c30565b5b60006150f387828801614518565b945050602061510487828801614518565b93505060406151158782880161420b565b92505060606151268782880161420b565b91505092959194509250565b600060608201905061514760008301866145ba565b6151546020830185613be0565b61516160408301846148fc565b949350505050565b600061517482613bd6565b915061517f83613bd6565b925082820390508181111561519757615196614b7e565b5b92915050565b60006080820190506151b260008301876148fc565b6151bf6020830186614065565b6151cc6040830185613be0565b6151d96060830184613be0565b95945050505050565b600062ffffff82169050919050565b600061520c615207615202846151e2565b614802565b613bd6565b9050919050565b61521c816151f1565b82525050565b600060c0820190506152376000830189613be0565b6152446020830188613be0565b6152516040830187613be0565b61525e6060830186613be0565b61526b6080830185615213565b61527860a0830184613be0565b979650505050505050565b600060a0820190506152986000830188613be0565b6152a56020830187613be0565b6152b26040830186613be0565b6152bf6060830185613be0565b6152cc6080830184613be0565b9695505050505050565b60006060820190506152eb60008301866148fc565b6152f86020830185614065565b6153056040830184613be0565b949350505050565b600060408201905061532260008301856145ba565b61532f6020830184613be0565b9392505050565b7f6275726e00000000000000000000000000000000000000000000000000000000600082015250565b600061536c60048361419f565b915061537782615336565b600482019050919050565b600061538d8261535f565b9150819050919050565b7f7032000000000000000000000000000000000000000000000000000000000000600082015250565b60006153cd60028361419f565b91506153d882615397565b600282019050919050565b60006153ee826153c0565b9150819050919050565b7f7031000000000000000000000000000000000000000000000000000000000000600082015250565b600061542e60028361419f565b9150615439826153f8565b600282019050919050565b600061544f82615421565b9150819050919050565b600060408201905061546e600083018561482e565b61547b6020830184613be0565b9392505050565b60006080828403121561549857615497614c7f565b5b6154a26080613f26565b905060006154b28482850161420b565b60008301525060206154c68482850161420b565b60208301525060406154da848285016147b6565b60408301525060606154ee8482850161420b565b60608301525092915050565b6000608082840312156155105761550f613c30565b5b600061551e84828501615482565b91505092915050565b6000819050919050565b61554261553d82613bd6565b615527565b82525050565b60008160601b9050919050565b600061556082615548565b9050919050565b600061557282615555565b9050919050565b61558a615585826144ef565b615567565b82525050565b600061559b826144cf565b9050919050565b60006155ad82615555565b9050919050565b6155c56155c082615590565b6155a2565b82525050565b60006155d78286615531565b6020820191506155e78285615579565b6014820191506155f782846155b4565b601482019150819050949350505050565b6000615613826151e2565b915061561e836151e2565b9250828203905062ffffff81111561563957615638614b7e565b5b92915050565b600061564a826151e2565b9150615655836151e2565b9250828201905062ffffff8111156156705761566f614b7e565b5b92915050565b600061568182613bd6565b915061568c83613bd6565b92508261569c5761569b614eb4565b5b82820690509291505056fea2646970667358221220da97ce03239ffb5441a54a440a3cf4a769f703ca10e2e787aaefc3a17bc8ae2064736f6c63430008160033",
  "devdoc": {
    "details": "i-TEZ : P0 (Mix) Facet Contract",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "P0_getMaxProb()": {
        "notice": "P0 _ get functions"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}