{
  "address": "0x27Cf4792972E190F911aeB039d26dB22E48A81f7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "layer",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ousdt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "per",
          "type": "uint256"
        }
      ],
      "name": "P2_Harvest_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "layer",
          "type": "uint256"
        }
      ],
      "name": "P2_Staking_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "layer",
          "type": "uint256"
        }
      ],
      "name": "P2_UnStaking_Event",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aienId",
          "type": "uint256"
        }
      ],
      "name": "P2_getAienLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "P2_getLayerData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P2_getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_usdtRewarded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_perRewarded",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_isBlockUser",
              "type": "bool"
            }
          ],
          "internalType": "struct IP2.UserLoadData",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_aienId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_aienLevel",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_aien_per_received",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_aien_usdt_received",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "usdt_withdrawable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "per_withdrawable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "block_reward_per",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "block_reward_usdt",
              "type": "uint256"
            }
          ],
          "internalType": "struct IP2.AienLoadData[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_layerNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_24h_reward_per",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_24h_reward_usdt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakedAien",
              "type": "uint256"
            }
          ],
          "internalType": "struct IP2.LayerLoadData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aienId",
          "type": "uint256"
        }
      ],
      "name": "P2_harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "P2_layers",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "perBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdtBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "savedPerBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "savedUsdtBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "add_dailyUSDT",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "add_dailyPER",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "total_checkWithdrawPER",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawal_checkWithdrawPER",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "total_checkWithdrawUSDT",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawal_checkWithdrawUSDT",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IP2.Balances",
              "name": "balances",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "rewardUsdtPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyReward_Percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardUsdt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "add_dailyReward_Percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyRewardUpdateBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakedAien",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct IP2.Layer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P2_maxStakingLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P2_perBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aienId",
          "type": "uint256"
        }
      ],
      "name": "P2_staking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aienId",
          "type": "uint256"
        }
      ],
      "name": "P2_unStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P2_usdtBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 20,
  "solcInputHash": "4f929f09ae59e44da443ccddb3da9401",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"layer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ousdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"per\",\"type\":\"uint256\"}],\"name\":\"P2_Harvest_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"layer\",\"type\":\"uint256\"}],\"name\":\"P2_Staking_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"layer\",\"type\":\"uint256\"}],\"name\":\"P2_UnStaking_Event\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aienId\",\"type\":\"uint256\"}],\"name\":\"P2_getAienLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"P2_getLayerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P2_getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_usdtRewarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perRewarded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBlockUser\",\"type\":\"bool\"}],\"internalType\":\"struct IP2.UserLoadData\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_aienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aienLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aien_per_received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aien_usdt_received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_withdrawable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"per_withdrawable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block_reward_per\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block_reward_usdt\",\"type\":\"uint256\"}],\"internalType\":\"struct IP2.AienLoadData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_layerNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_24h_reward_per\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_24h_reward_usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAien\",\"type\":\"uint256\"}],\"internalType\":\"struct IP2.LayerLoadData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aienId\",\"type\":\"uint256\"}],\"name\":\"P2_harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"P2_layers\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"perBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"savedPerBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"savedUsdtBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"add_dailyUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"add_dailyPER\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_checkWithdrawPER\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawal_checkWithdrawPER\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_checkWithdrawUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawal_checkWithdrawUSDT\",\"type\":\"uint256\"}],\"internalType\":\"struct IP2.Balances\",\"name\":\"balances\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"rewardUsdtPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyReward_Percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"add_dailyReward_Percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRewardUpdateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAien\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"internalType\":\"struct IP2.Layer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P2_maxStakingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P2_perBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aienId\",\"type\":\"uint256\"}],\"name\":\"P2_staking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aienId\",\"type\":\"uint256\"}],\"name\":\"P2_unStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P2_usdtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Channel_iN/facets/P2Facet.sol\":\"P2Facet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Channel_iN/facets/P2Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IERC721} from \\\"../../shared/interfaces/IERC721.sol\\\";\\nimport {IP2} from \\\"../interfaces/IP2.sol\\\";\\nimport {IDB} from \\\"../interfaces/IDB.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract P2Facet {\\n    event P2_Staking_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed layer\\n    );\\n    event P2_UnStaking_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed layer\\n    );\\n    event P2_Harvest_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed layer,\\n        uint ousdt,\\n        uint per\\n    );\\n\\n    function P2_staking(uint _aienId) external {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        uint _aienLevel = P2_getAienLevel(_aienId);\\n        IP2(s.contracts[\\\"p2\\\"]).diamond_P2_deposit(msgsender, _aienId);\\n        IERC721(s.contracts[\\\"aien\\\"]).safeTransferFrom(\\n            msgsender,\\n            s.contracts[\\\"p2\\\"],\\n            _aienId\\n        );\\n\\n        emit P2_Staking_Event(msgsender, _aienId, _aienLevel);\\n    }\\n\\n    function P2_unStaking(uint _aienId) external {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n\\n        uint _aienLevel = P2_getAienLevel(_aienId);\\n        (uint per, uint ousdt) = IP2(s.contracts[\\\"p2\\\"]).pendingReward(\\n            _aienId,\\n            _aienLevel,\\n            0\\n        );\\n\\n        emit P2_UnStaking_Event(msgsender, _aienId, _aienLevel);\\n        emit P2_Harvest_Event(msgsender, _aienId, _aienLevel, per, ousdt);\\n\\n        IP2(s.contracts[\\\"p2\\\"]).diamond_P2_withdraw(msgsender, _aienId);\\n    }\\n\\n    function P2_harvest(uint _aienId) external {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        uint _aienLevel = P2_getAienLevel(_aienId);\\n        (uint per, uint ousdt) = IP2(s.contracts[\\\"p2\\\"]).pendingReward(\\n            _aienId,\\n            _aienLevel,\\n            0\\n        );\\n        emit P2_Harvest_Event(msgsender, _aienId, _aienLevel, per, ousdt);\\n        IP2(s.contracts[\\\"p2\\\"]).diamond_P2_harvest(msgsender, _aienId);\\n    }\\n\\n    function P2_getUserInfo()\\n        external\\n        view\\n        returns (\\n            IP2.UserLoadData memory,\\n            IP2.AienLoadData[] memory,\\n            IP2.LayerLoadData[] memory\\n        )\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n\\n        (\\n            IP2.UserLoadData memory userData,\\n            IP2.AienLoadData[] memory aienData,\\n            IP2.LayerLoadData[] memory layerData\\n        ) = IP2(s.contracts[\\\"p2\\\"]).diamond_P2_getUserInfo(msgsender);\\n        return (userData, aienData, layerData);\\n    }\\n\\n    function P2_getLayerData(\\n        uint _number\\n    ) public view returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IP2(s.contracts[\\\"p2\\\"]).diamond_P2_getLayerData(_number);\\n    }\\n\\n    function P2_getAienLevel(uint _aienId) public view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"db\\\"]).getAienLevel(_aienId);\\n    }\\n\\n    function P2_usdtBalance() public view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IP2(s.contracts[\\\"p2\\\"]).P2_usdtBalance();\\n    }\\n\\n    function P2_perBalance() public view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IP2(s.contracts[\\\"p2\\\"]).P2_perBalance();\\n    }\\n\\n    function P2_maxStakingLimit() public view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IP2(s.contracts[\\\"p2\\\"]).MAX_STAKING_LIMIT();\\n    }\\n\\n    function P2_layers(uint _number) public view returns (IP2.Layer memory) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IP2(s.contracts[\\\"p2\\\"]).layers(_number);\\n    }\\n}\\n\",\"keccak256\":\"0x039f6d607c912ff33143b540fdd96fd3400d786fe0f09a13a7eb8932b1471e97\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IDB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// legacy db contract interface\\ninterface IDB {\\n    struct pf {\\n        uint id;\\n        uint class;\\n        bool isAien;\\n        uint usedAienId;\\n    }\\n\\n    struct pfGrade {\\n        uint normal;\\n        uint uncommon;\\n        uint rare;\\n        uint unique;\\n        uint legendary;\\n        uint myth;\\n        uint ancient;\\n    }\\n\\n    struct aien {\\n        uint id;\\n        // \\uac15\\ud654 \\ud69f\\uc218\\n        uint mixCount;\\n        //\\n        uint p2Level;\\n        // \\ud1a0\\ud0c8 \\uacbd\\ud5d8\\uce58\\n        uint totalExp;\\n        // \\ubbf8\\uc158 \\ubc0f, \\uc778\\ud50c\\ub8e8\\uc5b8\\uc11c \\ud65c\\ub3d9 \\uad00\\ub828 \\uacbd\\ud5d8\\uce58\\n        uint influExp;\\n        // \\uae30\\ubcf8 \\ud655\\ub960\\n        uint baseProb;\\n        // \\ud1a0\\ud0c8 \\ud655\\ub960\\n        uint totalProb;\\n        // is PF\\n        uint isPFid;\\n        // \\ucd94\\uac00\\ud655\\ub960\\n        uint addProb;\\n    }\\n\\n    struct User {\\n        // DB > idx\\n        uint userId;\\n        // token itme ID\\n        uint itemId;\\n        address incomeAddr;\\n        uint feeBalance;\\n        bool isAble;\\n        uint mintCount;\\n        uint useLevelupCount;\\n        uint useMergeCount;\\n        // uint ownerIncomePercent;\\n        // uint userIncomPercent;\\n        //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n        uint referralIncome;\\n        address agency;\\n        uint agencyIncome;\\n    }\\n\\n    function AIENS(uint _key) external view returns (aien memory);\\n\\n    function PFS(uint _key) external view returns (pf memory);\\n\\n    function getAien(uint _id) external view;\\n\\n    function getPF(uint _id) external view;\\n\\n    function getPfGrade(uint _id) external view returns (uint);\\n\\n    function setAien(uint _id) external;\\n\\n    function usePFimg(uint _aienId, uint _pfId) external;\\n\\n    function setAienAll(\\n        uint _id,\\n        uint _mixCount,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _totalProb,\\n        uint _isPFid,\\n        uint _addProb\\n    ) external;\\n\\n    function getContractAddr(\\n        string memory _name\\n    ) external view returns (address);\\n\\n    function burnValue(uint _burnAmount) external;\\n\\n    function setAienGradeInfo(uint _toGrade) external;\\n\\n    function subPfGrades(uint _pfId) external;\\n\\n    function setLevelUpStatus(uint _toGrade) external;\\n\\n    function _failedAienSet(\\n        uint _id,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _successAienSet(\\n        uint _id,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _mergeCalcul(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _mergeCalcul2(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _influencerMerge(\\n        address _to,\\n        uint _itemId,\\n        uint _referralIncome\\n    ) external returns (uint, string memory);\\n\\n    function _levelUpCalcul(\\n        uint _itemId,\\n        uint _fee\\n    ) external returns (address, address, uint, uint);\\n\\n    function _levelUpSucess(uint _id, uint _p2Level) external;\\n\\n    function _levelUpFailed(uint _id, uint _addProb) external;\\n\\n    function _mergeCount(\\n        address _agency,\\n        uint _agencyFee,\\n        address _influencer,\\n        uint _influencerFee\\n    ) external;\\n\\n    function usePFPower(uint _id, uint _usePower) external;\\n\\n    function addProbFee() external view returns (uint);\\n\\n    function PfGrades() external view returns (pfGrade memory);\\n\\n    function getAienGradeInfo() external view returns (uint[] memory);\\n\\n    function basicMergeAmount() external view returns (uint);\\n\\n    function influencerMergeAmount() external view returns (uint);\\n\\n    function _getMedataMargin() external view returns (uint, uint, uint);\\n\\n    function getAienLevel(uint _aienId) external view returns (uint);\\n\\n    function setPerprojectWallet(address _addr) external;\\n\\n    function setAgencyAddr(address _influencer, address _agency) external;\\n\\n    function setAgencyIncomePercent(uint _agencyIncomePercent) external;\\n\\n    function adminSetMergeAmount(\\n        uint _influencerMergeAmount,\\n        uint _basicMergeAmount,\\n        uint _agencyIncomePercent,\\n        uint _ownerIncomePercent\\n    ) external;\\n\\n    function getUserFromItem(uint _itemId) external view returns (User memory);\\n\\n    function adminSetMetaData(\\n        uint _pfId,\\n        uint8 _grade,\\n        string memory _seedHash\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb7bfad81b676bb5e847be713ae6e926ffe3b80f6c78b825a1d8c2ed2b1d3838e\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IP2 {\\n    struct User {\\n        bool isBlockUser;\\n        uint perRewarded;\\n        uint usdtRewarded;\\n        EnumerableSet.UintSet tokenIds;\\n    }\\n\\n    struct Aien {\\n        address staker;\\n        uint level;\\n        // requires value\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        uint rewardUsdtDebt;\\n        uint rewardPerDebt;\\n        ////////////////////\\n        uint per_received;\\n        uint usdt_received;\\n    }\\n\\n    struct Balances {\\n        // \\ub85c\\uc9c1\\uc0c1 \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\ud55c \\ubc38\\ub7f0\\uc2a4 \\ubcc0\\uc218 (\\uc2e4\\uc81c\\uc640 \\ub2e4\\ub97c \\uc218 \\uc788\\uc74c)\\n        uint perBalance;\\n        uint usdtBalance;\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508 \\ub418\\uc9c0 \\uc54a\\uc740 \\uc0c1\\ud0dc\\uc5d0\\uc11c\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508\\ub418\\uba74 \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\uc800\\uc7a5\\ub41c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ubcc0\\uc218\\n        uint savedPerBalance;\\n        uint savedUsdtBalance;\\n        // \\ud604\\uc7ac savedUsdt, savedPer\\ub97c \\ud1b5\\ud574 \\ub098\\uc628 \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\n        uint add_dailyUSDT;\\n        uint add_dailyPER;\\n        // \\ubcf4\\uc548\\uc0c1 \\ubb38\\uc81c\\uac00 \\uc0dd\\uaca8\\n        // \\uc608\\uc0c1\\ubcf4\\ub2e4 \\ub9ce\\uc740 withdraw\\ub97c \\uc694\\uccad\\ud558\\uac8c \\ub418\\ub294 \\uacbd\\uc6b0\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ud1a0\\ud0c8 \\ubc38\\ub7f0\\uc2a4\\uc640\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ucd9c\\uae08 \\ubc38\\ub7f0\\uc2a4\\ub97c \\ube44\\uad50\\ud558\\uc5ec\\n        // \\ucd9c\\uae08 \\uac00\\ub2a5\\ud55c\\uc9c0 \\uccb4\\ud06c\\ud558\\ub294 \\ubcc0\\uc218\\n        uint total_checkWithdrawPER;\\n        uint withdrawal_checkWithdrawPER;\\n        uint total_checkWithdrawUSDT;\\n        uint withdrawal_checkWithdrawUSDT;\\n    }\\n\\n    struct Layer {\\n        Balances balances;\\n        // P2\\uc5d0\\uc11c \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\ud1a0\\ud070 \\ubc30\\uc815 \\ubc1b\\uc744\\ub54c \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint rewardUsdtPercent;\\n        uint rewardPerPercent;\\n        // \\uc720\\uc800\\uc5d0\\uac8c \\ud558\\ub8e8\\uc5d0 \\ubd84\\ubc30\\ud558\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint dailyReward_Percent;\\n        // \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        // \\ubbf8\\uc624\\ud508\\uc2dc \\uc800\\uc7a5\\ud55c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ud37c\\uc13c\\ud2b8\\ubcc0\\uc218\\n        uint add_dailyReward_Percent;\\n        uint lastRewardBlock;\\n        uint dailyRewardUpdateBlock;\\n        uint totalStakedAien;\\n        bool isOpen;\\n    }\\n\\n    struct AienLoadData {\\n        //aien\\uc815\\ubcf4\\n        uint _aienId;\\n        uint _aienLevel;\\n        // \\ucd9c\\uae08 \\ud1a0\\ud0c8\\n        uint _aien_per_received;\\n        uint _aien_usdt_received;\\n        //\\ucd9c\\uae08 \\uac00\\ub2a5\\n        uint usdt_withdrawable;\\n        uint per_withdrawable;\\n        // block\\ub2f9 \\ub9ac\\uc6cc\\ub4dc\\n        uint block_reward_per;\\n        uint block_reward_usdt;\\n    }\\n\\n    struct LayerLoadData {\\n        bool isOpen;\\n        uint _layerNumber;\\n        uint _24h_reward_per;\\n        uint _24h_reward_usdt;\\n        uint totalStakedAien;\\n    }\\n    struct UserLoadData {\\n        uint _usdtRewarded;\\n        uint _perRewarded;\\n        bool _isBlockUser;\\n    }\\n\\n    function aiens(uint _id) external view returns (Aien memory);\\n\\n    function diamond_P2_deposit(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_withdraw(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_harvest(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_getUserInfo(\\n        address _sender\\n    )\\n        external\\n        view\\n        returns (\\n            UserLoadData memory,\\n            AienLoadData[] memory,\\n            LayerLoadData[] memory\\n        );\\n\\n    function diamond_P2_getLayerData(\\n        uint _number\\n    ) external view returns (uint, uint, uint);\\n\\n    function addPerUsdtDistribution(uint _usdt, uint _per) external;\\n\\n    function P2_usdtBalance() external view returns (uint);\\n\\n    function P2_perBalance() external view returns (uint);\\n\\n    function MAX_STAKING_LIMIT() external view returns (uint);\\n\\n    function layers(uint _number) external view returns (Layer memory);\\n\\n    function pendingReward(\\n        uint _aienId,\\n        uint _layerNumber,\\n        uint _withdrawBlock\\n    ) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0x2e90a8470442fec4da79c46739fcf8b958fe1503f519a5f7b2fa048697e2396d\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xdc916985bab8246380c2188436b2e25e333d34e9fdc7bf3b0245f5bcc716e5dc\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n//import \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\n/* interface IERC721 is IERC165 { */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function burn(uint256 _tokenId) external;\\n\\n    function safeMintByMinter(address _to) external;\\n\\n    function nextTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3dfb334f4ed930d3eb3b781f7605fe1ab071b54c66540e99c4e37c437ff4a93a\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\n// using EnumerableSet for EnumerableSet.AddressSet;\\n// i-Tez Structs\\n//- P0 struct\\nstruct P0_State {\\n    uint24 maxProb;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\uac1c\\ub2f9 \\uc218\\uc218\\ub8cc\\n    uint addProbFee;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\ud68d\\ub4dd \\uacbd\\ud5d8\\uce58\\n    uint16 addProbExp;\\n    // bool\\n    bool isVRF;\\n}\\nstruct P0_PerFriendsProb {\\n    string pfGrade;\\n    uint24 gradeProb;\\n}\\n\\nstruct P0_GradeInfo {\\n    // \\ub2e4\\uc74c level\\uc774 \\uc5f4\\ub838\\ub294\\uc9c0 \\ud655\\uc778\\n    bool isOpen;\\n    // level\\ubcc4 mix fee\\n    uint mixFee;\\n    // \\ub808\\ubca8\\uc5c5 \\uc131\\uacf5\\uc2dc level\\ubcc4 \\ucd08\\uae30 base \\ud655\\ub960\\n    uint24 initBaseProb;\\n    // level\\ubcc4 \\ucd94\\uac00 \\ud655\\ub960 \\ubc38\\ub7f0\\uc2a4 \\uc870\\uc815\\uac12\\n    uint16 mixExp;\\n    // level\\ubcc4 \\ud569\\uc131 \\uc2e4\\ud328\\uc2dc \\ucd94\\uac00 \\ud655\\ub960 min,max\\n    uint24 failedAddProbMin;\\n    // 1000 = 0.1%, 10000 = 0.01%\\n    uint24 failedAddProbMax;\\n}\\n\\nstruct P0_MergePfGrade {\\n    uint8 grade;\\n    string gradeName;\\n    uint mergeFee;\\n    uint mergeUseItemAmount;\\n    uint latestId;\\n    uint setMatadataId;\\n    bool isOpen;\\n}\\nstruct P0_MergeState {\\n    uint agencyIncomePercent;\\n    uint influencerIncomePercent;\\n    // 1e5 = 100%\\n    // uint maxIncomePercent;\\n}\\n// //- Distribute struct\\nstruct Distribute_State {\\n    uint beforeP2Usdt;\\n    uint beforeP2Per;\\n    uint beforeTeamUsdt;\\n    // distribute ratios\\n    uint24 p1Ratio;\\n    uint24 p2PerRatio;\\n    uint24 p2UsdtRatio;\\n    uint24 burnRatio;\\n    uint24 teamUsdtRatio;\\n}\\n// DB > Filtered User Struct\\nstruct User {\\n    // DB > idx\\n    uint userId;\\n    // token itme ID\\n    uint itemId;\\n    address incomeAddr;\\n    uint feeBalance;\\n    bool isAble;\\n    uint mintCount;\\n    uint useLevelupCount;\\n    uint useMergeCount;\\n    //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n    uint referralIncome;\\n    address agency;\\n    uint agencyIncome;\\n}\\n\\n// P0 End\\nstruct AppStorage {\\n    // address constants\\n    mapping(string => address) contracts;\\n    // i-Tez/////////////////////////////\\n    // P0 ///////////////////////////////\\n    P0_State p0_states;\\n    P0_GradeInfo[11] p0_gradeInfos;\\n    mapping(uint => P0_PerFriendsProb) p0_perFriendsProbs;\\n    /////////////////////////////////////\\n    // Distribute ///////////////////////\\n    Distribute_State distribute_states;\\n    uint aienMintFee;\\n    // Distribute\\n    uint ksSwapLimit;\\n    bool isAutoDistribute;\\n    // P0 - Item Merge Grade Infos\\n    mapping(uint8 => P0_MergePfGrade) p0_mergePfGrades;\\n    mapping(uint => string) pfMetaURI;\\n    P0_MergeState p0_mergeState;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\\n/**\\n@dev global modifier\\n */\\ncontract Modifiers {\\n    modifier onlyDev() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    // modifier checkRole(uint16 _role) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     require(\\n    //         s.roles[_role].accounts.contains(LibMeta.msgSender()),\\n    //         \\\"AccessControl: sender does not have required role\\\"\\n    //     );\\n    //     _;\\n    // }\\n}\\n\",\"keccak256\":\"0x39cfdb5aedd9674c863d4fbbbcb26f112e9a7885b7d3c09570e9511371c86823\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xaea50a523e0ff67f5fc59946320f11efcfc09c75a972788f2884b9d1198a83d9\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"\\n            )\\n        );\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194f61daa9d3c92ca3de358b76506dbb1e9e39211dc5b49768f18cc38f85b1ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f92806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638c9e5564116100665780638c9e55641461015d5780638de1ce6e146101795780639ba6678f146101ab578063ce2a9d66146101c7578063ea26a267146101e55761009e565b80631f6371ab146100a3578063496758ba146100bf57806353849719146100dd5780636efa686b1461010d5780637aca4c961461012d575b600080fd5b6100bd60048036038101906100b89190610fb5565b610203565b005b6100c7610409565b6040516100d49190610ff1565b60405180910390f35b6100f760048036038101906100f29190610fb5565b6104c9565b6040516101049190610ff1565b60405180910390f35b610115610596565b604051610124939291906112e1565b60405180910390f35b61014760048036038101906101429190610fb5565b610694565b60405161015491906114da565b60405180910390f35b61017760048036038101906101729190610fb5565b610769565b005b610193600480360381019061018e9190610fb5565b610956565b6040516101a2939291906114f6565b60405180910390f35b6101c560048036038101906101c09190610fb5565b610a2c565b005b6101cf610c5e565b6040516101dc9190610ff1565b60405180910390f35b6101ed610d1e565b6040516101fa9190610ff1565b60405180910390f35b600061020d610dde565b90506000610219610de3565b90506000610226846104c9565b90508260000160405161023890611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166378c6904683866040518363ffffffff1660e01b81526004016102a19291906115da565b600060405180830381600087803b1580156102bb57600080fd5b505af11580156102cf573d6000803e3d6000fd5b50505050826000016040516102e39061164f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e838560000160405161033e90611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518463ffffffff1660e01b815260040161038c93929190611664565b600060405180830381600087803b1580156103a657600080fd5b505af11580156103ba573d6000803e3d6000fd5b5050505080848373ffffffffffffffffffffffffffffffffffffffff167f4cb27fb1ffb51d515b4943731980479ad0a2b5df222fb6d08f4df5e5c39b58ec60405160405180910390a450505050565b600080610414610dde565b90508060000160405161042690611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663496758ba6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c391906116b0565b91505090565b6000806104d4610dde565b9050806000016040516104e690611729565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc5435b4846040518263ffffffff1660e01b815260040161054d9190610ff1565b602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e91906116b0565b915050919050565b61059e610e93565b60608060006105ab610dde565b905060006105b7610de3565b90506000806000846000016040516105ce90611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663503ead18856040518263ffffffff1660e01b8152600401610635919061173e565b600060405180830381865afa158015610652573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061067b9190611b62565b9250925092508282829750975097505050505050909192565b61069c610eb6565b60006106a6610dde565b9050806000016040516106b890611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e9198c2846040518263ffffffff1660e01b815260040161071f9190610ff1565b61028060405180830381865afa15801561073d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107619190611df6565b915050919050565b6000610773610dde565b9050600061077f610de3565b9050600061078c846104c9565b9050600080846000016040516107a190611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663296daaac878560006040518463ffffffff1660e01b815260040161080d93929190611e69565b6040805180830381865afa158015610829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084d9190611ea0565b9150915082868573ffffffffffffffffffffffffffffffffffffffff167f684d4bb8505a79e56d23051935dc82b83cfb4b495b7b76bc214988ee3a2802fe858560405161089b929190611ee0565b60405180910390a4846000016040516108b390611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f405730885886040518363ffffffff1660e01b815260040161091c9291906115da565b600060405180830381600087803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b50505050505050505050565b600080600080610964610dde565b90508060000160405161097690611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166362912a05866040518263ffffffff1660e01b81526004016109dd9190610ff1565b606060405180830381865afa1580156109fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1e9190611f09565b935093509350509193909250565b6000610a36610dde565b90506000610a42610de3565b90506000610a4f846104c9565b905060008084600001604051610a6490611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663296daaac878560006040518463ffffffff1660e01b8152600401610ad093929190611e69565b6040805180830381865afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b109190611ea0565b9150915082868573ffffffffffffffffffffffffffffffffffffffff167f249c91593e22a24937e64924560e7ce5935b8194cce99247dfade070618c6afe60405160405180910390a482868573ffffffffffffffffffffffffffffffffffffffff167f684d4bb8505a79e56d23051935dc82b83cfb4b495b7b76bc214988ee3a2802fe8585604051610ba3929190611ee0565b60405180910390a484600001604051610bbb90611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3f2a37a85886040518363ffffffff1660e01b8152600401610c249291906115da565b600060405180830381600087803b158015610c3e57600080fd5b505af1158015610c52573d6000803e3d6000fd5b50505050505050505050565b600080610c69610dde565b905080600001604051610c7b90611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637349298d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1891906116b0565b91505090565b600080610d29610dde565b905080600001604051610d3b90611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea26a2676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd891906116b0565b91505090565b600090565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610e8c57600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050610e90565b3390505b90565b604051806060016040528060008152602001600081526020016000151581525090565b604051806101600160405280610eca610f18565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610f9281610f7f565b8114610f9d57600080fd5b50565b600081359050610faf81610f89565b92915050565b600060208284031215610fcb57610fca610f75565b5b6000610fd984828501610fa0565b91505092915050565b610feb81610f7f565b82525050565b60006020820190506110066000830184610fe2565b92915050565b61101581610f7f565b82525050565b60008115159050919050565b6110308161101b565b82525050565b60608201600082015161104c600085018261100c565b50602082015161105f602085018261100c565b5060408201516110726040850182611027565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610100820160008201516110bb600085018261100c565b5060208201516110ce602085018261100c565b5060408201516110e1604085018261100c565b5060608201516110f4606085018261100c565b506080820151611107608085018261100c565b5060a082015161111a60a085018261100c565b5060c082015161112d60c085018261100c565b5060e082015161114060e085018261100c565b50505050565b600061115283836110a4565b6101008301905092915050565b6000602082019050919050565b600061117782611078565b6111818185611083565b935061118c83611094565b8060005b838110156111bd5781516111a48882611146565b97506111af8361115f565b925050600181019050611190565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60a08201600082015161120c6000850182611027565b50602082015161121f602085018261100c565b506040820151611232604085018261100c565b506060820151611245606085018261100c565b506080820151611258608085018261100c565b50505050565b600061126a83836111f6565b60a08301905092915050565b6000602082019050919050565b600061128e826111ca565b61129881856111d5565b93506112a3836111e6565b8060005b838110156112d45781516112bb888261125e565b97506112c683611276565b9250506001810190506112a7565b5085935050505092915050565b600060a0820190506112f66000830186611036565b8181036060830152611308818561116c565b9050818103608083015261131c8184611283565b9050949350505050565b6101408201600082015161133d600085018261100c565b506020820151611350602085018261100c565b506040820151611363604085018261100c565b506060820151611376606085018261100c565b506080820151611389608085018261100c565b5060a082015161139c60a085018261100c565b5060c08201516113af60c085018261100c565b5060e08201516113c260e085018261100c565b506101008201516113d761010085018261100c565b506101208201516113ec61012085018261100c565b50505050565b610280820160008201516114096000850182611326565b50602082015161141d61014085018261100c565b50604082015161143161016085018261100c565b50606082015161144561018085018261100c565b5060808201516114596101a085018261100c565b5060a082015161146d6101c085018261100c565b5060c08201516114816101e085018261100c565b5060e082015161149561020085018261100c565b506101008201516114aa61022085018261100c565b506101208201516114bf61024085018261100c565b506101408201516114d4610260850182611027565b50505050565b6000610280820190506114f060008301846113f2565b92915050565b600060608201905061150b6000830186610fe2565b6115186020830185610fe2565b6115256040830184610fe2565b949350505050565b600081905092915050565b7f7032000000000000000000000000000000000000000000000000000000000000600082015250565b600061156e60028361152d565b915061157982611538565b600282019050919050565b600061158f82611561565b9150819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115c482611599565b9050919050565b6115d4816115b9565b82525050565b60006040820190506115ef60008301856115cb565b6115fc6020830184610fe2565b9392505050565b7f6169656e00000000000000000000000000000000000000000000000000000000600082015250565b600061163960048361152d565b915061164482611603565b600482019050919050565b600061165a8261162c565b9150819050919050565b600060608201905061167960008301866115cb565b61168660208301856115cb565b6116936040830184610fe2565b949350505050565b6000815190506116aa81610f89565b92915050565b6000602082840312156116c6576116c5610f75565b5b60006116d48482850161169b565b91505092915050565b7f6462000000000000000000000000000000000000000000000000000000000000600082015250565b600061171360028361152d565b915061171e826116dd565b600282019050919050565b600061173482611706565b9150819050919050565b600060208201905061175360008301846115cb565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117a78261175e565b810181811067ffffffffffffffff821117156117c6576117c561176f565b5b80604052505050565b60006117d9610f6b565b90506117e5828261179e565b919050565b6117f38161101b565b81146117fe57600080fd5b50565b600081519050611810816117ea565b92915050565b60006060828403121561182c5761182b611759565b5b61183660606117cf565b905060006118468482850161169b565b600083015250602061185a8482850161169b565b602083015250604061186e84828501611801565b60408301525092915050565b600080fd5b600067ffffffffffffffff82111561189a5761189961176f565b5b602082029050602081019050919050565b600080fd5b600061010082840312156118c7576118c6611759565b5b6118d26101006117cf565b905060006118e28482850161169b565b60008301525060206118f68482850161169b565b602083015250604061190a8482850161169b565b604083015250606061191e8482850161169b565b60608301525060806119328482850161169b565b60808301525060a06119468482850161169b565b60a08301525060c061195a8482850161169b565b60c08301525060e061196e8482850161169b565b60e08301525092915050565b600061198d6119888461187f565b6117cf565b90508083825260208201905061010084028301858111156119b1576119b06118ab565b5b835b818110156119db57806119c688826118b0565b845260208401935050610100810190506119b3565b5050509392505050565b600082601f8301126119fa576119f961187a565b5b8151611a0a84826020860161197a565b91505092915050565b600067ffffffffffffffff821115611a2e57611a2d61176f565b5b602082029050602081019050919050565b600060a08284031215611a5557611a54611759565b5b611a5f60a06117cf565b90506000611a6f84828501611801565b6000830152506020611a838482850161169b565b6020830152506040611a978482850161169b565b6040830152506060611aab8482850161169b565b6060830152506080611abf8482850161169b565b60808301525092915050565b6000611ade611ad984611a13565b6117cf565b90508083825260208201905060a08402830185811115611b0157611b006118ab565b5b835b81811015611b2a5780611b168882611a3f565b84526020840193505060a081019050611b03565b5050509392505050565b600082601f830112611b4957611b4861187a565b5b8151611b59848260208601611acb565b91505092915050565b600080600060a08486031215611b7b57611b7a610f75565b5b6000611b8986828701611816565b935050606084015167ffffffffffffffff811115611baa57611ba9610f7a565b5b611bb6868287016119e5565b925050608084015167ffffffffffffffff811115611bd757611bd6610f7a565b5b611be386828701611b34565b9150509250925092565b60006101408284031215611c0457611c03611759565b5b611c0f6101406117cf565b90506000611c1f8482850161169b565b6000830152506020611c338482850161169b565b6020830152506040611c478482850161169b565b6040830152506060611c5b8482850161169b565b6060830152506080611c6f8482850161169b565b60808301525060a0611c838482850161169b565b60a08301525060c0611c978482850161169b565b60c08301525060e0611cab8482850161169b565b60e083015250610100611cc08482850161169b565b61010083015250610120611cd68482850161169b565b6101208301525092915050565b60006102808284031215611cfa57611cf9611759565b5b611d056101606117cf565b90506000611d1584828501611bed565b600083015250610140611d2a8482850161169b565b602083015250610160611d3f8482850161169b565b604083015250610180611d548482850161169b565b6060830152506101a0611d698482850161169b565b6080830152506101c0611d7e8482850161169b565b60a0830152506101e0611d938482850161169b565b60c083015250610200611da88482850161169b565b60e083015250610220611dbd8482850161169b565b61010083015250610240611dd38482850161169b565b61012083015250610260611de984828501611801565b6101408301525092915050565b60006102808284031215611e0d57611e0c610f75565b5b6000611e1b84828501611ce3565b91505092915050565b6000819050919050565b6000819050919050565b6000611e53611e4e611e4984611e24565b611e2e565b610f7f565b9050919050565b611e6381611e38565b82525050565b6000606082019050611e7e6000830186610fe2565b611e8b6020830185610fe2565b611e986040830184611e5a565b949350505050565b60008060408385031215611eb757611eb6610f75565b5b6000611ec58582860161169b565b9250506020611ed68582860161169b565b9150509250929050565b6000604082019050611ef56000830185610fe2565b611f026020830184610fe2565b9392505050565b600080600060608486031215611f2257611f21610f75565b5b6000611f308682870161169b565b9350506020611f418682870161169b565b9250506040611f528682870161169b565b915050925092509256fea2646970667358221220f9f03769e3fe18dd18d41ee2d526477adb588f25f4cce39a1d1dcb13f668dcab64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638c9e5564116100665780638c9e55641461015d5780638de1ce6e146101795780639ba6678f146101ab578063ce2a9d66146101c7578063ea26a267146101e55761009e565b80631f6371ab146100a3578063496758ba146100bf57806353849719146100dd5780636efa686b1461010d5780637aca4c961461012d575b600080fd5b6100bd60048036038101906100b89190610fb5565b610203565b005b6100c7610409565b6040516100d49190610ff1565b60405180910390f35b6100f760048036038101906100f29190610fb5565b6104c9565b6040516101049190610ff1565b60405180910390f35b610115610596565b604051610124939291906112e1565b60405180910390f35b61014760048036038101906101429190610fb5565b610694565b60405161015491906114da565b60405180910390f35b61017760048036038101906101729190610fb5565b610769565b005b610193600480360381019061018e9190610fb5565b610956565b6040516101a2939291906114f6565b60405180910390f35b6101c560048036038101906101c09190610fb5565b610a2c565b005b6101cf610c5e565b6040516101dc9190610ff1565b60405180910390f35b6101ed610d1e565b6040516101fa9190610ff1565b60405180910390f35b600061020d610dde565b90506000610219610de3565b90506000610226846104c9565b90508260000160405161023890611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166378c6904683866040518363ffffffff1660e01b81526004016102a19291906115da565b600060405180830381600087803b1580156102bb57600080fd5b505af11580156102cf573d6000803e3d6000fd5b50505050826000016040516102e39061164f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e838560000160405161033e90611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518463ffffffff1660e01b815260040161038c93929190611664565b600060405180830381600087803b1580156103a657600080fd5b505af11580156103ba573d6000803e3d6000fd5b5050505080848373ffffffffffffffffffffffffffffffffffffffff167f4cb27fb1ffb51d515b4943731980479ad0a2b5df222fb6d08f4df5e5c39b58ec60405160405180910390a450505050565b600080610414610dde565b90508060000160405161042690611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663496758ba6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c391906116b0565b91505090565b6000806104d4610dde565b9050806000016040516104e690611729565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc5435b4846040518263ffffffff1660e01b815260040161054d9190610ff1565b602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e91906116b0565b915050919050565b61059e610e93565b60608060006105ab610dde565b905060006105b7610de3565b90506000806000846000016040516105ce90611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663503ead18856040518263ffffffff1660e01b8152600401610635919061173e565b600060405180830381865afa158015610652573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061067b9190611b62565b9250925092508282829750975097505050505050909192565b61069c610eb6565b60006106a6610dde565b9050806000016040516106b890611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e9198c2846040518263ffffffff1660e01b815260040161071f9190610ff1565b61028060405180830381865afa15801561073d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107619190611df6565b915050919050565b6000610773610dde565b9050600061077f610de3565b9050600061078c846104c9565b9050600080846000016040516107a190611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663296daaac878560006040518463ffffffff1660e01b815260040161080d93929190611e69565b6040805180830381865afa158015610829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084d9190611ea0565b9150915082868573ffffffffffffffffffffffffffffffffffffffff167f684d4bb8505a79e56d23051935dc82b83cfb4b495b7b76bc214988ee3a2802fe858560405161089b929190611ee0565b60405180910390a4846000016040516108b390611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f405730885886040518363ffffffff1660e01b815260040161091c9291906115da565b600060405180830381600087803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b50505050505050505050565b600080600080610964610dde565b90508060000160405161097690611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166362912a05866040518263ffffffff1660e01b81526004016109dd9190610ff1565b606060405180830381865afa1580156109fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1e9190611f09565b935093509350509193909250565b6000610a36610dde565b90506000610a42610de3565b90506000610a4f846104c9565b905060008084600001604051610a6490611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663296daaac878560006040518463ffffffff1660e01b8152600401610ad093929190611e69565b6040805180830381865afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b109190611ea0565b9150915082868573ffffffffffffffffffffffffffffffffffffffff167f249c91593e22a24937e64924560e7ce5935b8194cce99247dfade070618c6afe60405160405180910390a482868573ffffffffffffffffffffffffffffffffffffffff167f684d4bb8505a79e56d23051935dc82b83cfb4b495b7b76bc214988ee3a2802fe8585604051610ba3929190611ee0565b60405180910390a484600001604051610bbb90611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3f2a37a85886040518363ffffffff1660e01b8152600401610c249291906115da565b600060405180830381600087803b158015610c3e57600080fd5b505af1158015610c52573d6000803e3d6000fd5b50505050505050505050565b600080610c69610dde565b905080600001604051610c7b90611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637349298d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1891906116b0565b91505090565b600080610d29610dde565b905080600001604051610d3b90611584565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea26a2676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd891906116b0565b91505090565b600090565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610e8c57600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050610e90565b3390505b90565b604051806060016040528060008152602001600081526020016000151581525090565b604051806101600160405280610eca610f18565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610f9281610f7f565b8114610f9d57600080fd5b50565b600081359050610faf81610f89565b92915050565b600060208284031215610fcb57610fca610f75565b5b6000610fd984828501610fa0565b91505092915050565b610feb81610f7f565b82525050565b60006020820190506110066000830184610fe2565b92915050565b61101581610f7f565b82525050565b60008115159050919050565b6110308161101b565b82525050565b60608201600082015161104c600085018261100c565b50602082015161105f602085018261100c565b5060408201516110726040850182611027565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610100820160008201516110bb600085018261100c565b5060208201516110ce602085018261100c565b5060408201516110e1604085018261100c565b5060608201516110f4606085018261100c565b506080820151611107608085018261100c565b5060a082015161111a60a085018261100c565b5060c082015161112d60c085018261100c565b5060e082015161114060e085018261100c565b50505050565b600061115283836110a4565b6101008301905092915050565b6000602082019050919050565b600061117782611078565b6111818185611083565b935061118c83611094565b8060005b838110156111bd5781516111a48882611146565b97506111af8361115f565b925050600181019050611190565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60a08201600082015161120c6000850182611027565b50602082015161121f602085018261100c565b506040820151611232604085018261100c565b506060820151611245606085018261100c565b506080820151611258608085018261100c565b50505050565b600061126a83836111f6565b60a08301905092915050565b6000602082019050919050565b600061128e826111ca565b61129881856111d5565b93506112a3836111e6565b8060005b838110156112d45781516112bb888261125e565b97506112c683611276565b9250506001810190506112a7565b5085935050505092915050565b600060a0820190506112f66000830186611036565b8181036060830152611308818561116c565b9050818103608083015261131c8184611283565b9050949350505050565b6101408201600082015161133d600085018261100c565b506020820151611350602085018261100c565b506040820151611363604085018261100c565b506060820151611376606085018261100c565b506080820151611389608085018261100c565b5060a082015161139c60a085018261100c565b5060c08201516113af60c085018261100c565b5060e08201516113c260e085018261100c565b506101008201516113d761010085018261100c565b506101208201516113ec61012085018261100c565b50505050565b610280820160008201516114096000850182611326565b50602082015161141d61014085018261100c565b50604082015161143161016085018261100c565b50606082015161144561018085018261100c565b5060808201516114596101a085018261100c565b5060a082015161146d6101c085018261100c565b5060c08201516114816101e085018261100c565b5060e082015161149561020085018261100c565b506101008201516114aa61022085018261100c565b506101208201516114bf61024085018261100c565b506101408201516114d4610260850182611027565b50505050565b6000610280820190506114f060008301846113f2565b92915050565b600060608201905061150b6000830186610fe2565b6115186020830185610fe2565b6115256040830184610fe2565b949350505050565b600081905092915050565b7f7032000000000000000000000000000000000000000000000000000000000000600082015250565b600061156e60028361152d565b915061157982611538565b600282019050919050565b600061158f82611561565b9150819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115c482611599565b9050919050565b6115d4816115b9565b82525050565b60006040820190506115ef60008301856115cb565b6115fc6020830184610fe2565b9392505050565b7f6169656e00000000000000000000000000000000000000000000000000000000600082015250565b600061163960048361152d565b915061164482611603565b600482019050919050565b600061165a8261162c565b9150819050919050565b600060608201905061167960008301866115cb565b61168660208301856115cb565b6116936040830184610fe2565b949350505050565b6000815190506116aa81610f89565b92915050565b6000602082840312156116c6576116c5610f75565b5b60006116d48482850161169b565b91505092915050565b7f6462000000000000000000000000000000000000000000000000000000000000600082015250565b600061171360028361152d565b915061171e826116dd565b600282019050919050565b600061173482611706565b9150819050919050565b600060208201905061175360008301846115cb565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117a78261175e565b810181811067ffffffffffffffff821117156117c6576117c561176f565b5b80604052505050565b60006117d9610f6b565b90506117e5828261179e565b919050565b6117f38161101b565b81146117fe57600080fd5b50565b600081519050611810816117ea565b92915050565b60006060828403121561182c5761182b611759565b5b61183660606117cf565b905060006118468482850161169b565b600083015250602061185a8482850161169b565b602083015250604061186e84828501611801565b60408301525092915050565b600080fd5b600067ffffffffffffffff82111561189a5761189961176f565b5b602082029050602081019050919050565b600080fd5b600061010082840312156118c7576118c6611759565b5b6118d26101006117cf565b905060006118e28482850161169b565b60008301525060206118f68482850161169b565b602083015250604061190a8482850161169b565b604083015250606061191e8482850161169b565b60608301525060806119328482850161169b565b60808301525060a06119468482850161169b565b60a08301525060c061195a8482850161169b565b60c08301525060e061196e8482850161169b565b60e08301525092915050565b600061198d6119888461187f565b6117cf565b90508083825260208201905061010084028301858111156119b1576119b06118ab565b5b835b818110156119db57806119c688826118b0565b845260208401935050610100810190506119b3565b5050509392505050565b600082601f8301126119fa576119f961187a565b5b8151611a0a84826020860161197a565b91505092915050565b600067ffffffffffffffff821115611a2e57611a2d61176f565b5b602082029050602081019050919050565b600060a08284031215611a5557611a54611759565b5b611a5f60a06117cf565b90506000611a6f84828501611801565b6000830152506020611a838482850161169b565b6020830152506040611a978482850161169b565b6040830152506060611aab8482850161169b565b6060830152506080611abf8482850161169b565b60808301525092915050565b6000611ade611ad984611a13565b6117cf565b90508083825260208201905060a08402830185811115611b0157611b006118ab565b5b835b81811015611b2a5780611b168882611a3f565b84526020840193505060a081019050611b03565b5050509392505050565b600082601f830112611b4957611b4861187a565b5b8151611b59848260208601611acb565b91505092915050565b600080600060a08486031215611b7b57611b7a610f75565b5b6000611b8986828701611816565b935050606084015167ffffffffffffffff811115611baa57611ba9610f7a565b5b611bb6868287016119e5565b925050608084015167ffffffffffffffff811115611bd757611bd6610f7a565b5b611be386828701611b34565b9150509250925092565b60006101408284031215611c0457611c03611759565b5b611c0f6101406117cf565b90506000611c1f8482850161169b565b6000830152506020611c338482850161169b565b6020830152506040611c478482850161169b565b6040830152506060611c5b8482850161169b565b6060830152506080611c6f8482850161169b565b60808301525060a0611c838482850161169b565b60a08301525060c0611c978482850161169b565b60c08301525060e0611cab8482850161169b565b60e083015250610100611cc08482850161169b565b61010083015250610120611cd68482850161169b565b6101208301525092915050565b60006102808284031215611cfa57611cf9611759565b5b611d056101606117cf565b90506000611d1584828501611bed565b600083015250610140611d2a8482850161169b565b602083015250610160611d3f8482850161169b565b604083015250610180611d548482850161169b565b6060830152506101a0611d698482850161169b565b6080830152506101c0611d7e8482850161169b565b60a0830152506101e0611d938482850161169b565b60c083015250610200611da88482850161169b565b60e083015250610220611dbd8482850161169b565b61010083015250610240611dd38482850161169b565b61012083015250610260611de984828501611801565b6101408301525092915050565b60006102808284031215611e0d57611e0c610f75565b5b6000611e1b84828501611ce3565b91505092915050565b6000819050919050565b6000819050919050565b6000611e53611e4e611e4984611e24565b611e2e565b610f7f565b9050919050565b611e6381611e38565b82525050565b6000606082019050611e7e6000830186610fe2565b611e8b6020830185610fe2565b611e986040830184611e5a565b949350505050565b60008060408385031215611eb757611eb6610f75565b5b6000611ec58582860161169b565b9250506020611ed68582860161169b565b9150509250929050565b6000604082019050611ef56000830185610fe2565b611f026020830184610fe2565b9392505050565b600080600060608486031215611f2257611f21610f75565b5b6000611f308682870161169b565b9350506020611f418682870161169b565b9250506040611f528682870161169b565b915050925092509256fea2646970667358221220f9f03769e3fe18dd18d41ee2d526477adb588f25f4cce39a1d1dcb13f668dcab64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}