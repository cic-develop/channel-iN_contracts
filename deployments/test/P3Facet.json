{
  "address": "0x6F6b96679E68719035E07CA5c0992E5A03c650C1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "P3_getPairAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P3_getPairLists",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        }
      ],
      "name": "P3_getQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfba5622fef8a58bb17b4a925ad2f2ccb256c08110142b267da5749dd820351d3",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe34f22cF55db5209bA6546701d408e5F58d8703f",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "562516",
    "logsBloom": "0x
    "blockHash": "0x7b59973d5628601d9e3f4c71e56a93e08826bc1c0a17476317c731c8241213d0",
    "transactionHash": "0xfba5622fef8a58bb17b4a925ad2f2ccb256c08110142b267da5749dd820351d3",
    "logs": [],
    "blockNumber": 149460093,
    "cumulativeGasUsed": "709730",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7b5e74b22912467256daea2ecea61f44",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"P3_getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P3_getPairLists\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"}],\"name\":\"P3_getQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Channel_iN/facets/P3Facet.sol\":\"P3Facet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Channel_iN/facets/P3Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IUniswapV2Router02} from \\\"../interfaces/IUniswapV2Router02.sol\\\";\\nimport {IUniswapV2Factory} from \\\"../interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract P3Facet {\\n    AppStorage internal s;\\n\\n    function P3_getPairLists() external view returns (address[] memory) {\\n        IUniswapV2Factory factory = IUniswapV2Factory(\\n            s.contracts[\\\"dexv2factory\\\"]\\n        );\\n        uint256 length = factory.allPairsLength();\\n        address[] memory pairs = new address[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            pairs[i] = factory.allPairs(i);\\n        }\\n        return pairs;\\n    }\\n\\n    function P3_getPairAddress(\\n        address _tokenA,\\n        address _tokenB\\n    ) external view returns (address) {\\n        IUniswapV2Factory factory = IUniswapV2Factory(\\n            s.contracts[\\\"dexv2factory\\\"]\\n        );\\n        return factory.getPair(_tokenA, _tokenB);\\n    }\\n\\n    function P3_getQuote(\\n        address _tokenA,\\n        address _tokenB,\\n        uint _amountA\\n    ) external view returns (uint amountB) {\\n        IUniswapV2Router02 router = IUniswapV2Router02(\\n            s.contracts[\\\"dexv2router\\\"]\\n        );\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n        amountB = router.getAmountsOut(_amountA, path)[1];\\n    }\\n}\\n\",\"keccak256\":\"0xa4bd5ae488dce56a6ef7df8692e9a18f6baecd1d5743b3b2069e0af74375ece7\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint\\n    );\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xfec084fd8586f7a25c2687c46abc67207b73289de7bff6777c75901fa2559b19\"},\"contracts/Channel_iN/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x128082be844cd82e1e4d77486a631cce3fce52bd362bfe16bd30d2a69a3b323f\"},\"contracts/Channel_iN/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf52a3524bff449edaffe3613485426239b15e99185e63f7c37cf61b7a73def4b\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xdc916985bab8246380c2188436b2e25e333d34e9fdc7bf3b0245f5bcc716e5dc\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {EnumerableSet} from \\\"../../shared/libraries/LibEnumerableSet.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\n\\nusing EnumerableSet for EnumerableSet.UintSet;\\n// i-Tez Structs\\n//- P0 struct\\nstruct P0_State {\\n    uint24 maxProb;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\uac1c\\ub2f9 \\uc218\\uc218\\ub8cc\\n    uint addProbFee;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\ud68d\\ub4dd \\uacbd\\ud5d8\\uce58\\n    uint16 addProbExp;\\n    // bool\\n    bool isVRF;\\n}\\nstruct P0_PerFriendsProb {\\n    string pfGrade;\\n    uint24 gradeProb;\\n}\\n\\nstruct P0_GradeInfo {\\n    // \\ub2e4\\uc74c level\\uc774 \\uc5f4\\ub838\\ub294\\uc9c0 \\ud655\\uc778\\n    bool isOpen;\\n    // level\\ubcc4 mix fee\\n    uint mixFee;\\n    // \\ub808\\ubca8\\uc5c5 \\uc131\\uacf5\\uc2dc level\\ubcc4 \\ucd08\\uae30 base \\ud655\\ub960\\n    uint24 initBaseProb;\\n    // level\\ubcc4 \\ucd94\\uac00 \\ud655\\ub960 \\ubc38\\ub7f0\\uc2a4 \\uc870\\uc815\\uac12\\n    uint16 mixExp;\\n    // level\\ubcc4 \\ud569\\uc131 \\uc2e4\\ud328\\uc2dc \\ucd94\\uac00 \\ud655\\ub960 min,max\\n    uint24 failedAddProbMin;\\n    // 1000 = 0.1%, 10000 = 0.01%\\n    uint24 failedAddProbMax;\\n}\\n\\nstruct P0_MergePfGrade {\\n    uint8 grade;\\n    string gradeName;\\n    uint mergeFee;\\n    uint mergeUseItemAmount;\\n    uint latestId;\\n    uint setMatadataId;\\n    bool isOpen;\\n}\\nstruct P0_MergeState {\\n    uint agencyIncomePercent;\\n    uint influencerIncomePercent;\\n}\\n// //- Distribute struct\\nstruct Distribute_State {\\n    uint beforeP2Usdt;\\n    uint beforeP2Per;\\n    uint beforeTeamUsdt;\\n    // distribute ratios\\n    uint24 p1Ratio;\\n    uint24 p2BaseRatio;\\n    // uint24 p2PerRatio;\\n    uint24 p2PlusRatio;\\n    // uint24 p2UsdtRatio;\\n    uint24 burnRatio;\\n    uint24 teamFeeRatio;\\n    // uint24 teamUsdtRatio;\\n}\\n// DB > Filtered User Struct\\nstruct User {\\n    // DB > idx\\n    uint userId;\\n    // token itme ID\\n    uint itemId;\\n    address incomeAddr;\\n    uint feeBalance;\\n    bool isAble;\\n    uint mintCount;\\n    uint useLevelupCount;\\n    uint useMergeCount;\\n    //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n    uint referralIncome;\\n    address agency;\\n    uint agencyIncome;\\n}\\n\\n// struct P3_AienCollection {\\n//     address nftAddress;\\n//     string name;\\n//     string symbol;\\n//     uint highestPrice;\\n//     uint floorPrice;\\n//     uint totalTradeVolume;\\n//     uint totalTradeCount;\\n// }\\n\\n// struct P3_Aien {\\n//     uint tokenId;\\n//     uint lastTradePrice;\\n//     // maybe add tx history\\n// }\\n\\n// struct P3_AienOrder {\\n//     uint orderId;\\n//     address seller;\\n//     address buyer;\\n//     uint tokenId;\\n//     uint8 level;\\n//     uint32 baseProb;\\n//     uint32 addProb;\\n//     uint price;\\n//     uint tradeTime;\\n//     uint8 orderType;\\n// }\\n\\n// struct P3_PfCollection {\\n//     address nftAddress;\\n//     string name;\\n//     string symbol;\\n//     uint highestPrice;\\n//     uint floorPrice;\\n//     uint totalTradeVolume;\\n//     uint totalTradeCount;\\n// }\\n\\n// struct P3_PfOrder {\\n//     uint orderId;\\n//     address seller;\\n//     address buyer;\\n//     uint tokenId;\\n//     uint8 grade;\\n//     uint price;\\n//     uint tradeTime;\\n//     uint8 orderType;\\n// }\\n\\n//\\n//\\n//\\n//\\n// P2 start\\nstruct P2_State {\\n    // P2 global state\\n    bool isP2Stop;\\n    // \\n    uint P2_baseBalance;\\n    uint P2_plusBalance;\\n    // \\n    uint P2_dailyRewardPercent;\\n    // \\n    uint P2_dailyRewardUpdateBlock;\\n    uint P2_lastRewardBlock;\\n    // \\n    uint MAX_STAKING_LIMIT;\\n}\\n\\nstruct P2_User {\\n    // \\ube14\\ub799\\uc720\\uc800 \\ucc3e\\uc544\\uc57c\\ud568\\n    bool isBlockUser;\\n\\tuint plusRewarded;\\n\\tuint baseRewarded;\\n\\tEnumerableSet.UintSet tokenIds;\\n}\\n\\nstruct P2_Aien {\\n    address staker;\\n\\tuint level;\\n\\t// requires value\\n\\tuint rewardPlus;\\n\\tuint rewardBase;\\n\\tuint rewardBaseDebt;\\n\\tuint rewardPlusDebt;\\n\\t////////////////////\\n\\tuint plus_received;\\n\\tuint base_received;\\n}\\n\\nstruct P2_Balances {\\n// \\ub85c\\uc9c1\\uc0c1 \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\ud55c \\ubc38\\ub7f0\\uc2a4 \\ubcc0\\uc218 (\\uc2e4\\uc81c\\uc640 \\ub2e4\\ub97c \\uc218 \\uc788\\uc74c)\\n\\tuint baseBalance;\\n\\tuint plusBalance;\\n\\t// \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508 \\ub418\\uc9c0 \\uc54a\\uc740 \\uc0c1\\ud0dc\\uc5d0\\uc11c\\n\\t// \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508\\ub418\\uba74 \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\uc800\\uc7a5\\ub41c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ubcc0\\uc218\\n\\tuint savedBaseBalance;\\n\\tuint savedPlusBalance;\\n\\t// \\ud604\\uc7ac savedUsdt, savedPer\\ub97c \\ud1b5\\ud574 \\ub098\\uc628 \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\n\\tuint add_dailyBASE;\\n\\tuint add_dailyPLUS;\\n\\t// \\ubcf4\\uc548\\uc0c1 \\ubb38\\uc81c\\uac00 \\uc0dd\\uaca8\\n\\t// \\uc608\\uc0c1\\ubcf4\\ub2e4 \\ub9ce\\uc740 withdraw\\ub97c \\uc694\\uccad\\ud558\\uac8c \\ub418\\ub294 \\uacbd\\uc6b0\\n\\t// \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ud1a0\\ud0c8 \\ubc38\\ub7f0\\uc2a4\\uc640\\n\\t// \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ucd9c\\uae08 \\ubc38\\ub7f0\\uc2a4\\ub97c \\ube44\\uad50\\ud558\\uc5ec\\n\\t// \\ucd9c\\uae08 \\uac00\\ub2a5\\ud55c\\uc9c0 \\uccb4\\ud06c\\ud558\\ub294 \\ubcc0\\uc218\\n\\tuint a;\\n\\tuint b;\\n\\tuint c;\\n\\tuint d;\\n}\\n// 0,\\n// 0,\\n// 80833997355037257560000,\\n// 74403075216168882064000,\\n// 0,0,\\n// 0,0,0,0,\\n\\n// 1000,\\n// 2000,\\n// 100000,\\n// 1000,\\n// 0,\\n// 0,\\n// 0,\\n// 0,\\n// 0,\\n// false\\n\\nstruct P2_Layer {\\n    P2_Balances balances;\\n\\t// P2\\uc5d0\\uc11c \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\ud1a0\\ud070 \\ubc30\\uc815 \\ubc1b\\uc744\\ub54c \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n    // 1~5 // \\uad6c oUSDT\\n\\tuint rewardBasePercent;\\n    // 6~10 // \\uad6c PER\\n\\tuint rewardPlusPercent;\\n    // \\n\\t// \\uc720\\uc800\\uc5d0\\uac8c \\ud558\\ub8e8\\uc5d0 \\ubd84\\ubc30\\ud558\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n\\tuint dailyReward_Percent;\\n    // \\ubbf8\\uc624\\ud508\\uc2dc \\uc800\\uc7a5\\ud55c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ud37c\\uc13c\\ud2b8\\ubcc0\\uc218\\n\\tuint add_dailyReward_Percent;\\n    // \\n\\t// \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\n\\tuint rewardPlus;\\n\\tuint rewardBase;\\n\\t// \\n    uint lastRewardBlock;\\n\\tuint dailyRewardUpdateBlock;\\n\\tuint totalStakedAien;\\n\\tbool isOpen;\\n}\\n\\n\\n// P0 End\\nstruct AppStorage {\\n    // address constants\\n    mapping(string => address) contracts;\\n    // i-Tez/////////////////////////////\\n    // P0 ///////////////////////////////\\n    P0_State p0_states;\\n    P0_GradeInfo[11] p0_gradeInfos;\\n    mapping(uint => P0_PerFriendsProb) p0_perFriendsProbs;\\n    /////////////////////////////////////\\n    // Distribute ///////////////////////\\n    Distribute_State distribute_states;\\n    uint aienMintFee;\\n    // Distribute\\n    uint ksSwapLimit;\\n    bool isAutoDistribute;\\n    // P0 - Item Merge Grade Infos\\n    mapping(uint8 => P0_MergePfGrade) p0_mergePfGrades;\\n    mapping(uint => string) pfMetaURI;\\n    P0_MergeState p0_mergeState;\\n    //////////////////////////\\n    // P3/////////////////////\\n    //\\n    // // userAddr => orderIds;\\n    // mapping(address => uint[]) p3_userOrders;\\n    // //\\n    // //\\n    // // tokenId => orderIds;\\n    // mapping(uint => uint[]) p3_aienTokenOrders;\\n    // // orderId => orderInfo\\n    // // mapping(uint => P3_Aien_Order) p3_aienOrders;\\n    // //\\n    // // tokenId => orderIds;\\n    // mapping(uint => uint[]) p3_pfTokenOrders;\\n    // // orderId => orderInfo\\n    // mapping(uint => P3_PfOrder) p3_pfOrders;\\n    //\\n    //\\n    //\\n    //\\n    // //////////////////////////\\n    // P2////////////////////////   \\n    bool isP2Stop;\\n    uint P2_baseBalance;\\n    uint P2_plusBalance;\\n    uint P2_dailyRewardPercent;\\n    uint P2_dailyRewardUpdateBlock;\\n    uint P2_lastRewardBlock;\\n    uint P2_MAX_STAKING_LIMIT;\\n    uint DAY_TO_SEC;\\n    uint REWARD_PERCENT_DECIMAL;\\n    uint PRECISION_FACTOR;\\n    // \\n    uint[5] __gap;\\n    mapping(address => P2_User) p2_users;\\n    mapping(uint => P2_Aien) p2_aiens;\\n    mapping(string => P2_Balances) p2_balances;\\n    mapping(uint => P2_Layer) p2_layers;\\n    // mapping(uint => P2_AienLoadData) p2_aienLoadDatas;\\n    // mapping(uint => P2_LayerLoadData) p2_layerLoadDatas;\\n    // mapping(address => P2_UserLoadData) p2_userLoadDatas;\\n    \\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\\n/**\\n@dev global modifier\\n */\\ncontract Modifiers {\\n    modifier onlyDev() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3231774170c1bde9501a437a5bed2ee647a5e1958921c503edc57ae5cbd02a97\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xaea50a523e0ff67f5fc59946320f11efcfc09c75a972788f2884b9d1198a83d9\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"\\n            )\\n        );\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194f61daa9d3c92ca3de358b76506dbb1e9e39211dc5b49768f18cc38f85b1ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610689806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633672e3e3146100465780634526507714610064578063d6f116dc1461008f575b600080fd5b61004e6100b0565b60405161005b919061046e565b60405180910390f35b6100776100723660046104a0565b61023c565b6040516001600160a01b03909116815260200161005b565b6100a261009d3660046104d9565b6102e4565b60405190815260200161005b565b604080516b6465787632666163746f727960a01b81526000600c8201819052825191829003602c0182205463574f2ba360e01b835292516060936001600160a01b031692839163574f2ba3916004808201926020929091908290030181865afa158015610121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610145919061051a565b905060008167ffffffffffffffff81111561016257610162610533565b60405190808252806020026020018201604052801561018b578160200160208202803683370190505b50905060005b8281101561023457604051631e3dd18b60e01b8152600481018290526001600160a01b03851690631e3dd18b90602401602060405180830381865afa1580156101de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102029190610549565b82828151811061021457610214610566565b6001600160a01b0390921660209283029190910190910152600101610191565b509392505050565b6040516b6465787632666163746f727960a01b815260009081908190600c019081526040519081900360200181205463e6a4390560e01b82526001600160a01b0386811660048401528581166024840152169150819063e6a4390590604401602060405180830381865afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc9190610549565b949350505050565b604080516a3232bc3b193937baba32b960a91b81526000600b8201819052825191829003602b01822054600280845260608401855291936001600160a01b039091169284929091602083019080368337019050509050858160008151811061034e5761034e610566565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061038257610382610566565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b81529083169063d06ca61f906103bf908790859060040161057c565b600060405180830381865afa1580156103dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104049190810190610595565b60018151811061041657610416610566565b6020026020010151925050509392505050565b60008151808452602080850194506020840160005b838110156104635781516001600160a01b03168752958201959082019060010161043e565b509495945050505050565b6020815260006104816020830184610429565b9392505050565b6001600160a01b038116811461049d57600080fd5b50565b600080604083850312156104b357600080fd5b82356104be81610488565b915060208301356104ce81610488565b809150509250929050565b6000806000606084860312156104ee57600080fd5b83356104f981610488565b9250602084013561050981610488565b929592945050506040919091013590565b60006020828403121561052c57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561055b57600080fd5b815161048181610488565b634e487b7160e01b600052603260045260246000fd5b8281526040602082015260006102dc6040830184610429565b600060208083850312156105a857600080fd5b825167ffffffffffffffff808211156105c057600080fd5b818501915085601f8301126105d457600080fd5b8151818111156105e6576105e6610533565b8060051b604051601f19603f8301168101818110858211171561060b5761060b610533565b60405291825284820192508381018501918883111561062957600080fd5b938501935b828510156106475784518452938501939285019261062e565b9897505050505050505056fea2646970667358221220c80d3da9b14767bbab5713c54721a29e1728c7b2f454e5d559dc077d9277f2cd64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80633672e3e3146100465780634526507714610064578063d6f116dc1461008f575b600080fd5b61004e6100b0565b60405161005b919061046e565b60405180910390f35b6100776100723660046104a0565b61023c565b6040516001600160a01b03909116815260200161005b565b6100a261009d3660046104d9565b6102e4565b60405190815260200161005b565b604080516b6465787632666163746f727960a01b81526000600c8201819052825191829003602c0182205463574f2ba360e01b835292516060936001600160a01b031692839163574f2ba3916004808201926020929091908290030181865afa158015610121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610145919061051a565b905060008167ffffffffffffffff81111561016257610162610533565b60405190808252806020026020018201604052801561018b578160200160208202803683370190505b50905060005b8281101561023457604051631e3dd18b60e01b8152600481018290526001600160a01b03851690631e3dd18b90602401602060405180830381865afa1580156101de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102029190610549565b82828151811061021457610214610566565b6001600160a01b0390921660209283029190910190910152600101610191565b509392505050565b6040516b6465787632666163746f727960a01b815260009081908190600c019081526040519081900360200181205463e6a4390560e01b82526001600160a01b0386811660048401528581166024840152169150819063e6a4390590604401602060405180830381865afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc9190610549565b949350505050565b604080516a3232bc3b193937baba32b960a91b81526000600b8201819052825191829003602b01822054600280845260608401855291936001600160a01b039091169284929091602083019080368337019050509050858160008151811061034e5761034e610566565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061038257610382610566565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b81529083169063d06ca61f906103bf908790859060040161057c565b600060405180830381865afa1580156103dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104049190810190610595565b60018151811061041657610416610566565b6020026020010151925050509392505050565b60008151808452602080850194506020840160005b838110156104635781516001600160a01b03168752958201959082019060010161043e565b509495945050505050565b6020815260006104816020830184610429565b9392505050565b6001600160a01b038116811461049d57600080fd5b50565b600080604083850312156104b357600080fd5b82356104be81610488565b915060208301356104ce81610488565b809150509250929050565b6000806000606084860312156104ee57600080fd5b83356104f981610488565b9250602084013561050981610488565b929592945050506040919091013590565b60006020828403121561052c57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561055b57600080fd5b815161048181610488565b634e487b7160e01b600052603260045260246000fd5b8281526040602082015260006102dc6040830184610429565b600060208083850312156105a857600080fd5b825167ffffffffffffffff808211156105c057600080fd5b818501915085601f8301126105d457600080fd5b8151818111156105e6576105e6610533565b8060051b604051601f19603f8301168101818110858211171561060b5761060b610533565b60405291825284820192508381018501918883111561062957600080fd5b938501935b828510156106475784518452938501939285019261062e565b9897505050505050505056fea2646970667358221220c80d3da9b14767bbab5713c54721a29e1728c7b2f454e5d559dc077d9277f2cd64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13,
        "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)918_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(P0_GradeInfo)688_storage)11_storage": {
        "base": "t_struct(P0_GradeInfo)688_storage",
        "encoding": "inplace",
        "label": "struct P0_GradeInfo[11]",
        "numberOfBytes": "1056"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(P2_User)773_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct P2_User)",
        "numberOfBytes": "32",
        "value": "t_struct(P2_User)773_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_struct(P2_Balances)811_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct P2_Balances)",
        "numberOfBytes": "32",
        "value": "t_struct(P2_Balances)811_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(P0_PerFriendsProb)675_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct P0_PerFriendsProb)",
        "numberOfBytes": "32",
        "value": "t_struct(P0_PerFriendsProb)675_storage"
      },
      "t_mapping(t_uint256,t_struct(P2_Aien)790_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct P2_Aien)",
        "numberOfBytes": "32",
        "value": "t_struct(P2_Aien)790_storage"
      },
      "t_mapping(t_uint256,t_struct(P2_Layer)835_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct P2_Layer)",
        "numberOfBytes": "32",
        "value": "t_struct(P2_Layer)835_storage"
      },
      "t_mapping(t_uint8,t_struct(P0_MergePfGrade)703_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct P0_MergePfGrade)",
        "numberOfBytes": "32",
        "value": "t_struct(P0_MergePfGrade)703_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)918_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 839,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "contracts",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_string_memory_ptr,t_address)"
          },
          {
            "astId": 842,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p0_states",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(P0_State)670_storage"
          },
          {
            "astId": 847,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p0_gradeInfos",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(P0_GradeInfo)688_storage)11_storage"
          },
          {
            "astId": 852,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p0_perFriendsProbs",
            "offset": 0,
            "slot": "37",
            "type": "t_mapping(t_uint256,t_struct(P0_PerFriendsProb)675_storage)"
          },
          {
            "astId": 855,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "distribute_states",
            "offset": 0,
            "slot": "38",
            "type": "t_struct(Distribute_State)725_storage"
          },
          {
            "astId": 857,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "aienMintFee",
            "offset": 0,
            "slot": "42",
            "type": "t_uint256"
          },
          {
            "astId": 859,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "ksSwapLimit",
            "offset": 0,
            "slot": "43",
            "type": "t_uint256"
          },
          {
            "astId": 861,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "isAutoDistribute",
            "offset": 0,
            "slot": "44",
            "type": "t_bool"
          },
          {
            "astId": 866,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p0_mergePfGrades",
            "offset": 0,
            "slot": "45",
            "type": "t_mapping(t_uint8,t_struct(P0_MergePfGrade)703_storage)"
          },
          {
            "astId": 870,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "pfMetaURI",
            "offset": 0,
            "slot": "46",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 873,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p0_mergeState",
            "offset": 0,
            "slot": "47",
            "type": "t_struct(P0_MergeState)708_storage"
          },
          {
            "astId": 875,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "isP2Stop",
            "offset": 0,
            "slot": "49",
            "type": "t_bool"
          },
          {
            "astId": 877,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "P2_baseBalance",
            "offset": 0,
            "slot": "50",
            "type": "t_uint256"
          },
          {
            "astId": 879,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "P2_plusBalance",
            "offset": 0,
            "slot": "51",
            "type": "t_uint256"
          },
          {
            "astId": 881,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "P2_dailyRewardPercent",
            "offset": 0,
            "slot": "52",
            "type": "t_uint256"
          },
          {
            "astId": 883,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "P2_dailyRewardUpdateBlock",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256"
          },
          {
            "astId": 885,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "P2_lastRewardBlock",
            "offset": 0,
            "slot": "54",
            "type": "t_uint256"
          },
          {
            "astId": 887,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "P2_MAX_STAKING_LIMIT",
            "offset": 0,
            "slot": "55",
            "type": "t_uint256"
          },
          {
            "astId": 889,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "DAY_TO_SEC",
            "offset": 0,
            "slot": "56",
            "type": "t_uint256"
          },
          {
            "astId": 891,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "REWARD_PERCENT_DECIMAL",
            "offset": 0,
            "slot": "57",
            "type": "t_uint256"
          },
          {
            "astId": 893,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "PRECISION_FACTOR",
            "offset": 0,
            "slot": "58",
            "type": "t_uint256"
          },
          {
            "astId": 897,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "__gap",
            "offset": 0,
            "slot": "59",
            "type": "t_array(t_uint256)5_storage"
          },
          {
            "astId": 902,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p2_users",
            "offset": 0,
            "slot": "64",
            "type": "t_mapping(t_address,t_struct(P2_User)773_storage)"
          },
          {
            "astId": 907,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p2_aiens",
            "offset": 0,
            "slot": "65",
            "type": "t_mapping(t_uint256,t_struct(P2_Aien)790_storage)"
          },
          {
            "astId": 912,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p2_balances",
            "offset": 0,
            "slot": "66",
            "type": "t_mapping(t_string_memory_ptr,t_struct(P2_Balances)811_storage)"
          },
          {
            "astId": 917,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p2_layers",
            "offset": 0,
            "slot": "67",
            "type": "t_mapping(t_uint256,t_struct(P2_Layer)835_storage)"
          }
        ],
        "numberOfBytes": "2176"
      },
      "t_struct(Distribute_State)725_storage": {
        "encoding": "inplace",
        "label": "struct Distribute_State",
        "members": [
          {
            "astId": 710,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "beforeP2Usdt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 712,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "beforeP2Per",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 714,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "beforeTeamUsdt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 716,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p1Ratio",
            "offset": 0,
            "slot": "3",
            "type": "t_uint24"
          },
          {
            "astId": 718,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p2BaseRatio",
            "offset": 3,
            "slot": "3",
            "type": "t_uint24"
          },
          {
            "astId": 720,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "p2PlusRatio",
            "offset": 6,
            "slot": "3",
            "type": "t_uint24"
          },
          {
            "astId": 722,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "burnRatio",
            "offset": 9,
            "slot": "3",
            "type": "t_uint24"
          },
          {
            "astId": 724,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "teamFeeRatio",
            "offset": 12,
            "slot": "3",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(P0_GradeInfo)688_storage": {
        "encoding": "inplace",
        "label": "struct P0_GradeInfo",
        "members": [
          {
            "astId": 677,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "isOpen",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 679,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "mixFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 681,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "initBaseProb",
            "offset": 0,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 683,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "mixExp",
            "offset": 3,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 685,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "failedAddProbMin",
            "offset": 5,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 687,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "failedAddProbMax",
            "offset": 8,
            "slot": "2",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(P0_MergePfGrade)703_storage": {
        "encoding": "inplace",
        "label": "struct P0_MergePfGrade",
        "members": [
          {
            "astId": 690,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "grade",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 692,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "gradeName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 694,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "mergeFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 696,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "mergeUseItemAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 698,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "latestId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 700,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "setMatadataId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 702,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "isOpen",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(P0_MergeState)708_storage": {
        "encoding": "inplace",
        "label": "struct P0_MergeState",
        "members": [
          {
            "astId": 705,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "agencyIncomePercent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 707,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "influencerIncomePercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(P0_PerFriendsProb)675_storage": {
        "encoding": "inplace",
        "label": "struct P0_PerFriendsProb",
        "members": [
          {
            "astId": 672,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "pfGrade",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 674,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "gradeProb",
            "offset": 0,
            "slot": "1",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(P0_State)670_storage": {
        "encoding": "inplace",
        "label": "struct P0_State",
        "members": [
          {
            "astId": 663,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "maxProb",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 665,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "addProbFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 667,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "addProbExp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 669,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "isVRF",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(P2_Aien)790_storage": {
        "encoding": "inplace",
        "label": "struct P2_Aien",
        "members": [
          {
            "astId": 775,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "staker",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 777,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "level",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 779,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "rewardPlus",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 781,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "rewardBase",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 783,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "rewardBaseDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 785,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "rewardPlusDebt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 787,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "plus_received",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 789,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "base_received",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(P2_Balances)811_storage": {
        "encoding": "inplace",
        "label": "struct P2_Balances",
        "members": [
          {
            "astId": 792,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "baseBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 794,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "plusBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 796,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "savedBaseBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 798,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "savedPlusBalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 800,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "add_dailyBASE",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 802,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "add_dailyPLUS",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 804,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "a",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 806,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "b",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 808,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "c",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 810,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "d",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(P2_Layer)835_storage": {
        "encoding": "inplace",
        "label": "struct P2_Layer",
        "members": [
          {
            "astId": 814,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "balances",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(P2_Balances)811_storage"
          },
          {
            "astId": 816,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "rewardBasePercent",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 818,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "rewardPlusPercent",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 820,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "dailyReward_Percent",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 822,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "add_dailyReward_Percent",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 824,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "rewardPlus",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 826,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "rewardBase",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 828,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 830,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "dailyRewardUpdateBlock",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 832,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "totalStakedAien",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 834,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "isOpen",
            "offset": 0,
            "slot": "19",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "640"
      },
      "t_struct(P2_User)773_storage": {
        "encoding": "inplace",
        "label": "struct P2_User",
        "members": [
          {
            "astId": 765,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "isBlockUser",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 767,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "plusRewarded",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 769,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "baseRewarded",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 772,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "tokenIds",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(UintSet)2287_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)1815_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1810,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1814,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2287_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2286,
            "contract": "contracts/Channel_iN/facets/P3Facet.sol:P3Facet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1815_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}