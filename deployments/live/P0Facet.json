{
  "address": "0xD8253000e9CF227bfe1b74f374fd4118a3D9D20e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addProb",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "perfs",
          "type": "uint256[]"
        }
      ],
      "name": "P0_AddProb_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLevelUp",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "P0_BaseMix_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "perfId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "perfGrade",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "perfURI",
          "type": "bytes"
        }
      ],
      "name": "P0_ItemMerge_Event",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "aienId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLevelUp",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usePower",
          "type": "uint256"
        }
      ],
      "name": "P0_PremiumMix_Event",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aienId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_pf_Ids",
          "type": "uint256[]"
        }
      ],
      "name": "P0_addProbCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_useItemId",
          "type": "uint256"
        }
      ],
      "name": "P0_baseMixCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_basicMergeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_getAddProbFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_getMaxProb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "P0_getMergeState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_grade",
          "type": "uint8"
        }
      ],
      "name": "P0_getMergeStates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "grade",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "gradeName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "mergeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mergeUseItemAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "latestId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setMatadataId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct P0_MergePfGrade",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_getMetadataMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P0_influencerMergeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_itemAmount",
          "type": "uint256"
        }
      ],
      "name": "P0_itemMerge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "P0_mixPFInfos",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_useItemId",
          "type": "uint256"
        }
      ],
      "name": "P0_premiumMixCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x67bc7d64d4dfbce4d2c7d13cc8295ccbe34f722c9869a1038dc204560a5bfb02",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xa5E5f12acC05B3D7E019747b511df4DaC8027Ce2",
    "contractAddress": null,
    "transactionIndex": 15,
    "gasUsed": "6141573",
    "logsBloom": "0x
    "blockHash": "0x8ea77ebc12eed1c0359df5532f1cdcbd81831e54ef7d03cc6a6fe8d0bcbe3940",
    "transactionHash": "0x67bc7d64d4dfbce4d2c7d13cc8295ccbe34f722c9869a1038dc204560a5bfb02",
    "logs": [],
    "blockNumber": 142976951,
    "cumulativeGasUsed": "13712039",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "83c48f9e98596308d956b145de5a12ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addProb\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"perfs\",\"type\":\"uint256[]\"}],\"name\":\"P0_AddProb_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLevelUp\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"P0_BaseMix_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"perfId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perfGrade\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"perfURI\",\"type\":\"bytes\"}],\"name\":\"P0_ItemMerge_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aienId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLevelUp\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usePower\",\"type\":\"uint256\"}],\"name\":\"P0_PremiumMix_Event\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_pf_Ids\",\"type\":\"uint256[]\"}],\"name\":\"P0_addProbCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_useItemId\",\"type\":\"uint256\"}],\"name\":\"P0_baseMixCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_basicMergeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_getAddProbFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_getMaxProb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"P0_getMergeState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_grade\",\"type\":\"uint8\"}],\"name\":\"P0_getMergeStates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"grade\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"gradeName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mergeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mergeUseItemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setMatadataId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"internalType\":\"struct P0_MergePfGrade\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_getMetadataMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P0_influencerMergeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_itemAmount\",\"type\":\"uint256\"}],\"name\":\"P0_itemMerge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"P0_mixPFInfos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_useItemId\",\"type\":\"uint256\"}],\"name\":\"P0_premiumMixCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"i-TEZ : P0 (Mix) Facet Contract\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"P0_getMaxProb()\":{\"notice\":\"P0 _ get functions\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Channel_iN/facets/P0Facet.sol\":\"P0Facet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Channel_iN/facets/P0Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {P0_MergePfGrade, AppStorage, Modifiers, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IDB} from \\\"../interfaces/IDB.sol\\\";\\nimport {IERC20} from \\\"../../shared/interfaces/IERC20.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC721} from \\\"../../shared/interfaces/IERC721.sol\\\";\\nimport {LibP0} from \\\"../libraries/LibP0.sol\\\";\\n\\ninterface IP0 {\\n    function mixPFInfos(\\n        uint _level\\n    ) external view returns (string memory, uint);\\n}\\n\\n/**\\n@dev i-TEZ : P0 (Mix) Facet Contract\\n */\\ncontract P0Facet is Modifiers {\\n    function P0_itemMerge(uint _itemId, uint _itemAmount) external {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        LibP0._itemMerge(msgsender, _itemId, _itemAmount);\\n    }\\n\\n    // function P0_itemGradeMerge(\\n    //     uint _itemId,\\n    //     uint _itemAmount,\\n    //     uint8 _grade\\n    // ) external {\\n    //     address msgsender = LibMeta.msgSender();\\n    //     LibP0._itemGradeMerge(msgsender, _itemId, _itemAmount, _grade);\\n    // }\\n\\n    function P0_baseMixCall(uint _id, uint _useItemId) external returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        return LibP0._baseMixCall(msgsender, _id, _useItemId);\\n    }\\n\\n    function P0_premiumMixCall(\\n        uint _id,\\n        uint _useItemId\\n    ) external returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        LibP0._premiumMixCall(msgsender, _id, _useItemId);\\n    }\\n\\n    function P0_addProbCall(\\n        uint _aienId,\\n        uint[] memory _pf_Ids\\n    ) external returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address msgsender = LibMeta.msgSender();\\n        LibP0._addProbCall(msgsender, _aienId, _pf_Ids);\\n    }\\n\\n    /**\\n    P0 _ get functions\\n     */\\n\\n    function P0_getMaxProb() external view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.p0_states.maxProb;\\n    }\\n\\n    // input ItemId\\ubcc4\\ub85c \\ubcd1\\ud569\\uc2dc \\uc18c\\uc694\\ub418\\ub294 Per, item\\uc218\\ub7c9\\n    function P0_getMergeState(uint _itemId) external view returns (uint, uint) {\\n        return LibP0._getMergeState(_itemId);\\n    }\\n\\n    // PF POWER ZONE \\uc0ac\\uc6a9\\ub418\\ub294 Per \\uc218\\ub7c9\\n    function P0_getAddProbFee() external view returns (uint) {\\n        return LibP0._getAddProbFee();\\n    }\\n\\n    // \\uc778\\ud50c\\ub8e8\\uc5b8\\uc11c \\ub8e8\\ube44\\uc628 \\ubcd1\\ud569\\uc2dc amount\\n    function P0_influencerMergeAmount() external view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"db\\\"]).influencerMergeAmount();\\n    }\\n\\n    // \\uc7ac\\ub2e8 \\ub8e8\\ube44\\uc628 \\ubcd1\\ud569\\uc2dc amount\\n    function P0_basicMergeAmount() external view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"db\\\"]).basicMergeAmount();\\n    }\\n\\n    // MixPFInfos\\n    function P0_mixPFInfos(\\n        uint _level\\n    ) external view returns (string memory, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IP0(s.contracts[\\\"p0\\\"]).mixPFInfos(_level);\\n    }\\n\\n    // Aien Metadata set Margin value\\n    function P0_getMetadataMargin() external view returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"db\\\"])._getMedataMargin();\\n    }\\n\\n    function P0_getMergeStates(\\n        uint8 _grade\\n    ) external view returns (P0_MergePfGrade memory) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.p0_mergePfGrades[_grade];\\n    }\\n}\\n\",\"keccak256\":\"0xf6abc470c8c8f78b0cce866bba13a61b4104adee0c763ee2b3b5e4bb78be397a\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IDB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// legacy db contract interface\\ninterface IDB {\\n    struct pf {\\n        uint id;\\n        uint class;\\n        bool isAien;\\n        uint usedAienId;\\n    }\\n\\n    struct pfGrade {\\n        uint normal;\\n        uint uncommon;\\n        uint rare;\\n        uint unique;\\n        uint legendary;\\n        uint myth;\\n        uint ancient;\\n    }\\n\\n    struct aien {\\n        uint id;\\n        // \\uac15\\ud654 \\ud69f\\uc218\\n        uint mixCount;\\n        //\\n        uint p2Level;\\n        // \\ud1a0\\ud0c8 \\uacbd\\ud5d8\\uce58\\n        uint totalExp;\\n        // \\ubbf8\\uc158 \\ubc0f, \\uc778\\ud50c\\ub8e8\\uc5b8\\uc11c \\ud65c\\ub3d9 \\uad00\\ub828 \\uacbd\\ud5d8\\uce58\\n        uint influExp;\\n        // \\uae30\\ubcf8 \\ud655\\ub960\\n        uint baseProb;\\n        // \\ud1a0\\ud0c8 \\ud655\\ub960\\n        uint totalProb;\\n        // is PF\\n        uint isPFid;\\n        // \\ucd94\\uac00\\ud655\\ub960\\n        uint addProb;\\n    }\\n\\n    struct User {\\n        // DB > idx\\n        uint userId;\\n        // token itme ID\\n        uint itemId;\\n        address incomeAddr;\\n        uint feeBalance;\\n        bool isAble;\\n        uint mintCount;\\n        uint useLevelupCount;\\n        uint useMergeCount;\\n        // uint ownerIncomePercent;\\n        // uint userIncomPercent;\\n        //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n        uint referralIncome;\\n        address agency;\\n        uint agencyIncome;\\n    }\\n\\n    function AIENS(uint _key) external view returns (aien memory);\\n\\n    function PFS(uint _key) external view returns (pf memory);\\n\\n    function getAien(uint _id) external view;\\n\\n    function getPF(uint _id) external view;\\n\\n    function getPfGrade(uint _id) external view returns (uint);\\n\\n    function setAien(uint _id) external;\\n\\n    function usePFimg(uint _aienId, uint _pfId) external;\\n\\n    function setAienAll(\\n        uint _id,\\n        uint _mixCount,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _totalProb,\\n        uint _isPFid,\\n        uint _addProb\\n    ) external;\\n\\n    function getContractAddr(\\n        string memory _name\\n    ) external view returns (address);\\n\\n    function burnValue(uint _burnAmount) external;\\n\\n    function setAienGradeInfo(uint _toGrade) external;\\n\\n    function subPfGrades(uint _pfId) external;\\n\\n    function setLevelUpStatus(uint _toGrade) external;\\n\\n    function _failedAienSet(\\n        uint _id,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _successAienSet(\\n        uint _id,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _mergeCalcul(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _mergeCalcul2(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _influencerMerge(\\n        address _to,\\n        uint _itemId,\\n        uint _referralIncome\\n    ) external returns (uint, string memory);\\n\\n    function _levelUpCalcul(\\n        uint _itemId,\\n        uint _fee\\n    ) external returns (address, address, uint, uint);\\n\\n    function _levelUpSucess(uint _id, uint _p2Level) external;\\n\\n    function _levelUpFailed(uint _id, uint _addProb) external;\\n\\n    function _mergeCount(\\n        address _agency,\\n        uint _agencyFee,\\n        address _influencer,\\n        uint _influencerFee\\n    ) external;\\n\\n    function usePFPower(uint _id, uint _usePower) external;\\n\\n    function addProbFee() external view returns (uint);\\n\\n    function PfGrades() external view returns (pfGrade memory);\\n\\n    function getAienGradeInfo() external view returns (uint[] memory);\\n\\n    function basicMergeAmount() external view returns (uint);\\n\\n    function influencerMergeAmount() external view returns (uint);\\n\\n    function _getMedataMargin() external view returns (uint, uint, uint);\\n\\n    function getAienLevel(uint _aienId) external view returns (uint);\\n\\n    function setPerprojectWallet(address _addr) external;\\n\\n    function setAgencyAddr(address _influencer, address _agency) external;\\n\\n    function setAgencyIncomePercent(uint _agencyIncomePercent) external;\\n\\n    function adminSetMergeAmount(\\n        uint _influencerMergeAmount,\\n        uint _basicMergeAmount,\\n        uint _agencyIncomePercent,\\n        uint _ownerIncomePercent\\n    ) external;\\n\\n    function getUserFromItem(uint _itemId) external view returns (User memory);\\n\\n    function adminSetMetaData(\\n        uint _pfId,\\n        uint8 _grade,\\n        string memory _seedHash\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb7bfad81b676bb5e847be713ae6e926ffe3b80f6c78b825a1d8c2ed2b1d3838e\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IP1 {\\n    struct PendingInfo {\\n        address user;\\n        // 1: \\ucd9c\\uae08\\uc694\\uccad,\\n        // 2: \\ucd9c\\uae08\\ucde8\\uc18c,\\n        // 3: \\uc644\\ub8cc,\\n        // 4: \\ucde8\\uc18c\\uc644\\ub8cc: \\uc644\\ub8cc\\uc2dc \\uc7ac\\uc608\\uce58 \\ubc84\\ud2bc \\ud65c\\uc131\\ud654\\n        uint8 pendingType;\\n        uint startTime;\\n        uint endTime;\\n        uint amount;\\n        // pending Id\\n        uint pendingId;\\n    }\\n\\n    function update() external returns (uint);\\n\\n    function diamond_P1_deposit(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint);\\n\\n    function diamond_P1_reDposit(address _sender) external returns (uint);\\n\\n    function diamond_P1_harvest(address _sender) external returns (uint);\\n\\n    function diamond_P1_pendingReward(\\n        address _sender,\\n        uint _withdrawBlock\\n    ) external view returns (uint);\\n\\n    function diamond_P1_addPower(\\n        address _sender,\\n        uint _aienId,\\n        uint _usePower\\n    ) external returns (uint);\\n\\n    function diamond_P1_widthdraw(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawCancel(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_widthdrawCancelConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_getPoolData() external view returns (uint, uint, uint);\\n\\n    function diamond_P1_getUserData(\\n        address _sender\\n    ) external view returns (uint, uint, uint, uint, uint);\\n\\n    function diamond_P1_getUnstakeData(\\n        address _sender\\n    ) external view returns (PendingInfo[] memory);\\n\\n    function diamond_P1_addDistributionAmountAll(uint _amount) external;\\n\\n    function unStakeTimeLock() external view returns (uint16);\\n\\n    function unStakeCancelTimeLock() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x07efaa8c8bc5cf474a039cab55457d26d607d1eb1a5b133c27962cba3bba2b39\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IP2 {\\n    struct User {\\n        bool isBlockUser;\\n        uint perRewarded;\\n        uint usdtRewarded;\\n        EnumerableSet.UintSet tokenIds;\\n    }\\n\\n    struct Aien {\\n        address staker;\\n        uint level;\\n        // requires value\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        uint rewardUsdtDebt;\\n        uint rewardPerDebt;\\n        ////////////////////\\n        uint per_received;\\n        uint usdt_received;\\n    }\\n\\n    struct Balances {\\n        // \\ub85c\\uc9c1\\uc0c1 \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\ud55c \\ubc38\\ub7f0\\uc2a4 \\ubcc0\\uc218 (\\uc2e4\\uc81c\\uc640 \\ub2e4\\ub97c \\uc218 \\uc788\\uc74c)\\n        uint perBalance;\\n        uint usdtBalance;\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508 \\ub418\\uc9c0 \\uc54a\\uc740 \\uc0c1\\ud0dc\\uc5d0\\uc11c\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508\\ub418\\uba74 \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\uc800\\uc7a5\\ub41c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ubcc0\\uc218\\n        uint savedPerBalance;\\n        uint savedUsdtBalance;\\n        // \\ud604\\uc7ac savedUsdt, savedPer\\ub97c \\ud1b5\\ud574 \\ub098\\uc628 \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\n        uint add_dailyUSDT;\\n        uint add_dailyPER;\\n        // \\ubcf4\\uc548\\uc0c1 \\ubb38\\uc81c\\uac00 \\uc0dd\\uaca8\\n        // \\uc608\\uc0c1\\ubcf4\\ub2e4 \\ub9ce\\uc740 withdraw\\ub97c \\uc694\\uccad\\ud558\\uac8c \\ub418\\ub294 \\uacbd\\uc6b0\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ud1a0\\ud0c8 \\ubc38\\ub7f0\\uc2a4\\uc640\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ucd9c\\uae08 \\ubc38\\ub7f0\\uc2a4\\ub97c \\ube44\\uad50\\ud558\\uc5ec\\n        // \\ucd9c\\uae08 \\uac00\\ub2a5\\ud55c\\uc9c0 \\uccb4\\ud06c\\ud558\\ub294 \\ubcc0\\uc218\\n        uint total_checkWithdrawPER;\\n        uint withdrawal_checkWithdrawPER;\\n        uint total_checkWithdrawUSDT;\\n        uint withdrawal_checkWithdrawUSDT;\\n    }\\n\\n    struct Layer {\\n        Balances balances;\\n        // P2\\uc5d0\\uc11c \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\ud1a0\\ud070 \\ubc30\\uc815 \\ubc1b\\uc744\\ub54c \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint rewardUsdtPercent;\\n        uint rewardPerPercent;\\n        // \\uc720\\uc800\\uc5d0\\uac8c \\ud558\\ub8e8\\uc5d0 \\ubd84\\ubc30\\ud558\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint dailyReward_Percent;\\n        // \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        // \\ubbf8\\uc624\\ud508\\uc2dc \\uc800\\uc7a5\\ud55c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ud37c\\uc13c\\ud2b8\\ubcc0\\uc218\\n        uint add_dailyReward_Percent;\\n        uint lastRewardBlock;\\n        uint dailyRewardUpdateBlock;\\n        uint totalStakedAien;\\n        bool isOpen;\\n    }\\n\\n    struct AienLoadData {\\n        //aien\\uc815\\ubcf4\\n        uint _aienId;\\n        uint _aienLevel;\\n        // \\ucd9c\\uae08 \\ud1a0\\ud0c8\\n        uint _aien_per_received;\\n        uint _aien_usdt_received;\\n        //\\ucd9c\\uae08 \\uac00\\ub2a5\\n        uint usdt_withdrawable;\\n        uint per_withdrawable;\\n        // block\\ub2f9 \\ub9ac\\uc6cc\\ub4dc\\n        uint block_reward_per;\\n        uint block_reward_usdt;\\n    }\\n\\n    struct LayerLoadData {\\n        bool isOpen;\\n        uint _layerNumber;\\n        uint _24h_reward_per;\\n        uint _24h_reward_usdt;\\n        uint totalStakedAien;\\n    }\\n    struct UserLoadData {\\n        uint _usdtRewarded;\\n        uint _perRewarded;\\n        bool _isBlockUser;\\n    }\\n\\n    function aiens(uint _id) external view returns (Aien memory);\\n\\n    function diamond_P2_deposit(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_withdraw(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_harvest(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_getUserInfo(\\n        address _sender\\n    )\\n        external\\n        view\\n        returns (\\n            UserLoadData memory,\\n            AienLoadData[] memory,\\n            LayerLoadData[] memory\\n        );\\n\\n    function diamond_P2_getLayerData(\\n        uint _number\\n    ) external view returns (uint, uint, uint);\\n\\n    function addPerUsdtDistribution(uint _usdt, uint _per) external;\\n\\n    function P2_usdtBalance() external view returns (uint);\\n\\n    function P2_perBalance() external view returns (uint);\\n\\n    function MAX_STAKING_LIMIT() external view returns (uint);\\n\\n    function layers(uint _number) external view returns (Layer memory);\\n\\n    function pendingReward(\\n        uint _aienId,\\n        uint _layerNumber,\\n        uint _withdrawBlock\\n    ) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0x2e90a8470442fec4da79c46739fcf8b958fe1503f519a5f7b2fa048697e2396d\",\"license\":\"MIT\"},\"contracts/Channel_iN/libraries/LibP0.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {User, P0_MergeState, P0_MergePfGrade, AppStorage, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IDB} from \\\"../interfaces/IDB.sol\\\";\\nimport {IERC721} from \\\"../../shared/interfaces/IERC721.sol\\\";\\nimport {IERC1155} from \\\"../../shared/interfaces/IERC1155.sol\\\";\\nimport {IERC20} from \\\"../../shared/interfaces/IERC20.sol\\\";\\nimport {LibDistribute} from \\\"../../shared/libraries/LibDistribute.sol\\\";\\n\\nlibrary LibP0 {\\n    event P0_BaseMix_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed itemId,\\n        uint itemAmount,\\n        bool isLevelUp,\\n        uint payment\\n    );\\n\\n    event P0_PremiumMix_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed itemId,\\n        uint itemAmount,\\n        bool isLevelUp,\\n        uint payment,\\n        uint usePower\\n    );\\n\\n    event P0_ItemMerge_Event(\\n        address indexed to,\\n        uint indexed perfId,\\n        uint indexed itemId,\\n        uint itemAmount,\\n        uint payment,\\n        uint perfGrade,\\n        bytes perfURI\\n    );\\n\\n    event P0_AddProb_Event(\\n        address indexed to,\\n        uint indexed aienId,\\n        uint indexed payment,\\n        uint addProb,\\n        uint[] perfs\\n    );\\n\\n    // uint payment\\n    function _baseMixCall(\\n        address _sender,\\n        uint _id,\\n        uint _useItemId\\n    ) internal returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        require(\\n            IERC721(s.contracts[\\\"aien\\\"]).ownerOf(_id) == _sender,\\n            \\\"not owner\\\"\\n        );\\n        IDB.aien memory _AIEN = IDB(s.contracts[\\\"db\\\"]).AIENS(_id);\\n\\n        require(s.p0_gradeInfos[_AIEN.p2Level].isOpen == true, \\\"not open\\\");\\n\\n        (\\n            address _influencer,\\n            address _agency,\\n            uint _influencerFee,\\n            uint _agencyFee\\n        ) = IDB(s.contracts[\\\"db\\\"])._levelUpCalcul(\\n                _useItemId,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n            );\\n\\n        IERC1155(s.contracts[\\\"item\\\"]).burn(_sender, _useItemId, 1);\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee,\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        if (_AIEN.p2Level == 0) {\\n            IDB(s.contracts[\\\"db\\\"])._levelUpSucess(_id, _AIEN.p2Level);\\n            emit P0_BaseMix_Event(\\n                _sender,\\n                _id,\\n                _useItemId,\\n                1,\\n                true,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n            );\\n            // emit MixCall(_id, 0, true, s.p0_gradeInfos[_AIEN.p2Level].mixFee);\\n\\n            return true;\\n        }\\n\\n        uint _random = __random(_sender);\\n\\n        // \\uc131\\uacf5\\uc2dc\\n        if (_random <= _AIEN.baseProb) {\\n            // \\uc131\\uacf5\\ub960 \\ucd08\\uae30\\ud654\\n            // \\ub808\\ubca8 \\uc0c1\\uc2b9\\n            IDB(s.contracts[\\\"db\\\"])._levelUpSucess(_id, _AIEN.p2Level);\\n        } else {\\n            // base\\uc131\\uacf5\\ub960\\uc5d0 \\ub79c\\ub364 \\uc131\\uacf5\\ub960 \\ucd94\\uac00\\n\\n            uint _randomAdd = __randomAddProb(\\n                _sender,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMax,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMin\\n            );\\n            // \\uacbd\\ud5d8\\uce58 \\uc0c1\\uc2b9\\n            // _AIEN[_id].baseProb += _randomAdd;\\n\\n            IDB(s.contracts[\\\"db\\\"])._levelUpFailed(_id, _randomAdd);\\n        }\\n\\n        // emit MixCall(\\n        //     _id,\\n        //     0,\\n        //     _random <= _AIEN.baseProb,\\n        //     s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        // );\\n        emit P0_BaseMix_Event(\\n            _sender,\\n            _id,\\n            _useItemId,\\n            1,\\n            _random <= _AIEN.baseProb,\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n        return true;\\n    }\\n\\n    function _premiumMixCall(\\n        address _sender,\\n        uint _aienId,\\n        uint _useItemId\\n    ) internal returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        IDB.aien memory _AIEN = IDB(s.contracts[\\\"db\\\"]).AIENS(_aienId);\\n\\n        require(_AIEN.p2Level != 0, \\\"not premium level\\\");\\n        require(s.p0_gradeInfos[_AIEN.p2Level].isOpen == true, \\\"not open\\\");\\n\\n        (\\n            address _influencer,\\n            address _agency,\\n            uint _influencerFee,\\n            uint _agencyFee\\n        ) = IDB(s.contracts[\\\"db\\\"])._levelUpCalcul(\\n                _useItemId,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n            );\\n\\n        IERC1155(s.contracts[\\\"item\\\"]).burn(_sender, _useItemId, 1);\\n\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee,\\n            s.p0_gradeInfos[_AIEN.p2Level].mixFee\\n        );\\n\\n        uint _random = __random(_sender);\\n        uint totalProb = 0;\\n        if (_AIEN.baseProb + _AIEN.addProb >= s.p0_states.maxProb) {\\n            // if (_AIEN.baseProb + _AIEN.addProb > _random) {\\n            totalProb = _AIEN.baseProb + _AIEN.addProb - s.p0_states.maxProb;\\n        }\\n\\n        if (_AIEN.baseProb + _AIEN.addProb >= _random) {\\n            emit P0_PremiumMix_Event(\\n                _sender,\\n                _aienId,\\n                _useItemId,\\n                1,\\n                true,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee,\\n                totalProb == 0 ? _AIEN.addProb : _AIEN.addProb - totalProb\\n            );\\n            // \\uc131\\uacf5\\ub960 \\ucd08\\uae30\\ud654\\n            // \\ub808\\ubca8 \\uc0c1\\uc2b9\\n            IDB(s.contracts[\\\"db\\\"])._successAienSet(\\n                _aienId,\\n                _AIEN.p2Level + 1,\\n                _AIEN.totalExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                _AIEN.influExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                s.p0_gradeInfos[_AIEN.p2Level].initBaseProb,\\n                totalProb\\n            );\\n        } else {\\n            emit P0_PremiumMix_Event(\\n                _sender,\\n                _aienId,\\n                _useItemId,\\n                1,\\n                false,\\n                s.p0_gradeInfos[_AIEN.p2Level].mixFee,\\n                totalProb == 0 ? _AIEN.addProb : _AIEN.addProb - totalProb\\n            );\\n\\n            uint _randomAdd = __randomAddProb(\\n                _sender,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMax,\\n                s.p0_gradeInfos[_AIEN.p2Level].failedAddProbMin\\n            );\\n\\n            IDB(s.contracts[\\\"db\\\"])._failedAienSet(\\n                _aienId,\\n                _AIEN.totalExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                _AIEN.influExp + s.p0_gradeInfos[_AIEN.p2Level].mixExp,\\n                _AIEN.baseProb + _randomAdd,\\n                totalProb\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    function _itemMerge(\\n        address _sender,\\n        uint _itemId,\\n        uint _itemAmount\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint mergeFee;\\n        address _influencer;\\n        uint _influencerFee;\\n        address _agency;\\n        uint _agencyFee;\\n        uint _influencerItemAmount;\\n\\n        if (_itemId <= 50) {\\n            (\\n                mergeFee,\\n                _influencer,\\n                _influencerFee,\\n                _agency,\\n                _agencyFee,\\n                _influencerItemAmount\\n            ) = IDB(s.contracts[\\\"db\\\"])._mergeCalcul(_itemId);\\n        } else {\\n            (\\n                mergeFee,\\n                _influencer,\\n                _influencerFee,\\n                _agency,\\n                _agencyFee,\\n                _influencerItemAmount\\n            ) = IDB(s.contracts[\\\"db\\\"])._mergeCalcul2(_itemId);\\n        }\\n\\n        require(_itemAmount == _influencerItemAmount);\\n\\n        // merge \\ud560\\ub54c \\uce74\\uc6b4\\ud2b8 \\uc801\\uc6a9 \\ud568\\uc218\\n        IDB(s.contracts[\\\"db\\\"])._mergeCount(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee\\n        );\\n        //\\n        IERC1155(s.contracts[\\\"item\\\"]).burn(_sender, _itemId, _itemAmount);\\n\\n        // IERC20(PER).transferFrom(msg.sender, address(this), mergeFee);\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            mergeFee\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            _agency,\\n            _agencyFee,\\n            _influencer,\\n            _influencerFee,\\n            mergeFee\\n        );\\n\\n        (uint mintPfId, string memory _pfURI) = IDB(s.contracts[\\\"db\\\"])\\n            ._influencerMerge(_sender, _itemId, 0);\\n\\n        emit P0_ItemMerge_Event(\\n            _sender,\\n            mintPfId,\\n            _itemId,\\n            _itemAmount,\\n            mergeFee,\\n            1,\\n            bytes(_pfURI)\\n        );\\n    }\\n\\n    // function _itemGradeMerge(\\n    //     address _sender,\\n    //     uint _itemId,\\n    //     uint _itemAmount,\\n    //     uint8 _grade\\n    // ) internal {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     P0_MergePfGrade memory _mergePfGrade = s.p0_mergePfGrades[_grade];\\n    //     require(_mergePfGrade.isOpen, \\\"PF Grade Merge function not open\\\");\\n    //     require(\\n    //         _itemAmount == _mergePfGrade.mergeUseItemAmount,\\n    //         \\\"not equal item amount\\\"\\n    //     );\\n\\n    //     (\\n    //         uint mergeFee,\\n    //         address _influencer,\\n    //         uint _influencerFee,\\n    //         address _agency,\\n    //         uint _agencyFee,\\n    //         uint _influencerItemAmount)= _mergeCalculate(_itemId, _grade);\\n\\n    //     IERC1155(s.contracts[\\\"item\\\"]).burn(\\n    //         _sender,\\n    //         _itemId,\\n    //         _influencerItemAmount\\n    //     );\\n\\n    //     IDB(s.contracts[\\\"db\\\"])._mergeCount(\\n    //         _agency,\\n    //         _agencyFee,\\n    //         _influencer,\\n    //         _influencerFee\\n    //     );\\n\\n    //     IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n    //         _sender,\\n    //         s.contracts[\\\"distribute\\\"],\\n    //         mergeFee\\n    //     );\\n\\n    //     LibDistribute.p0LvUpDistribute(\\n    //         _agency,\\n    //         _agencyFee,\\n    //         _influencer,\\n    //         _influencerFee,\\n    //         mergeFee\\n    //     );\\n\\n    //     (uint mintPfId, string memory _pfURI) = IDB(s.contracts[\\\"db\\\"])\\n    //         ._influencerMerge(_sender, _itemId, 0);\\n\\n    //     emit P0_ItemMerge_Event(\\n    //         _sender,\\n    //         mintPfId,\\n    //         _itemId,\\n    //         _itemAmount,\\n    //         mergeFee,\\n    //         _grade,\\n    //         bytes(_pfURI)\\n    //     );\\n\\n    // }\\n\\n    function _addProbCall(\\n        address _sender,\\n        uint _aienId,\\n        uint[] memory _pf_Ids\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IERC721(s.contracts[\\\"aien\\\"]).ownerOf(_aienId) == _sender,\\n            \\\"not owner\\\"\\n        );\\n\\n        require(__checkDuplicates(_pf_Ids) == false, \\\"duplicate pf id\\\");\\n        require(\\n            __checkERC721sOwner(_sender, _pf_Ids) == true,\\n            \\\"not owner of perfriends\\\"\\n        );\\n        uint _gradeProb = __checkERC721sGrade(_pf_Ids);\\n        IERC20(s.contracts[\\\"per\\\"]).transferFrom(\\n            _sender,\\n            s.contracts[\\\"distribute\\\"],\\n            s.p0_states.addProbFee * _pf_Ids.length\\n        );\\n\\n        for (uint i = 0; i < _pf_Ids.length; i++) {\\n            IERC721(s.contracts[\\\"perfriends\\\"]).burn(_pf_Ids[i]);\\n            IDB(s.contracts[\\\"db\\\"]).subPfGrades(_pf_Ids[i]);\\n        }\\n\\n        IDB.aien memory _AIEN = IDB(s.contracts[\\\"db\\\"]).AIENS(_aienId);\\n        IDB(s.contracts[\\\"db\\\"]).setAienAll(\\n            _aienId,\\n            _AIEN.mixCount,\\n            _AIEN.p2Level,\\n            _AIEN.totalExp + (s.p0_states.addProbExp * _pf_Ids.length),\\n            _AIEN.influExp,\\n            _AIEN.baseProb,\\n            0,\\n            _AIEN.isPFid,\\n            _AIEN.addProb + _gradeProb\\n        );\\n\\n        LibDistribute.p0LvUpDistribute(\\n            s.contracts[\\\"team\\\"],\\n            (s.p0_states.addProbFee * _pf_Ids.length) / 10,\\n            s.contracts[\\\"team\\\"],\\n            0,\\n            s.p0_states.addProbFee * _pf_Ids.length\\n        );\\n\\n        emit P0_AddProb_Event(\\n            _sender,\\n            _aienId,\\n            s.p0_states.addProbFee,\\n            _gradeProb,\\n            _pf_Ids\\n        );\\n    }\\n\\n    // internal functions\\n    function __random(address _sender) internal returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        // if (s.orakl  ? oraklVRF() : nativeRF())\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(block.timestamp, _sender, block.coinbase)\\n        );\\n        return (uint(hash) % (s.p0_states.maxProb - 0 + 1)) + 0;\\n    }\\n\\n    function __randomAddProb(\\n        address _sender,\\n        uint _max,\\n        uint _min\\n    ) internal returns (uint) {\\n        // if (s.orakl  ? oraklVRF() : nativeRF())\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(block.timestamp, _sender, block.coinbase)\\n        );\\n        return (uint(hash) % (_max - _min + 1)) + _min;\\n    }\\n\\n    function __checkDuplicates(\\n        uint[] memory array\\n    ) internal pure returns (bool) {\\n        for (uint i = 0; i < array.length - 1; i++) {\\n            for (uint j = i + 1; j < array.length; j++) {\\n                if (array[i] == array[j]) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // \\ub2e4\\uc911 ERC721 owner\\ud655\\uc778\\n    function __checkERC721sOwner(\\n        address _owner,\\n        uint[] memory _ids\\n    ) internal view returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        for (uint i = 0; i < _ids.length; i++) {\\n            if (IERC721(s.contracts[\\\"perfriends\\\"]).ownerOf(_ids[i]) != _owner)\\n                return false;\\n        }\\n        return true;\\n    }\\n\\n    // \\ub2e4\\uc911 ERC721\\uc758 \\ub4f1\\uae09\\ubcc4 mixPFInfos \\ud569\\uc744 \\uad6c\\ud55c\\ub2e4.\\n    function __checkERC721sGrade(\\n        uint[] memory _ids\\n    ) internal view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint _gradeProb = 0;\\n        for (uint i = 0; i < _ids.length; i++) {\\n            _gradeProb += s\\n                .p0_perFriendsProbs[IDB(s.contracts[\\\"db\\\"]).PFS(_ids[i]).class]\\n                .gradeProb;\\n        }\\n        return _gradeProb;\\n    }\\n\\n    function _getAddProbFee() internal view returns (uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return IDB(s.contracts[\\\"p0\\\"]).addProbFee();\\n    }\\n\\n    function _getMergeState(uint _itemId) internal view returns (uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        (uint PerPrice, , , , , uint ItemAmount) = IDB(s.contracts[\\\"db\\\"])\\n            ._mergeCalcul(_itemId);\\n        return (PerPrice, ItemAmount);\\n    }\\n\\n    // function _mergeCalculate(\\n    //     uint _itemId,\\n    //     uint8 _grade\\n    // ) internal returns (uint, address, uint, address, uint, uint) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     P0_MergeState memory _mergeState = s.p0_mergeState;\\n    //     User memory _user = IDB(s.contracts[\\\"db\\\"]).getUserFromItem(_itemId);\\n    //     P0_MergePfGrade memory _mergePfGrade = s.p0_mergePfGrades[_grade];\\n\\n    //     address agency;\\n    //     address influencer;\\n    //     uint _influeIncome = _mergePfGrade.mergeFee * _mergePfGrade.influencerIncomePercent / 1e5;\\n    //     uint _agencyIncome = _mergePfGrade.mergeFee * _mergePfGrade.agencyIncomePercent / 1e5;\\n\\n    //     if(_itemId < 50){\\n    //         agency = s.contracts[\\\"team\\\"];\\n    //         influencer = s.contracts[\\\"team\\\"];\\n    //     } else {\\n    //         _user.agency == address(0) ? agency = s.contracts[\\\"team\\\"]\\n    //         influencer = _user.incomeAddr;\\n    //     }\\n\\n    //     return(_mergePfGrade.mergeFee, influencer, _influeIncome, agency, _agencyIncome, _mergePfGrade.mergeUseItemAmount);\\n\\n    // }\\n}\\n\",\"keccak256\":\"0xb774216b981af5007b71b75b0ca456e2b4a03e316b9f06211cda44d2bfe51ab0\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xdc916985bab8246380c2188436b2e25e333d34e9fdc7bf3b0245f5bcc716e5dc\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC1155 {\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address account, uint256 id, uint256 value) external;\\n\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcbee42741d36c65c96f34a6e3e32ced2d36d50cd51dc3da21954e48b8bb6cf6e\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n//import \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\n/* interface IERC721 is IERC165 { */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function burn(uint256 _tokenId) external;\\n\\n    function safeMintByMinter(address _to) external;\\n\\n    function nextTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3dfb334f4ed930d3eb3b781f7605fe1ab071b54c66540e99c4e37c437ff4a93a\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IKlaySwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// 0xc6a2ad8cc6e4a7e08fc37cc5954be07d499e7654 KSP\\n// 0x7A74B3be679E194E1D6A0C29A343ef8D2a5AC876 Util\\ninterface IKlaySwap {\\n    function estimateSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] memory path\\n    ) external view returns (uint amountOut);\\n\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint amountA,\\n        address tokenB,\\n        uint amountB,\\n        address[] memory path\\n    ) external;\\n}\\n\\n\\n\\n\\n\",\"keccak256\":\"0xdf4506259a183c376f7e8dec594a1ea6dd1e07c6cf048c0a0ea1b5014e666cba\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\n// using EnumerableSet for EnumerableSet.AddressSet;\\n// i-Tez Structs\\n//- P0 struct\\nstruct P0_State {\\n    uint24 maxProb;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\uac1c\\ub2f9 \\uc218\\uc218\\ub8cc\\n    uint addProbFee;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\ud68d\\ub4dd \\uacbd\\ud5d8\\uce58\\n    uint16 addProbExp;\\n    // bool\\n    bool isVRF;\\n}\\nstruct P0_PerFriendsProb {\\n    string pfGrade;\\n    uint24 gradeProb;\\n}\\n\\nstruct P0_GradeInfo {\\n    // \\ub2e4\\uc74c level\\uc774 \\uc5f4\\ub838\\ub294\\uc9c0 \\ud655\\uc778\\n    bool isOpen;\\n    // level\\ubcc4 mix fee\\n    uint mixFee;\\n    // \\ub808\\ubca8\\uc5c5 \\uc131\\uacf5\\uc2dc level\\ubcc4 \\ucd08\\uae30 base \\ud655\\ub960\\n    uint24 initBaseProb;\\n    // level\\ubcc4 \\ucd94\\uac00 \\ud655\\ub960 \\ubc38\\ub7f0\\uc2a4 \\uc870\\uc815\\uac12\\n    uint16 mixExp;\\n    // level\\ubcc4 \\ud569\\uc131 \\uc2e4\\ud328\\uc2dc \\ucd94\\uac00 \\ud655\\ub960 min,max\\n    uint24 failedAddProbMin;\\n    // 1000 = 0.1%, 10000 = 0.01%\\n    uint24 failedAddProbMax;\\n}\\n\\nstruct P0_MergePfGrade {\\n    uint8 grade;\\n    string gradeName;\\n    uint mergeFee;\\n    uint mergeUseItemAmount;\\n    uint latestId;\\n    uint setMatadataId;\\n    bool isOpen;\\n}\\nstruct P0_MergeState {\\n    uint agencyIncomePercent;\\n    uint influencerIncomePercent;\\n    // 1e5 = 100%\\n    // uint maxIncomePercent;\\n}\\n// //- Distribute struct\\nstruct Distribute_State {\\n    uint beforeP2Usdt;\\n    uint beforeP2Per;\\n    uint beforeTeamUsdt;\\n    // distribute ratios\\n    uint24 p1Ratio;\\n    uint24 p2PerRatio;\\n    uint24 p2UsdtRatio;\\n    uint24 burnRatio;\\n    uint24 teamUsdtRatio;\\n}\\n// DB > Filtered User Struct\\nstruct User {\\n    // DB > idx\\n    uint userId;\\n    // token itme ID\\n    uint itemId;\\n    address incomeAddr;\\n    uint feeBalance;\\n    bool isAble;\\n    uint mintCount;\\n    uint useLevelupCount;\\n    uint useMergeCount;\\n    //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n    uint referralIncome;\\n    address agency;\\n    uint agencyIncome;\\n}\\n\\n// P0 End\\nstruct AppStorage {\\n    // address constants\\n    mapping(string => address) contracts;\\n    // i-Tez/////////////////////////////\\n    // P0 ///////////////////////////////\\n    P0_State p0_states;\\n    P0_GradeInfo[11] p0_gradeInfos;\\n    mapping(uint => P0_PerFriendsProb) p0_perFriendsProbs;\\n    /////////////////////////////////////\\n    // Distribute ///////////////////////\\n    Distribute_State distribute_states;\\n    uint aienMintFee;\\n    // Distribute\\n    uint ksSwapLimit;\\n    bool isAutoDistribute;\\n    // P0 - Item Merge Grade Infos\\n    mapping(uint8 => P0_MergePfGrade) p0_mergePfGrades;\\n    mapping(uint => string) pfMetaURI;\\n    P0_MergeState p0_mergeState;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\\n/**\\n@dev global modifier\\n */\\ncontract Modifiers {\\n    modifier onlyDev() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    // modifier checkRole(uint16 _role) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     require(\\n    //         s.roles[_role].accounts.contains(LibMeta.msgSender()),\\n    //         \\\"AccessControl: sender does not have required role\\\"\\n    //     );\\n    //     _;\\n    // }\\n}\\n\",\"keccak256\":\"0x39cfdb5aedd9674c863d4fbbbcb26f112e9a7885b7d3c09570e9511371c86823\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xaea50a523e0ff67f5fc59946320f11efcfc09c75a972788f2884b9d1198a83d9\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDistribute.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, LibAppStorage} from \\\"./LibAppStorage.sol\\\";\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {IKlaySwap} from \\\"../interfaces/IKlaySwap.sol\\\";\\nimport {IP2} from \\\"../../Channel_iN/interfaces/IP2.sol\\\";\\nimport {IP1} from \\\"../../Channel_iN/interfaces/IP1.sol\\\";\\n\\nlibrary LibDistribute {\\n    //\\n    //\\n    // \\u2500\\u2500\\u2500 P0 LV UP DISTRIBUTION \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    function p0LvUpDistribute(\\n        address _agency,\\n        uint _agencyAmount,\\n        address _influencer,\\n        uint _influencerAmount,\\n        uint _totalAmount\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        (\\n            uint p1Amount,\\n            uint p2Amount,\\n            uint burnAmount,\\n            uint teamAmountForUsdt,\\n            uint p2AmountForUsdt\\n        ) = distributeCalc(_totalAmount);\\n        address per = s.contracts[\\\"per\\\"];\\n\\n        IERC20(per).transfer(_agency, _agencyAmount);\\n        IERC20(per).transfer(_influencer, _influencerAmount);\\n        IERC20(per).transfer(s.contracts[\\\"burn\\\"], burnAmount);\\n        IERC20(per).transfer(s.contracts[\\\"p2\\\"], p2Amount);\\n        IERC20(per).transfer(s.contracts[\\\"p1\\\"], p1Amount);\\n        IP2(s.contracts[\\\"p2\\\"]).addPerUsdtDistribution(0, p2Amount);\\n        IP1(s.contracts[\\\"p1\\\"]).diamond_P1_addDistributionAmountAll(p1Amount);\\n\\n        // IERC20(PER).transfer(P1, )\\n        // \\ucd94\\uac00 \\ub418\\uc5b4\\uc57c\\ud560 \\uac83\\ub4e4\\n        // 1.P1 10% PER\\n        // 2.P2 20% PER\\n        // 3.Burn 1% PER\\n        s.distribute_states.beforeP2Per += p2Amount;\\n        s.distribute_states.beforeP2Usdt += p2AmountForUsdt;\\n        s.distribute_states.beforeTeamUsdt += teamAmountForUsdt;\\n    }\\n\\n    function distributeCalc(\\n        uint _amount\\n    ) internal view returns (uint, uint, uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint _p1Amount = (_amount * s.distribute_states.p1Ratio) / 100;\\n        uint _p2Amount = (_amount * s.distribute_states.p2PerRatio) / 100;\\n        uint _burnAmount = (_amount * s.distribute_states.burnRatio) / 100;\\n        uint _teamAmountForUsdt = (_amount *\\n            s.distribute_states.teamUsdtRatio) / 100;\\n        uint _p2AmountForUsdt = (_amount * s.distribute_states.p2UsdtRatio) /\\n            100;\\n        return (\\n            _p1Amount,\\n            _p2Amount,\\n            _burnAmount,\\n            _teamAmountForUsdt,\\n            _p2AmountForUsdt\\n        );\\n    }\\n\\n    function swapToDistribute() internal {\\n        (bool run, uint thisBalance, uint estimateUsdt) = isSwap();\\n        require(run == true, \\\"swapToDistribute: swap is not needed\\\");\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        address[] memory path;\\n\\n        IERC20(s.contracts[\\\"per\\\"]).approve(\\n            s.contracts[\\\"klayswap\\\"],\\n            thisBalance\\n        );\\n\\n        IKlaySwap(s.contracts[\\\"klayswap\\\"]).exchangeKctPos(\\n            s.contracts[\\\"per\\\"],\\n            thisBalance,\\n            s.contracts[\\\"usdt\\\"],\\n            estimateUsdt,\\n            path\\n        );\\n\\n        _swapToCalculate();\\n    }\\n\\n    function _swapToCalculate() internal returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint usdtBalance = IERC20(s.contracts[\\\"usdt\\\"]).balanceOf(address(this));\\n        uint calculatePercent = s.distribute_states.p2UsdtRatio +\\n            s.distribute_states.teamUsdtRatio;\\n\\n        uint _p2UsdtAmount = (usdtBalance * s.distribute_states.p2UsdtRatio) /\\n            calculatePercent;\\n        uint _teamUsdtAmount = (usdtBalance *\\n            s.distribute_states.teamUsdtRatio) / calculatePercent;\\n\\n        IERC20(s.contracts[\\\"usdt\\\"]).transfer(s.contracts[\\\"p2\\\"], _p2UsdtAmount);\\n\\n        IERC20(s.contracts[\\\"usdt\\\"]).transfer(\\n            s.contracts[\\\"team\\\"],\\n            _teamUsdtAmount\\n        );\\n\\n        IP2(s.contracts[\\\"p2\\\"]).addPerUsdtDistribution(\\n            _p2UsdtAmount,\\n            s.distribute_states.beforeP2Per\\n        );\\n\\n        s.distribute_states.beforeP2Per = 0;\\n        s.distribute_states.beforeP2Usdt = 0;\\n        s.distribute_states.beforeTeamUsdt = 0;\\n    }\\n\\n    function getDistributePrice() internal view returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.distribute_states.beforeP2Usdt,\\n            s.distribute_states.beforeP2Per,\\n            s.distribute_states.beforeTeamUsdt\\n        );\\n    }\\n\\n    // function p0_transferForDistribute() internal returns (uint, uint, uint) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     uint beforeP2Usdt = s.distribute_states.beforeP2Usdt;\\n    //     uint beforeP2Per = s.distribute_states.beforeP2Per;\\n    //     uint beforeTeamUsdt = s.distribute_states.beforeTeamUsdt;\\n    //     address per = s.contracts[\\\"per\\\"];\\n    //     // require(\\n    //     //     LibMeta.msgSender() == LibDiamond.enforceIsContractOwner(),\\n    //     //     \\\"you are not dev\\\"\\n    //     // );\\n    //     IERC20(per).transfer(\\n    //         LibMeta.msgSender(),\\n    //         beforeP2Usdt + beforeTeamUsdt\\n    //     );\\n    //     uint _beforeP2Usdt = beforeP2Usdt;\\n    //     uint _beforeP2Per = beforeP2Per;\\n    //     uint _beforeTeamUsdt = beforeTeamUsdt;\\n\\n    //     beforeP2Usdt = 0;\\n    //     beforeP2Per = 0;\\n    //     beforeTeamUsdt = 0;\\n\\n    //     return (_beforeP2Usdt, _beforeP2Per, _beforeTeamUsdt);\\n    // }\\n\\n    function isSwap() internal view returns (bool, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address[] memory path;\\n        uint _balance = IERC20(s.contracts[\\\"per\\\"]).balanceOf(address(this));\\n\\n        uint estimateUsdt = IKlaySwap(s.contracts[\\\"klayswaputil\\\"]).estimateSwap(\\n            s.contracts[\\\"per\\\"],\\n            s.contracts[\\\"usdt\\\"],\\n            _balance,\\n            path\\n        );\\n\\n        if (estimateUsdt > s.ksSwapLimit && s.isAutoDistribute == true) {\\n            return (true, _balance, estimateUsdt);\\n        } else {\\n            return (false, 0, 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce77e1d0c08372bd05129b0b7fe85b7b7ba29a83de5eff262d5b30f8b68f495d\",\"license\":\"UNLICENSED\"},\"contracts/shared/libraries/LibMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"\\n            )\\n        );\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194f61daa9d3c92ca3de358b76506dbb1e9e39211dc5b49768f18cc38f85b1ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063d2236a5411610071578063d2236a54146101b8578063d229a392146101d6578063ddb2bedf146101f4578063e488a83a14610210578063f3ebac5714610240578063f6afa8471461025e576100b4565b80630b0e517a146100b95780632b2dc69e146100d95780633576742f146101095780636d1d105e146101275780637174e25814610157578063ce47adfa14610187575b600080fd5b6100c161028f565b6040516100d0939291906134d3565b60405180910390f35b6100f360048036038101906100ee9190613557565b610358565b60405161010091906136e9565b60405180910390f35b61011161048c565b60405161011e919061370b565b60405180910390f35b610141600480360381019061013c919061389a565b61054c565b60405161014e9190613905565b60405180910390f35b610171600480360381019061016c9190613920565b610578565b60405161017e9190613905565b60405180910390f35b6101a1600480360381019061019c9190613960565b6105a5565b6040516101af9291906139d7565b60405180910390f35b6101c061067b565b6040516101cd919061370b565b60405180910390f35b6101de61068a565b6040516101eb919061370b565b60405180910390f35b61020e60048036038101906102099190613920565b61074a565b005b61022a60048036038101906102259190613920565b610773565b6040516102379190613905565b60405180910390f35b6102486107a1565b604051610255919061370b565b60405180910390f35b61027860048036038101906102739190613960565b6107d0565b604051610286929190613a07565b60405180910390f35b60008060008061029d6107e5565b9050806000016040516102af90613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9db98966040518163ffffffff1660e01b8152600401606060405180830381865afa158015610328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034c9190613ab1565b93509350935050909192565b610360613478565b600061036a6107e5565b905080602d0160008460ff1660ff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016001820180546103bf90613b33565b80601f01602080910402602001604051908101604052809291908181526020018280546103eb90613b33565b80156104385780601f1061040d57610100808354040283529160200191610438565b820191906000526020600020905b81548152906001019060200180831161041b57829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050915050919050565b6000806104976107e5565b9050806000016040516104a990613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663340c2acd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105469190613b64565b91505090565b6000806105576107e5565b905060006105636107ea565b905061057081868661089a565b505092915050565b6000806105836107e5565b9050600061058f6107ea565b905061059c818686611013565b50505092915050565b60606000806105b26107e5565b9050806000016040516105c490613bdd565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316dba26f856040518263ffffffff1660e01b815260040161062b919061370b565b600060405180830381865afa158015610648573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106719190613c98565b9250925050915091565b60006106856119a3565b905090565b6000806106956107e5565b9050806000016040516106a790613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6e5f5006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107449190613b64565b91505090565b60006107546107e5565b905060006107606107ea565b905061076d818585611a63565b50505050565b60008061077e6107e5565b9050600061078a6107ea565b9050610797818686611fc8565b9250505092915050565b6000806107ac6107e5565b90508060010160000160009054906101000a900462ffffff1662ffffff1691505090565b6000806107dc836128d3565b91509150915091565b600090565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361089357600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050610897565b3390505b90565b60006108a46107e5565b90508373ffffffffffffffffffffffffffffffffffffffff16816000016040516108cd90613d40565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610934919061370b565b602060405180830381865afa158015610951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109759190613db3565b73ffffffffffffffffffffffffffffffffffffffff16146109cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c290613e2c565b60405180910390fd5b600015156109d8836129b3565b151514610a1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1190613e98565b60405180910390fd5b60011515610a288584612a57565b151514610a6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6190613f04565b60405180910390fd5b6000610a7583612b99565b905081600001604051610a8790613f70565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8684600001604051610ae290613fd1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686518660010160010154610b259190614015565b6040518463ffffffff1660e01b8152600401610b4393929190614066565b6020604051808303816000875af1158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8691906140c9565b5060005b8351811015610d265782600001604051610ba390614142565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68858381518110610c0057610bff614157565b5b60200260200101516040518263ffffffff1660e01b8152600401610c24919061370b565b600060405180830381600087803b158015610c3e57600080fd5b505af1158015610c52573d6000803e3d6000fd5b5050505082600001604051610c6690613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2a6a062858381518110610cc357610cc2614157565b5b60200260200101516040518263ffffffff1660e01b8152600401610ce7919061370b565b600060405180830381600087803b158015610d0157600080fd5b505af1158015610d15573d6000803e3d6000fd5b505050508080600101915050610b8a565b50600082600001604051610d3990613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c4de8d7866040518263ffffffff1660e01b8152600401610da0919061370b565b61012060405180830381865afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de2919061426b565b905082600001604051610df490613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a02db9a0868360200151846040015188518860010160020160009054906101000a900461ffff1661ffff16610e6f9190614015565b8660600151610e7e9190614299565b86608001518760a0015160008960e001518b8b6101000151610ea09190614299565b6040518a63ffffffff1660e01b8152600401610ec499989796959493929190614312565b600060405180830381600087803b158015610ede57600080fd5b505af1158015610ef2573d6000803e3d6000fd5b50505050610fb283600001604051610f09906143eb565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a86518660010160010154610f4e9190614015565b610f58919061442f565b85600001604051610f68906143eb565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600088518860010160010154610fad9190614015565b612cda565b8260010160010154858773ffffffffffffffffffffffffffffffffffffffff167f99cb040f26b9f8ab0196325428931da1473bc4b7e3f5477d08e93c1713bc0513858860405161100392919061450f565b60405180910390a4505050505050565b60008061101e6107e5565b905060008160000160405161103290613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c4de8d7866040518263ffffffff1660e01b8152600401611099919061370b565b61012060405180830381865afa1580156110b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110db919061426b565b90506000816040015103611124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111b9061458b565b60405180910390fd5b60011515826004018260400151600b811061114257611141614157565b5b6003020160000160009054906101000a900460ff16151514611199576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611190906145f7565b60405180910390fd5b600080600080856000016040516111af90613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637bcb71a689886004018860400151600b811061121457611213614157565b5b60030201600101546040518363ffffffff1660e01b8152600401611239929190613a07565b6080604051808303816000875af1158015611258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127c9190614617565b935093509350935085600001604051611294906146ca565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca8b8a60016040518463ffffffff1660e01b81526004016113009392919061471a565b600060405180830381600087803b15801561131a57600080fd5b505af115801561132e573d6000803e3d6000fd5b505050508560000160405161134290613f70565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8b8860000160405161139d90613fd1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896004018960400151600b81106113e6576113e5614157565b5b60030201600101546040518463ffffffff1660e01b815260040161140c93929190614066565b6020604051808303816000875af115801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f91906140c9565b5061147e838286858a6004018a60400151600b811061147157611470614157565b5b6003020160010154612cda565b60006114898b613236565b905060008760010160000160009054906101000a900462ffffff1662ffffff168761010001518860a001516114be9190614299565b10611501578760010160000160009054906101000a900462ffffff1662ffffff168761010001518860a001516114f49190614299565b6114fe9190614751565b90505b818761010001518860a001516115179190614299565b1061173457898b8d73ffffffffffffffffffffffffffffffffffffffff167f2204f6ff22d33db4677f6c4e555d9994ed7df4af0ae306770814a6e91d920c896001808d6004018d60400151600b811061157357611572614157565b5b60030201600101546000881461159957878e61010001516115949190614751565b6115a0565b8d61010001515b6040516115b09493929190614785565b60405180910390a4876000016040516115c890613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eab965818c60018a604001516116249190614299565b8b6004018b60400151600b811061163e5761163d614157565b5b6003020160020160039054906101000a900461ffff1661ffff168b606001516116679190614299565b8c6004018c60400151600b811061168157611680614157565b5b6003020160020160039054906101000a900461ffff1661ffff168c608001516116aa9190614299565b8d6004018d60400151600b81106116c4576116c3614157565b5b6003020160020160009054906101000a900462ffffff16876040518763ffffffff1660e01b81526004016116fd9695949392919061480a565b600060405180830381600087803b15801561171757600080fd5b505af115801561172b573d6000803e3d6000fd5b50505050611990565b898b8d73ffffffffffffffffffffffffffffffffffffffff167f2204f6ff22d33db4677f6c4e555d9994ed7df4af0ae306770814a6e91d920c89600160008d6004018d60400151600b811061178c5761178b614157565b5b6003020160010154600088146117b257878e61010001516117ad9190614751565b6117b9565b8d61010001515b6040516117c99493929190614785565b60405180910390a460006118488d8a6004018a60400151600b81106117f1576117f0614157565b5b6003020160020160089054906101000a900462ffffff1662ffffff168b6004018b60400151600b811061182757611826614157565b5b6003020160020160059054906101000a900462ffffff1662ffffff166132c9565b90508860000160405161185a90613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663588e8f858d8b6004018b60400151600b81106118bf576118be614157565b5b6003020160020160039054906101000a900461ffff1661ffff168b606001516118e89190614299565b8c6004018c60400151600b811061190257611901614157565b5b6003020160020160039054906101000a900461ffff1661ffff168c6080015161192b9190614299565b858d60a0015161193b9190614299565b876040518663ffffffff1660e01b815260040161195c95949392919061486b565b600060405180830381600087803b15801561197657600080fd5b505af115801561198a573d6000803e3d6000fd5b50505050505b6001985050505050505050509392505050565b6000806119ae6107e5565b9050806000016040516119c090613bdd565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637aa085746040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5d9190613b64565b91505090565b6000611a6d6107e5565b905060008060008060008060328911611b555786600001604051611a9090613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663738258938a6040518263ffffffff1660e01b8152600401611af7919061370b565b60c060405180830381865afa158015611b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3891906148be565b809650819750829850839950849a50859b50505050505050611c26565b86600001604051611b6590613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663357c498a8a6040518263ffffffff1660e01b8152600401611bcc919061370b565b60c060405180830381865afa158015611be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0d91906148be565b809650819750829850839950849a50859b505050505050505b808814611c3257600080fd5b86600001604051611c4290613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c4b4b42848488886040518563ffffffff1660e01b8152600401611caf949392919061494b565b600060405180830381600087803b158015611cc957600080fd5b505af1158015611cdd573d6000803e3d6000fd5b5050505086600001604051611cf1906146ca565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca8b8b8b6040518463ffffffff1660e01b8152600401611d5c93929190614990565b600060405180830381600087803b158015611d7657600080fd5b505af1158015611d8a573d6000803e3d6000fd5b5050505086600001604051611d9e90613f70565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8b89600001604051611df990613fd1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b8152600401611e4793929190614066565b6020604051808303816000875af1158015611e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8a91906140c9565b50611e98838387878a612cda565b60008088600001604051611eab90613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632b2e8efb8d8d60006040518463ffffffff1660e01b8152600401611f17939291906149c7565b6000604051808303816000875af1158015611f36573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611f5f91906149fe565b915091508a828d73ffffffffffffffffffffffffffffffffffffffff167f2b5c6da75471a32fa816831df06c6a172203625ece9bf5c72a71f67c6aabff818d8c600187604051611fb29493929190614aaf565b60405180910390a4505050505050505050505050565b600080611fd36107e5565b90508473ffffffffffffffffffffffffffffffffffffffff1681600001604051611ffc90613d40565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b8152600401612063919061370b565b602060405180830381865afa158015612080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a49190613db3565b73ffffffffffffffffffffffffffffffffffffffff16146120fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f190613e2c565b60405180910390fd5b60008160000160405161210c90613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c4de8d7866040518263ffffffff1660e01b8152600401612173919061370b565b61012060405180830381865afa158015612191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b5919061426b565b905060011515826004018260400151600b81106121d5576121d4614157565b5b6003020160000160009054906101000a900460ff1615151461222c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612223906145f7565b60405180910390fd5b6000806000808560000160405161224290613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637bcb71a689886004018860400151600b81106122a7576122a6614157565b5b60030201600101546040518363ffffffff1660e01b81526004016122cc929190613a07565b6080604051808303816000875af11580156122eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230f9190614617565b935093509350935085600001604051612327906146ca565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca8b8a60016040518463ffffffff1660e01b81526004016123939392919061471a565b600060405180830381600087803b1580156123ad57600080fd5b505af11580156123c1573d6000803e3d6000fd5b50505050856000016040516123d590613f70565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8b8860000160405161243090613fd1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896004018960400151600b811061247957612478614157565b5b60030201600101546040518463ffffffff1660e01b815260040161249f93929190614066565b6020604051808303816000875af11580156124be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e291906140c9565b50612511838286858a6004018a60400151600b811061250457612503614157565b5b6003020160010154612cda565b6000856040015103612651578560000160405161252d90613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e1c1b2b8a87604001516040518363ffffffff1660e01b815260040161259a929190613a07565b600060405180830381600087803b1580156125b457600080fd5b505af11580156125c8573d6000803e3d6000fd5b5050505087898b73ffffffffffffffffffffffffffffffffffffffff167f9c2d00f9bd857ba01e3db2db9ad693ac6ada7c0d12cf673bddac07e2f52f93cf6001808b6004018b60400151600b811061262357612622614157565b5b600302016001015460405161263a93929190614afb565b60405180910390a4600196505050505050506128cc565b600061265c8b613236565b90508560a00151811161271d578660000160405161267990613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e1c1b2b8b88604001516040518363ffffffff1660e01b81526004016126e6929190613a07565b600060405180830381600087803b15801561270057600080fd5b505af1158015612714573d6000803e3d6000fd5b50505050612843565b60006127948c896004018960400151600b811061273d5761273c614157565b5b6003020160020160089054906101000a900462ffffff1662ffffff168a6004018a60400151600b811061277357612772614157565b5b6003020160020160059054906101000a900462ffffff1662ffffff166132c9565b9050876000016040516127a690613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a76373c18c836040518363ffffffff1660e01b815260040161280f929190613a07565b600060405180830381600087803b15801561282957600080fd5b505af115801561283d573d6000803e3d6000fd5b50505050505b888a8c73ffffffffffffffffffffffffffffffffffffffff167f9c2d00f9bd857ba01e3db2db9ad693ac6ada7c0d12cf673bddac07e2f52f93cf60018a60a001518611158c6004018c60400151600b81106128a1576128a0614157565b5b60030201600101546040516128b893929190614afb565b60405180910390a460019750505050505050505b9392505050565b60008060006128e06107e5565b9050600080826000016040516128f590613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373825893876040518263ffffffff1660e01b815260040161295c919061370b565b60c060405180830381865afa158015612979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299d91906148be565b9550505050509150818194509450505050915091565b600080600090505b600183516129c99190614751565b811015612a4c5760006001826129df9190614299565b90505b8351811015612a3e578381815181106129fe576129fd614157565b5b6020026020010151848381518110612a1957612a18614157565b5b602002602001015103612a3157600192505050612a52565b80806001019150506129e2565b5080806001019150506129bb565b50600090505b919050565b600080612a626107e5565b905060005b8351811015612b8c578473ffffffffffffffffffffffffffffffffffffffff1682600001604051612a9790614142565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e868481518110612af457612af3614157565b5b60200260200101516040518263ffffffff1660e01b8152600401612b18919061370b565b602060405180830381865afa158015612b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b599190613db3565b73ffffffffffffffffffffffffffffffffffffffff1614612b7f57600092505050612b93565b8080600101915050612a67565b5060019150505b92915050565b600080612ba46107e5565b90506000805b8451811015612ccf5782602501600084600001604051612bc990613a87565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342ab8805888581518110612c2657612c25614157565b5b60200260200101516040518263ffffffff1660e01b8152600401612c4a919061370b565b608060405180830381865afa158015612c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8b9190614baa565b60200151815260200190815260200160002060010160009054906101000a900462ffffff1662ffffff1682612cc09190614299565b91508080600101915050612baa565b508092505050919050565b6000612ce46107e5565b90506000806000806000612cf787613334565b94509450945094509450600086600001604051612d1390613f70565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8d8d6040518363ffffffff1660e01b8152600401612d7f929190614bd7565b6020604051808303816000875af1158015612d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc291906140c9565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8b8b6040518363ffffffff1660e01b8152600401612dfe929190614bd7565b6020604051808303816000875af1158015612e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4191906140c9565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88600001604051612e6e90614c4c565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b8152600401612ebb929190614bd7565b6020604051808303816000875af1158015612eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efe91906140c9565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88600001604051612f2b90614cad565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518363ffffffff1660e01b8152600401612f78929190614bd7565b6020604051808303816000875af1158015612f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbb91906140c9565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88600001604051612fe890614d0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040518363ffffffff1660e01b8152600401613035929190614bd7565b6020604051808303816000875af1158015613054573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307891906140c9565b508660000160405161308990614cad565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b81d9a346000876040518363ffffffff1660e01b81526004016130f3929190614d23565b600060405180830381600087803b15801561310d57600080fd5b505af1158015613121573d6000803e3d6000fd5b505050508660000160405161313590614d0e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bc2fa3a876040518263ffffffff1660e01b815260040161319c919061370b565b600060405180830381600087803b1580156131b657600080fd5b505af11580156131ca573d6000803e3d6000fd5b50505050848760260160010160008282546131e59190614299565b92505081905550818760260160000160008282546132039190614299565b92505081905550828760260160020160008282546132219190614299565b92505081905550505050505050505050505050565b6000806132416107e5565b9050600042844160405160200161325a93929190614df0565b6040516020818303038152906040528051906020012090506000600160008460010160000160009054906101000a900462ffffff166132999190614e2d565b6132a39190614e64565b62ffffff168260001c6132b69190614e9b565b6132c09190614299565b92505050919050565b6000804285416040516020016132e193929190614df0565b60405160208183030381529060405280519060200120905082600184866133089190614751565b6133129190614299565b8260001c6133209190614e9b565b61332a9190614299565b9150509392505050565b6000806000806000806133456107e5565b9050600060648260260160030160009054906101000a900462ffffff1662ffffff16896133729190614015565b61337c919061442f565b9050600060648360260160030160039054906101000a900462ffffff1662ffffff168a6133a99190614015565b6133b3919061442f565b9050600060648460260160030160099054906101000a900462ffffff1662ffffff168b6133e09190614015565b6133ea919061442f565b90506000606485602601600301600c9054906101000a900462ffffff1662ffffff168c6134179190614015565b613421919061442f565b9050600060648660260160030160069054906101000a900462ffffff1662ffffff168d61344e9190614015565b613458919061442f565b905084848484849a509a509a509a509a5050505050505091939590929450565b6040518060e00160405280600060ff16815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6000819050919050565b6134cd816134ba565b82525050565b60006060820190506134e860008301866134c4565b6134f560208301856134c4565b61350260408301846134c4565b949350505050565b6000604051905090565b600080fd5b600080fd5b600060ff82169050919050565b6135348161351e565b811461353f57600080fd5b50565b6000813590506135518161352b565b92915050565b60006020828403121561356d5761356c613514565b5b600061357b84828501613542565b91505092915050565b61358d8161351e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156135cd5780820151818401526020810190506135b2565b60008484015250505050565b6000601f19601f8301169050919050565b60006135f582613593565b6135ff818561359e565b935061360f8185602086016135af565b613618816135d9565b840191505092915050565b61362c816134ba565b82525050565b60008115159050919050565b61364781613632565b82525050565b600060e0830160008301516136656000860182613584565b506020830151848203602086015261367d82826135ea565b91505060408301516136926040860182613623565b5060608301516136a56060860182613623565b5060808301516136b86080860182613623565b5060a08301516136cb60a0860182613623565b5060c08301516136de60c086018261363e565b508091505092915050565b60006020820190508181036000830152613703818461364d565b905092915050565b600060208201905061372060008301846134c4565b92915050565b61372f816134ba565b811461373a57600080fd5b50565b60008135905061374c81613726565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61378f826135d9565b810181811067ffffffffffffffff821117156137ae576137ad613757565b5b80604052505050565b60006137c161350a565b90506137cd8282613786565b919050565b600067ffffffffffffffff8211156137ed576137ec613757565b5b602082029050602081019050919050565b600080fd5b6000613816613811846137d2565b6137b7565b90508083825260208201905060208402830185811115613839576138386137fe565b5b835b81811015613862578061384e888261373d565b84526020840193505060208101905061383b565b5050509392505050565b600082601f83011261388157613880613752565b5b8135613891848260208601613803565b91505092915050565b600080604083850312156138b1576138b0613514565b5b60006138bf8582860161373d565b925050602083013567ffffffffffffffff8111156138e0576138df613519565b5b6138ec8582860161386c565b9150509250929050565b6138ff81613632565b82525050565b600060208201905061391a60008301846138f6565b92915050565b6000806040838503121561393757613936613514565b5b60006139458582860161373d565b92505060206139568582860161373d565b9150509250929050565b60006020828403121561397657613975613514565b5b60006139848482850161373d565b91505092915050565b600082825260208201905092915050565b60006139a982613593565b6139b3818561398d565b93506139c38185602086016135af565b6139cc816135d9565b840191505092915050565b600060408201905081810360008301526139f1818561399e565b9050613a0060208301846134c4565b9392505050565b6000604082019050613a1c60008301856134c4565b613a2960208301846134c4565b9392505050565b600081905092915050565b7f6462000000000000000000000000000000000000000000000000000000000000600082015250565b6000613a71600283613a30565b9150613a7c82613a3b565b600282019050919050565b6000613a9282613a64565b9150819050919050565b600081519050613aab81613726565b92915050565b600080600060608486031215613aca57613ac9613514565b5b6000613ad886828701613a9c565b9350506020613ae986828701613a9c565b9250506040613afa86828701613a9c565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613b4b57607f821691505b602082108103613b5e57613b5d613b04565b5b50919050565b600060208284031215613b7a57613b79613514565b5b6000613b8884828501613a9c565b91505092915050565b7f7030000000000000000000000000000000000000000000000000000000000000600082015250565b6000613bc7600283613a30565b9150613bd282613b91565b600282019050919050565b6000613be882613bba565b9150819050919050565b600080fd5b600067ffffffffffffffff821115613c1257613c11613757565b5b613c1b826135d9565b9050602081019050919050565b6000613c3b613c3684613bf7565b6137b7565b905082815260208101848484011115613c5757613c56613bf2565b5b613c628482856135af565b509392505050565b600082601f830112613c7f57613c7e613752565b5b8151613c8f848260208601613c28565b91505092915050565b60008060408385031215613caf57613cae613514565b5b600083015167ffffffffffffffff811115613ccd57613ccc613519565b5b613cd985828601613c6a565b9250506020613cea85828601613a9c565b9150509250929050565b7f6169656e00000000000000000000000000000000000000000000000000000000600082015250565b6000613d2a600483613a30565b9150613d3582613cf4565b600482019050919050565b6000613d4b82613d1d565b9150819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613d8082613d55565b9050919050565b613d9081613d75565b8114613d9b57600080fd5b50565b600081519050613dad81613d87565b92915050565b600060208284031215613dc957613dc8613514565b5b6000613dd784828501613d9e565b91505092915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000613e1660098361398d565b9150613e2182613de0565b602082019050919050565b60006020820190508181036000830152613e4581613e09565b9050919050565b7f6475706c69636174652070662069640000000000000000000000000000000000600082015250565b6000613e82600f8361398d565b9150613e8d82613e4c565b602082019050919050565b60006020820190508181036000830152613eb181613e75565b9050919050565b7f6e6f74206f776e6572206f6620706572667269656e6473000000000000000000600082015250565b6000613eee60178361398d565b9150613ef982613eb8565b602082019050919050565b60006020820190508181036000830152613f1d81613ee1565b9050919050565b7f7065720000000000000000000000000000000000000000000000000000000000600082015250565b6000613f5a600383613a30565b9150613f6582613f24565b600382019050919050565b6000613f7b82613f4d565b9150819050919050565b7f6469737472696275746500000000000000000000000000000000000000000000600082015250565b6000613fbb600a83613a30565b9150613fc682613f85565b600a82019050919050565b6000613fdc82613fae565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614020826134ba565b915061402b836134ba565b9250828202614039816134ba565b915082820484148315176140505761404f613fe6565b5b5092915050565b61406081613d75565b82525050565b600060608201905061407b6000830186614057565b6140886020830185614057565b61409560408301846134c4565b949350505050565b6140a681613632565b81146140b157600080fd5b50565b6000815190506140c38161409d565b92915050565b6000602082840312156140df576140de613514565b5b60006140ed848285016140b4565b91505092915050565b7f706572667269656e647300000000000000000000000000000000000000000000600082015250565b600061412c600a83613a30565b9150614137826140f6565b600a82019050919050565b600061414d8261411f565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600061012082840312156141a2576141a1614186565b5b6141ad6101206137b7565b905060006141bd84828501613a9c565b60008301525060206141d184828501613a9c565b60208301525060406141e584828501613a9c565b60408301525060606141f984828501613a9c565b606083015250608061420d84828501613a9c565b60808301525060a061422184828501613a9c565b60a08301525060c061423584828501613a9c565b60c08301525060e061424984828501613a9c565b60e08301525061010061425e84828501613a9c565b6101008301525092915050565b6000610120828403121561428257614281613514565b5b60006142908482850161418b565b91505092915050565b60006142a4826134ba565b91506142af836134ba565b92508282019050808211156142c7576142c6613fe6565b5b92915050565b6000819050919050565b6000819050919050565b60006142fc6142f76142f2846142cd565b6142d7565b6134ba565b9050919050565b61430c816142e1565b82525050565b600061012082019050614328600083018c6134c4565b614335602083018b6134c4565b614342604083018a6134c4565b61434f60608301896134c4565b61435c60808301886134c4565b61436960a08301876134c4565b61437660c0830186614303565b61438360e08301856134c4565b6143916101008301846134c4565b9a9950505050505050505050565b7f7465616d00000000000000000000000000000000000000000000000000000000600082015250565b60006143d5600483613a30565b91506143e08261439f565b600482019050919050565b60006143f6826143c8565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061443a826134ba565b9150614445836134ba565b92508261445557614454614400565b5b828204905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006144988383613623565b60208301905092915050565b6000602082019050919050565b60006144bc82614460565b6144c6818561446b565b93506144d18361447c565b8060005b838110156145025781516144e9888261448c565b97506144f4836144a4565b9250506001810190506144d5565b5085935050505092915050565b600060408201905061452460008301856134c4565b818103602083015261453681846144b1565b90509392505050565b7f6e6f74207072656d69756d206c6576656c000000000000000000000000000000600082015250565b600061457560118361398d565b91506145808261453f565b602082019050919050565b600060208201905081810360008301526145a481614568565b9050919050565b7f6e6f74206f70656e000000000000000000000000000000000000000000000000600082015250565b60006145e160088361398d565b91506145ec826145ab565b602082019050919050565b60006020820190508181036000830152614610816145d4565b9050919050565b6000806000806080858703121561463157614630613514565b5b600061463f87828801613d9e565b945050602061465087828801613d9e565b935050604061466187828801613a9c565b925050606061467287828801613a9c565b91505092959194509250565b7f6974656d00000000000000000000000000000000000000000000000000000000600082015250565b60006146b4600483613a30565b91506146bf8261467e565b600482019050919050565b60006146d5826146a7565b9150819050919050565b6000819050919050565b60006147046146ff6146fa846146df565b6142d7565b6134ba565b9050919050565b614714816146e9565b82525050565b600060608201905061472f6000830186614057565b61473c60208301856134c4565b614749604083018461470b565b949350505050565b600061475c826134ba565b9150614767836134ba565b925082820390508181111561477f5761477e613fe6565b5b92915050565b600060808201905061479a600083018761470b565b6147a760208301866138f6565b6147b460408301856134c4565b6147c160608301846134c4565b95945050505050565b600062ffffff82169050919050565b60006147f46147ef6147ea846147ca565b6142d7565b6134ba565b9050919050565b614804816147d9565b82525050565b600060c08201905061481f60008301896134c4565b61482c60208301886134c4565b61483960408301876134c4565b61484660608301866134c4565b61485360808301856147fb565b61486060a08301846134c4565b979650505050505050565b600060a08201905061488060008301886134c4565b61488d60208301876134c4565b61489a60408301866134c4565b6148a760608301856134c4565b6148b460808301846134c4565b9695505050505050565b60008060008060008060c087890312156148db576148da613514565b5b60006148e989828a01613a9c565b96505060206148fa89828a01613d9e565b955050604061490b89828a01613a9c565b945050606061491c89828a01613d9e565b935050608061492d89828a01613a9c565b92505060a061493e89828a01613a9c565b9150509295509295509295565b60006080820190506149606000830187614057565b61496d60208301866134c4565b61497a6040830185614057565b61498760608301846134c4565b95945050505050565b60006060820190506149a56000830186614057565b6149b260208301856134c4565b6149bf60408301846134c4565b949350505050565b60006060820190506149dc6000830186614057565b6149e960208301856134c4565b6149f66040830184614303565b949350505050565b60008060408385031215614a1557614a14613514565b5b6000614a2385828601613a9c565b925050602083015167ffffffffffffffff811115614a4457614a43613519565b5b614a5085828601613c6a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000614a8182614a5a565b614a8b8185614a65565b9350614a9b8185602086016135af565b614aa4816135d9565b840191505092915050565b6000608082019050614ac460008301876134c4565b614ad160208301866134c4565b614ade604083018561470b565b8181036060830152614af08184614a76565b905095945050505050565b6000606082019050614b10600083018661470b565b614b1d60208301856138f6565b614b2a60408301846134c4565b949350505050565b600060808284031215614b4857614b47614186565b5b614b5260806137b7565b90506000614b6284828501613a9c565b6000830152506020614b7684828501613a9c565b6020830152506040614b8a848285016140b4565b6040830152506060614b9e84828501613a9c565b60608301525092915050565b600060808284031215614bc057614bbf613514565b5b6000614bce84828501614b32565b91505092915050565b6000604082019050614bec6000830185614057565b614bf960208301846134c4565b9392505050565b7f6275726e00000000000000000000000000000000000000000000000000000000600082015250565b6000614c36600483613a30565b9150614c4182614c00565b600482019050919050565b6000614c5782614c29565b9150819050919050565b7f7032000000000000000000000000000000000000000000000000000000000000600082015250565b6000614c97600283613a30565b9150614ca282614c61565b600282019050919050565b6000614cb882614c8a565b9150819050919050565b7f7031000000000000000000000000000000000000000000000000000000000000600082015250565b6000614cf8600283613a30565b9150614d0382614cc2565b600282019050919050565b6000614d1982614ceb565b9150819050919050565b6000604082019050614d386000830185614303565b614d4560208301846134c4565b9392505050565b6000819050919050565b614d67614d62826134ba565b614d4c565b82525050565b60008160601b9050919050565b6000614d8582614d6d565b9050919050565b6000614d9782614d7a565b9050919050565b614daf614daa82613d75565b614d8c565b82525050565b6000614dc082613d55565b9050919050565b6000614dd282614d7a565b9050919050565b614dea614de582614db5565b614dc7565b82525050565b6000614dfc8286614d56565b602082019150614e0c8285614d9e565b601482019150614e1c8284614dd9565b601482019150819050949350505050565b6000614e38826147ca565b9150614e43836147ca565b9250828203905062ffffff811115614e5e57614e5d613fe6565b5b92915050565b6000614e6f826147ca565b9150614e7a836147ca565b9250828201905062ffffff811115614e9557614e94613fe6565b5b92915050565b6000614ea6826134ba565b9150614eb1836134ba565b925082614ec157614ec0614400565b5b82820690509291505056fea2646970667358221220375424689e7f9f012923136301bb11facc66c90cf4b4d5ef876b9f84f798d34c64736f6c63430008160033",
  "devdoc": {
    "details": "i-TEZ : P0 (Mix) Facet Contract",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "P0_getMaxProb()": {
        "notice": "P0 _ get functions"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}