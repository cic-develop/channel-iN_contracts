{
  "address": "0x19712F2127A999a8d2236C96Cf3f3DBd24135421",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isBlock",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_why",
          "type": "string"
        }
      ],
      "name": "admin_P2_blockUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_layerNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fromP2PerPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fromP2UsdtPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dailyReward_percent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_add_dailyReward_Percent",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isOpen",
          "type": "bool"
        }
      ],
      "name": "admin_P2_layer_setting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLimit",
          "type": "uint256"
        }
      ],
      "name": "admin_P2_setMaxLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin_distribute_estimate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin_distribute_getBeforAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin_distribute_getStates",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "admin_distribute_ksSwapLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isAuto",
          "type": "bool"
        }
      ],
      "name": "admin_distribute_setAuto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_p1Ratio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_p2PerRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_p2UsdtRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_burnRatio",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_teamUsdtRatio",
          "type": "uint24"
        }
      ],
      "name": "admin_distribute_setStates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin_distribute_swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_agencyIncomePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_influencerIncomePercent",
          "type": "uint256"
        }
      ],
      "name": "admin_distribute_userStates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_gradeIndex",
          "type": "uint8"
        }
      ],
      "name": "admin_p0_getGradeInfos",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_grade",
          "type": "uint8"
        }
      ],
      "name": "admin_p0_getMetadataMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grade",
          "type": "uint256"
        }
      ],
      "name": "admin_p0_getPerFriendsProb",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin_p0_getStates",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_gradeIndex",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_isOpen",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_mixFee",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_initBaseProb",
          "type": "uint24"
        },
        {
          "internalType": "uint16",
          "name": "_mixExp",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "_failedAddProbMin",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_failedAddProbMax",
          "type": "uint24"
        }
      ],
      "name": "admin_p0_setGradeInfos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_grade",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_gradeName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_mergeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mergeUseItemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_latestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isOpen",
          "type": "bool"
        }
      ],
      "name": "admin_p0_setMergeGradesInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pfId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_grade",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_seedHash",
          "type": "string"
        }
      ],
      "name": "admin_p0_setMetaData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grade",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_pfGrade",
          "type": "string"
        },
        {
          "internalType": "uint24",
          "name": "_gradeProb",
          "type": "uint24"
        }
      ],
      "name": "admin_p0_setPerFriendsProb",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_maxProb",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "_addProbFee",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_addProbExp",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_isVRF",
          "type": "bool"
        }
      ],
      "name": "admin_p0_setStates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        }
      ],
      "name": "admin_setAienMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c7a1ce4615a930a60a59d7b5c7ae9da3253c84703447e1e43b4376997670c40",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xa5E5f12acC05B3D7E019747b511df4DaC8027Ce2",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "3800818",
    "logsBloom": "0x
    "blockHash": "0xb880f4db55f13a0323dc2b8517019cb79dd972698991228550ea6c16f63931a9",
    "transactionHash": "0x2c7a1ce4615a930a60a59d7b5c7ae9da3253c84703447e1e43b4376997670c40",
    "logs": [],
    "blockNumber": 143312233,
    "cumulativeGasUsed": "4227752",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "908bdd5afdddef1466a963359109b883",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlock\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_why\",\"type\":\"string\"}],\"name\":\"admin_P2_blockUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_layerNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromP2PerPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromP2UsdtPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyReward_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_add_dailyReward_Percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"admin_P2_layer_setting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLimit\",\"type\":\"uint256\"}],\"name\":\"admin_P2_setMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_distribute_estimate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_distribute_getBeforAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_distribute_getStates\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"admin_distribute_ksSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAuto\",\"type\":\"bool\"}],\"name\":\"admin_distribute_setAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_p1Ratio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_p2PerRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_p2UsdtRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_burnRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_teamUsdtRatio\",\"type\":\"uint24\"}],\"name\":\"admin_distribute_setStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_distribute_swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agencyIncomePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_influencerIncomePercent\",\"type\":\"uint256\"}],\"name\":\"admin_distribute_userStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gradeIndex\",\"type\":\"uint8\"}],\"name\":\"admin_p0_getGradeInfos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_grade\",\"type\":\"uint8\"}],\"name\":\"admin_p0_getMetadataMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grade\",\"type\":\"uint256\"}],\"name\":\"admin_p0_getPerFriendsProb\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_p0_getStates\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gradeIndex\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_mixFee\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_initBaseProb\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"_mixExp\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"_failedAddProbMin\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_failedAddProbMax\",\"type\":\"uint24\"}],\"name\":\"admin_p0_setGradeInfos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_grade\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_gradeName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_mergeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mergeUseItemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_latestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"admin_p0_setMergeGradesInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pfId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_grade\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_seedHash\",\"type\":\"string\"}],\"name\":\"admin_p0_setMetaData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grade\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_pfGrade\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"_gradeProb\",\"type\":\"uint24\"}],\"name\":\"admin_p0_setPerFriendsProb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_maxProb\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_addProbFee\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_addProbExp\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_isVRF\",\"type\":\"bool\"}],\"name\":\"admin_p0_setStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"name\":\"admin_setAienMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"admin_P2_layer_setting(uint256,uint256,uint256,uint256,uint256,bool)\":{\"details\":\"P2 Admin functions\"},\"admin_distribute_setStates(uint24,uint24,uint24,uint24,uint24)\":{\"details\":\"DistriBute Admin functions\"},\"admin_p0_setStates(uint24,uint256,uint16,bool)\":{\"details\":\"P0 Admin functions\"},\"admin_setAienMintFee(uint256)\":{\"details\":\"aien mint variables\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Channel_iN/facets/AdminFacet.sol\":\"AdminFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Channel_iN/facets/AdminFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, Modifiers, LibAppStorage} from \\\"../../shared/libraries/LibAppStorage.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IP2} from \\\"../interfaces/IP2.sol\\\";\\nimport {IP2_Admin} from \\\"../interfaces/IP2_Admin.sol\\\";\\nimport {IDB} from \\\"../interfaces/IDB.sol\\\";\\nimport {LibDistribute} from \\\"../../shared/libraries/LibDistribute.sol\\\";\\n\\ncontract AdminFacet is Modifiers {\\n    /**@dev P0 Admin functions\\n     */\\n    function admin_p0_setStates(\\n        uint24 _maxProb,\\n        uint _addProbFee,\\n        uint16 _addProbExp,\\n        bool _isVRF\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.p0_states.maxProb = _maxProb;\\n        s.p0_states.addProbFee = _addProbFee;\\n        s.p0_states.addProbExp = _addProbExp;\\n        s.p0_states.isVRF = _isVRF;\\n    }\\n\\n    function admin_p0_setGradeInfos(\\n        uint8 _gradeIndex,\\n        bool _isOpen,\\n        uint _mixFee,\\n        uint24 _initBaseProb,\\n        uint16 _mixExp,\\n        uint24 _failedAddProbMin,\\n        uint24 _failedAddProbMax\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.p0_gradeInfos[_gradeIndex].isOpen = _isOpen;\\n        s.p0_gradeInfos[_gradeIndex].mixFee = _mixFee;\\n        s.p0_gradeInfos[_gradeIndex].initBaseProb = _initBaseProb;\\n        s.p0_gradeInfos[_gradeIndex].mixExp = _mixExp;\\n        s.p0_gradeInfos[_gradeIndex].failedAddProbMin = _failedAddProbMin;\\n        s.p0_gradeInfos[_gradeIndex].failedAddProbMax = _failedAddProbMax;\\n    }\\n\\n    function admin_p0_setPerFriendsProb(\\n        uint _grade,\\n        string memory _pfGrade,\\n        uint24 _gradeProb\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.p0_perFriendsProbs[_grade].pfGrade = _pfGrade;\\n        s.p0_perFriendsProbs[_grade].gradeProb = uint24(_gradeProb);\\n    }\\n\\n    function admin_p0_getStates()\\n        external\\n        view\\n        returns (uint24, uint, uint16, bool)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.p0_states.maxProb,\\n            s.p0_states.addProbFee,\\n            s.p0_states.addProbExp,\\n            s.p0_states.isVRF\\n        );\\n    }\\n\\n    function admin_p0_getGradeInfos(\\n        uint8 _gradeIndex\\n    ) external view returns (bool, uint, uint24, uint16, uint24, uint24) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.p0_gradeInfos[_gradeIndex].isOpen,\\n            s.p0_gradeInfos[_gradeIndex].mixFee,\\n            s.p0_gradeInfos[_gradeIndex].initBaseProb,\\n            s.p0_gradeInfos[_gradeIndex].mixExp,\\n            s.p0_gradeInfos[_gradeIndex].failedAddProbMin,\\n            s.p0_gradeInfos[_gradeIndex].failedAddProbMax\\n        );\\n    }\\n\\n    function admin_p0_getPerFriendsProb(\\n        uint _grade\\n    ) external view returns (string memory, uint24) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.p0_perFriendsProbs[_grade].pfGrade,\\n            s.p0_perFriendsProbs[_grade].gradeProb\\n        );\\n    }\\n\\n    function admin_p0_setMetaData(\\n        uint _pfId,\\n        uint8 _grade,\\n        string memory _seedHash\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.pfMetaURI[_pfId] = _seedHash;\\n        s.p0_mergePfGrades[_grade].setMatadataId = _pfId;\\n\\n        IDB(s.contracts[\\\"db\\\"]).adminSetMetaData(_pfId, _grade, _seedHash);\\n    }\\n\\n    function admin_p0_setMergeGradesInfo(\\n        uint8 _grade,\\n        string memory _gradeName,\\n        uint _mergeFee,\\n        uint _mergeUseItemAmount,\\n        uint _latestId,\\n        bool _isOpen\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.p0_mergePfGrades[_grade].grade = _grade;\\n        s.p0_mergePfGrades[_grade].gradeName = _gradeName;\\n        s.p0_mergePfGrades[_grade].mergeFee = _mergeFee;\\n        s.p0_mergePfGrades[_grade].mergeUseItemAmount = _mergeUseItemAmount;\\n        s.p0_mergePfGrades[_grade].latestId = _latestId;\\n        s.p0_mergePfGrades[_grade].isOpen = _isOpen;\\n    }\\n\\n    function admin_p0_getMetadataMargin(\\n        uint8 _grade\\n    ) external view returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.p0_mergePfGrades[_grade].latestId,\\n            s.p0_mergePfGrades[_grade].setMatadataId,\\n            s.p0_mergePfGrades[_grade].setMatadataId -\\n                s.p0_mergePfGrades[_grade].latestId\\n        );\\n    }\\n\\n    /**@dev P2 Admin functions\\n     */\\n    function admin_P2_layer_setting(\\n        uint _layerNumber,\\n        uint _fromP2PerPercent,\\n        uint _fromP2UsdtPercent,\\n        uint _dailyReward_percent,\\n        uint _add_dailyReward_Percent,\\n        bool _isOpen\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        IP2_Admin(s.contracts[\\\"p2\\\"])._layer_setting(\\n            _layerNumber,\\n            _fromP2PerPercent,\\n            _fromP2UsdtPercent,\\n            _dailyReward_percent,\\n            _add_dailyReward_Percent,\\n            _isOpen\\n        );\\n    }\\n\\n    function admin_P2_blockUser(\\n        address _user,\\n        bool _isBlock,\\n        string memory _why\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        IP2_Admin(s.contracts[\\\"p2\\\"]).diamond_P2_BlockUser(\\n            _user,\\n            _isBlock,\\n            _why\\n        );\\n    }\\n\\n    function admin_P2_setMaxLimit(uint _maxLimit) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        IP2_Admin(s.contracts[\\\"p2\\\"]).diamond_P2_setMaxLimit(_maxLimit);\\n    }\\n\\n    /**@dev DistriBute Admin functions\\n     */\\n    function admin_distribute_setStates(\\n        uint24 _p1Ratio,\\n        uint24 _p2PerRatio,\\n        uint24 _p2UsdtRatio,\\n        uint24 _burnRatio,\\n        uint24 _teamUsdtRatio\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.distribute_states.p1Ratio = _p1Ratio;\\n        s.distribute_states.p2PerRatio = _p2PerRatio;\\n        s.distribute_states.p2UsdtRatio = _p2UsdtRatio;\\n        s.distribute_states.burnRatio = _burnRatio;\\n        s.distribute_states.teamUsdtRatio = _teamUsdtRatio;\\n    }\\n\\n    function admin_distribute_userStates(\\n        uint _agencyIncomePercent,\\n        uint _influencerIncomePercent\\n    ) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.p0_mergeState.agencyIncomePercent = _agencyIncomePercent;\\n        s.p0_mergeState.influencerIncomePercent = _influencerIncomePercent;\\n    }\\n\\n    function admin_distribute_getStates()\\n        external\\n        view\\n        returns (uint24, uint24, uint24, uint24, uint24, uint, uint)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.distribute_states.p1Ratio,\\n            s.distribute_states.p2PerRatio,\\n            s.distribute_states.p2UsdtRatio,\\n            s.distribute_states.burnRatio,\\n            s.distribute_states.teamUsdtRatio,\\n            s.p0_mergeState.agencyIncomePercent,\\n            s.p0_mergeState.influencerIncomePercent\\n        );\\n    }\\n\\n    function admin_distribute_setAuto(bool _isAuto) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.isAutoDistribute = _isAuto;\\n    }\\n\\n    function admin_distribute_ksSwapLimit(uint _limit) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.ksSwapLimit = _limit;\\n    }\\n\\n    function admin_distribute_getBeforAmounts()\\n        external\\n        view\\n        returns (uint, uint, uint)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.distribute_states.beforeP2Usdt,\\n            s.distribute_states.beforeTeamUsdt,\\n            s.distribute_states.beforeP2Per\\n        );\\n    }\\n\\n    function admin_distribute_estimate()\\n        external\\n        view\\n        returns (bool, uint, uint)\\n    {\\n        return LibDistribute.isSwap();\\n    }\\n\\n    function admin_distribute_swap() external onlyDev {\\n        LibDistribute.swapToDistribute();\\n    }\\n\\n    /**@dev aien mint variables\\n     */\\n\\n    function admin_setAienMintFee(uint _mintFee) external onlyDev {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.aienMintFee = _mintFee;\\n    }\\n}\\n\",\"keccak256\":\"0xbd26f543fe4793de3de187f25202f957018f8d3eb0844dec9d7df0b599377dbe\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IDB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// legacy db contract interface\\ninterface IDB {\\n    struct pf {\\n        uint id;\\n        uint class;\\n        bool isAien;\\n        uint usedAienId;\\n    }\\n\\n    struct pfGrade {\\n        uint normal;\\n        uint uncommon;\\n        uint rare;\\n        uint unique;\\n        uint legendary;\\n        uint myth;\\n        uint ancient;\\n    }\\n\\n    struct aien {\\n        uint id;\\n        // \\uac15\\ud654 \\ud69f\\uc218\\n        uint mixCount;\\n        //\\n        uint p2Level;\\n        // \\ud1a0\\ud0c8 \\uacbd\\ud5d8\\uce58\\n        uint totalExp;\\n        // \\ubbf8\\uc158 \\ubc0f, \\uc778\\ud50c\\ub8e8\\uc5b8\\uc11c \\ud65c\\ub3d9 \\uad00\\ub828 \\uacbd\\ud5d8\\uce58\\n        uint influExp;\\n        // \\uae30\\ubcf8 \\ud655\\ub960\\n        uint baseProb;\\n        // \\ud1a0\\ud0c8 \\ud655\\ub960\\n        uint totalProb;\\n        // is PF\\n        uint isPFid;\\n        // \\ucd94\\uac00\\ud655\\ub960\\n        uint addProb;\\n    }\\n\\n    struct User {\\n        // DB > idx\\n        uint userId;\\n        // token itme ID\\n        uint itemId;\\n        address incomeAddr;\\n        uint feeBalance;\\n        bool isAble;\\n        uint mintCount;\\n        uint useLevelupCount;\\n        uint useMergeCount;\\n        // uint ownerIncomePercent;\\n        // uint userIncomPercent;\\n        //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n        uint referralIncome;\\n        address agency;\\n        uint agencyIncome;\\n    }\\n\\n    function AIENS(uint _key) external view returns (aien memory);\\n\\n    function PFS(uint _key) external view returns (pf memory);\\n\\n    function getAien(uint _id) external view;\\n\\n    function getPF(uint _id) external view;\\n\\n    function getPfGrade(uint _id) external view returns (uint);\\n\\n    function setAien(uint _id) external;\\n\\n    function usePFimg(uint _aienId, uint _pfId) external;\\n\\n    function setAienAll(\\n        uint _id,\\n        uint _mixCount,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _totalProb,\\n        uint _isPFid,\\n        uint _addProb\\n    ) external;\\n\\n    function getContractAddr(\\n        string memory _name\\n    ) external view returns (address);\\n\\n    function burnValue(uint _burnAmount) external;\\n\\n    function setAienGradeInfo(uint _toGrade) external;\\n\\n    function subPfGrades(uint _pfId) external;\\n\\n    function setLevelUpStatus(uint _toGrade) external;\\n\\n    function _failedAienSet(\\n        uint _id,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _successAienSet(\\n        uint _id,\\n        uint _p2Level,\\n        uint _totalExp,\\n        uint _influExp,\\n        uint _baseProb,\\n        uint _addProb\\n    ) external;\\n\\n    function _mergeCalcul(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _mergeCalcul2(\\n        uint _itemId\\n    ) external view returns (uint, address, uint, address, uint, uint);\\n\\n    function _influencerMerge(\\n        address _to,\\n        uint _itemId,\\n        uint _referralIncome\\n    ) external returns (uint, string memory);\\n\\n    function _levelUpCalcul(\\n        uint _itemId,\\n        uint _fee\\n    ) external returns (address, address, uint, uint);\\n\\n    function _levelUpSucess(uint _id, uint _p2Level) external;\\n\\n    function _levelUpFailed(uint _id, uint _addProb) external;\\n\\n    function _mergeCount(\\n        address _agency,\\n        uint _agencyFee,\\n        address _influencer,\\n        uint _influencerFee\\n    ) external;\\n\\n    function usePFPower(uint _id, uint _usePower) external;\\n\\n    function addProbFee() external view returns (uint);\\n\\n    function PfGrades() external view returns (pfGrade memory);\\n\\n    function getAienGradeInfo() external view returns (uint[] memory);\\n\\n    function basicMergeAmount() external view returns (uint);\\n\\n    function influencerMergeAmount() external view returns (uint);\\n\\n    function _getMedataMargin() external view returns (uint, uint, uint);\\n\\n    function getAienLevel(uint _aienId) external view returns (uint);\\n\\n    function setPerprojectWallet(address _addr) external;\\n\\n    function setAgencyAddr(address _influencer, address _agency) external;\\n\\n    function setAgencyIncomePercent(uint _agencyIncomePercent) external;\\n\\n    function adminSetMergeAmount(\\n        uint _influencerMergeAmount,\\n        uint _basicMergeAmount,\\n        uint _agencyIncomePercent,\\n        uint _ownerIncomePercent\\n    ) external;\\n\\n    function getUserFromItem(uint _itemId) external view returns (User memory);\\n\\n    function adminSetMetaData(\\n        uint _pfId,\\n        uint8 _grade,\\n        string memory _seedHash\\n    ) external;\\n\\n    function _itemMergeFromDiamond(\\n        address _to,\\n        uint _pfId,\\n        string memory _seedHash,\\n        uint8 _grade\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbf4ffb9733d65fe3597c56dd6ff80ec21176dd3f0e43104f9ddf97e897d281cd\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IP1 {\\n    struct PendingInfo {\\n        address user;\\n        // 1: \\ucd9c\\uae08\\uc694\\uccad,\\n        // 2: \\ucd9c\\uae08\\ucde8\\uc18c,\\n        // 3: \\uc644\\ub8cc,\\n        // 4: \\ucde8\\uc18c\\uc644\\ub8cc: \\uc644\\ub8cc\\uc2dc \\uc7ac\\uc608\\uce58 \\ubc84\\ud2bc \\ud65c\\uc131\\ud654\\n        uint8 pendingType;\\n        uint startTime;\\n        uint endTime;\\n        uint amount;\\n        // pending Id\\n        uint pendingId;\\n    }\\n\\n    function update() external returns (uint);\\n\\n    function diamond_P1_deposit(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint);\\n\\n    function diamond_P1_reDposit(address _sender) external returns (uint);\\n\\n    function diamond_P1_harvest(address _sender) external returns (uint);\\n\\n    function diamond_P1_pendingReward(\\n        address _sender,\\n        uint _withdrawBlock\\n    ) external view returns (uint);\\n\\n    function diamond_P1_addPower(\\n        address _sender,\\n        uint _aienId,\\n        uint _usePower\\n    ) external returns (uint);\\n\\n    function diamond_P1_widthdraw(\\n        address _sender,\\n        uint _amount\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint,uint);\\n\\n    function diamond_P1_widthdrawCancel(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_widthdrawCancelConfirm(\\n        address _sender,\\n        uint _pendingId\\n    ) external returns (uint, uint);\\n\\n    function diamond_P1_getPoolData() external view returns (uint, uint, uint);\\n\\n    function diamond_P1_getUserData(\\n        address _sender\\n    ) external view returns (uint, uint, uint, uint, uint);\\n\\n    function diamond_P1_getUnstakeData(\\n        address _sender\\n    ) external view returns (PendingInfo[] memory);\\n\\n    function diamond_P1_addDistributionAmountAll(uint _amount) external;\\n\\n    function unStakeTimeLock() external view returns (uint16);\\n\\n    function unStakeCancelTimeLock() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x07efaa8c8bc5cf474a039cab55457d26d607d1eb1a5b133c27962cba3bba2b39\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IP2 {\\n    struct User {\\n        bool isBlockUser;\\n        uint perRewarded;\\n        uint usdtRewarded;\\n        EnumerableSet.UintSet tokenIds;\\n    }\\n\\n    struct Aien {\\n        address staker;\\n        uint level;\\n        // requires value\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        uint rewardUsdtDebt;\\n        uint rewardPerDebt;\\n        ////////////////////\\n        uint per_received;\\n        uint usdt_received;\\n    }\\n\\n    struct Balances {\\n        // \\ub85c\\uc9c1\\uc0c1 \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\ud55c \\ubc38\\ub7f0\\uc2a4 \\ubcc0\\uc218 (\\uc2e4\\uc81c\\uc640 \\ub2e4\\ub97c \\uc218 \\uc788\\uc74c)\\n        uint perBalance;\\n        uint usdtBalance;\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508 \\ub418\\uc9c0 \\uc54a\\uc740 \\uc0c1\\ud0dc\\uc5d0\\uc11c\\n        // \\ub808\\uc774\\uc5b4\\uac00 \\uc624\\ud508\\ub418\\uba74 \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\uc800\\uc7a5\\ub41c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ubcc0\\uc218\\n        uint savedPerBalance;\\n        uint savedUsdtBalance;\\n        // \\ud604\\uc7ac savedUsdt, savedPer\\ub97c \\ud1b5\\ud574 \\ub098\\uc628 \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\n        uint add_dailyUSDT;\\n        uint add_dailyPER;\\n        // \\ubcf4\\uc548\\uc0c1 \\ubb38\\uc81c\\uac00 \\uc0dd\\uaca8\\n        // \\uc608\\uc0c1\\ubcf4\\ub2e4 \\ub9ce\\uc740 withdraw\\ub97c \\uc694\\uccad\\ud558\\uac8c \\ub418\\ub294 \\uacbd\\uc6b0\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ud1a0\\ud0c8 \\ubc38\\ub7f0\\uc2a4\\uc640\\n        // \\uc9c0\\uae08\\uae4c\\uc9c0 \\uc313\\uc778 \\ub808\\uc774\\uc5b4\\ubcc4 \\ucd9c\\uae08 \\ubc38\\ub7f0\\uc2a4\\ub97c \\ube44\\uad50\\ud558\\uc5ec\\n        // \\ucd9c\\uae08 \\uac00\\ub2a5\\ud55c\\uc9c0 \\uccb4\\ud06c\\ud558\\ub294 \\ubcc0\\uc218\\n        uint total_checkWithdrawPER;\\n        uint withdrawal_checkWithdrawPER;\\n        uint total_checkWithdrawUSDT;\\n        uint withdrawal_checkWithdrawUSDT;\\n    }\\n\\n    struct Layer {\\n        Balances balances;\\n        // P2\\uc5d0\\uc11c \\ud574\\ub2f9 \\ub808\\uc774\\uc5b4\\uc5d0 \\ud1a0\\ud070 \\ubc30\\uc815 \\ubc1b\\uc744\\ub54c \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint rewardUsdtPercent;\\n        uint rewardPerPercent;\\n        // \\uc720\\uc800\\uc5d0\\uac8c \\ud558\\ub8e8\\uc5d0 \\ubd84\\ubc30\\ud558\\ub294 \\ub9ac\\uc6cc\\ub4dc \\ud37c\\uc13c\\ud2b8\\n        uint dailyReward_Percent;\\n        // \\uacc4\\uc0b0\\uc5d0 \\ud544\\uc694\\n        uint rewardPer;\\n        uint rewardUsdt;\\n        // \\ubbf8\\uc624\\ud508\\uc2dc \\uc800\\uc7a5\\ud55c \\ub9ac\\uc6cc\\ub4dc\\ub97c \\ub370\\uc77c\\ub9ac \\ub9ac\\uc6cc\\ub4dc\\ub85c \\ucd94\\uac00 \\ubd84\\ubc30\\ud558\\uae30 \\uc704\\ud55c \\ud37c\\uc13c\\ud2b8\\ubcc0\\uc218\\n        uint add_dailyReward_Percent;\\n        uint lastRewardBlock;\\n        uint dailyRewardUpdateBlock;\\n        uint totalStakedAien;\\n        bool isOpen;\\n    }\\n\\n    struct AienLoadData {\\n        //aien\\uc815\\ubcf4\\n        uint _aienId;\\n        uint _aienLevel;\\n        // \\ucd9c\\uae08 \\ud1a0\\ud0c8\\n        uint _aien_per_received;\\n        uint _aien_usdt_received;\\n        //\\ucd9c\\uae08 \\uac00\\ub2a5\\n        uint usdt_withdrawable;\\n        uint per_withdrawable;\\n        // block\\ub2f9 \\ub9ac\\uc6cc\\ub4dc\\n        uint block_reward_per;\\n        uint block_reward_usdt;\\n    }\\n\\n    struct LayerLoadData {\\n        bool isOpen;\\n        uint _layerNumber;\\n        uint _24h_reward_per;\\n        uint _24h_reward_usdt;\\n        uint totalStakedAien;\\n    }\\n    struct UserLoadData {\\n        uint _usdtRewarded;\\n        uint _perRewarded;\\n        bool _isBlockUser;\\n    }\\n\\n    function aiens(uint _id) external view returns (Aien memory);\\n\\n    function diamond_P2_deposit(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_withdraw(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_harvest(address _sender, uint _aienId) external;\\n\\n    function diamond_P2_getUserInfo(\\n        address _sender\\n    )\\n        external\\n        view\\n        returns (\\n            UserLoadData memory,\\n            AienLoadData[] memory,\\n            LayerLoadData[] memory\\n        );\\n\\n    function diamond_P2_getLayerData(\\n        uint _number\\n    ) external view returns (uint, uint, uint);\\n\\n    function addPerUsdtDistribution(uint _usdt, uint _per) external;\\n\\n    function P2_usdtBalance() external view returns (uint);\\n\\n    function P2_perBalance() external view returns (uint);\\n\\n    function MAX_STAKING_LIMIT() external view returns (uint);\\n\\n    function layers(uint _number) external view returns (Layer memory);\\n\\n    function pendingReward(\\n        uint _aienId,\\n        uint _layerNumber,\\n        uint _withdrawBlock\\n    ) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0x2e90a8470442fec4da79c46739fcf8b958fe1503f519a5f7b2fa048697e2396d\",\"license\":\"MIT\"},\"contracts/Channel_iN/interfaces/IP2_Admin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IP2_Admin {\\n    // layer Settings\\n    function _layer_setting(\\n        uint _layerNumber,\\n        uint _fromP2PerPercent,\\n        uint _fromP2UsdtPercent,\\n        uint _dailyReward_percent,\\n        uint _add_dailyReward_Percent,\\n        bool _isOpen\\n    ) external;\\n\\n    function diamond_P2_BlockUser(\\n        address _user,\\n        bool _isBlock,\\n        string memory _why\\n    ) external;\\n\\n    function diamond_P2_setMaxLimit(uint _maxLimit) external;\\n\\n    \\n\\n\\n}\\n\",\"keccak256\":\"0x5eb3c389ba4ad5c987931aecef61d09a357e3de7a80e153cf173b1afeffcb251\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xdc916985bab8246380c2188436b2e25e333d34e9fdc7bf3b0245f5bcc716e5dc\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IKlaySwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// 0xc6a2ad8cc6e4a7e08fc37cc5954be07d499e7654 KSP\\n// 0x7A74B3be679E194E1D6A0C29A343ef8D2a5AC876 Util\\ninterface IKlaySwap {\\n    function estimateSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] memory path\\n    ) external view returns (uint amountOut);\\n\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint amountA,\\n        address tokenB,\\n        uint amountB,\\n        address[] memory path\\n    ) external;\\n}\\n\\n\\n\\n\\n\",\"keccak256\":\"0xdf4506259a183c376f7e8dec594a1ea6dd1e07c6cf048c0a0ea1b5014e666cba\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\n// using EnumerableSet for EnumerableSet.AddressSet;\\n// i-Tez Structs\\n//- P0 struct\\nstruct P0_State {\\n    uint24 maxProb;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\uac1c\\ub2f9 \\uc218\\uc218\\ub8cc\\n    uint addProbFee;\\n    // \\ud37c\\ud504\\ub80c\\uc988\\ub97c \\uc774\\uc6a9\\ud55c PF POWER \\ubcc0\\ud658\\uc2dc \\ud68d\\ub4dd \\uacbd\\ud5d8\\uce58\\n    uint16 addProbExp;\\n    // bool\\n    bool isVRF;\\n}\\nstruct P0_PerFriendsProb {\\n    string pfGrade;\\n    uint24 gradeProb;\\n}\\n\\nstruct P0_GradeInfo {\\n    // \\ub2e4\\uc74c level\\uc774 \\uc5f4\\ub838\\ub294\\uc9c0 \\ud655\\uc778\\n    bool isOpen;\\n    // level\\ubcc4 mix fee\\n    uint mixFee;\\n    // \\ub808\\ubca8\\uc5c5 \\uc131\\uacf5\\uc2dc level\\ubcc4 \\ucd08\\uae30 base \\ud655\\ub960\\n    uint24 initBaseProb;\\n    // level\\ubcc4 \\ucd94\\uac00 \\ud655\\ub960 \\ubc38\\ub7f0\\uc2a4 \\uc870\\uc815\\uac12\\n    uint16 mixExp;\\n    // level\\ubcc4 \\ud569\\uc131 \\uc2e4\\ud328\\uc2dc \\ucd94\\uac00 \\ud655\\ub960 min,max\\n    uint24 failedAddProbMin;\\n    // 1000 = 0.1%, 10000 = 0.01%\\n    uint24 failedAddProbMax;\\n}\\n\\nstruct P0_MergePfGrade {\\n    uint8 grade;\\n    string gradeName;\\n    uint mergeFee;\\n    uint mergeUseItemAmount;\\n    uint latestId;\\n    uint setMatadataId;\\n    bool isOpen;\\n}\\nstruct P0_MergeState {\\n    uint agencyIncomePercent;\\n    uint influencerIncomePercent;\\n    \\n}\\n// //- Distribute struct\\nstruct Distribute_State {\\n    uint beforeP2Usdt;\\n    uint beforeP2Per;\\n    uint beforeTeamUsdt;\\n    // distribute ratios\\n    uint24 p1Ratio;\\n    uint24 p2PerRatio;\\n    uint24 p2UsdtRatio;\\n    uint24 burnRatio;\\n    uint24 teamUsdtRatio;\\n}\\n// DB > Filtered User Struct\\nstruct User {\\n    // DB > idx\\n    uint userId;\\n    // token itme ID\\n    uint itemId;\\n    address incomeAddr;\\n    uint feeBalance;\\n    bool isAble;\\n    uint mintCount;\\n    uint useLevelupCount;\\n    uint useMergeCount;\\n    //\\ub808\\ud37c\\ub7f4\\ub85c \\uc5bb\\uc740 \\uc218\\uc775\\n    uint referralIncome;\\n    address agency;\\n    uint agencyIncome;\\n}\\n\\n// P0 End\\nstruct AppStorage {\\n    // address constants\\n    mapping(string => address) contracts;\\n    // i-Tez/////////////////////////////\\n    // P0 ///////////////////////////////\\n    P0_State p0_states;\\n    P0_GradeInfo[11] p0_gradeInfos;\\n    mapping(uint => P0_PerFriendsProb) p0_perFriendsProbs;\\n    /////////////////////////////////////\\n    // Distribute ///////////////////////\\n    Distribute_State distribute_states;\\n    uint aienMintFee;\\n    // Distribute\\n    uint ksSwapLimit;\\n    bool isAutoDistribute;\\n    // P0 - Item Merge Grade Infos\\n    mapping(uint8 => P0_MergePfGrade) p0_mergePfGrades;\\n    mapping(uint => string) pfMetaURI;\\n    P0_MergeState p0_mergeState;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n// 1,normal,  350000000000000000000,60,1000002, 1000023,true\\n\\n// 2,uncommon,700000000000000000000,1, 2000001, 2000023,true\\n/**\\n@dev global modifier\\n */\\ncontract Modifiers {\\n    modifier onlyDev() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    // modifier checkRole(uint16 _role) {\\n    //     AppStorage storage s = LibAppStorage.diamondStorage();\\n    //     require(\\n    //         s.roles[_role].accounts.contains(LibMeta.msgSender()),\\n    //         \\\"AccessControl: sender does not have required role\\\"\\n    //     );\\n    //     _;\\n    // }\\n}\\n\",\"keccak256\":\"0x8c8746653661d71cd186857f6d74ae44af0a2fffd9a434ab3a620d4bffa3ff25\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xaea50a523e0ff67f5fc59946320f11efcfc09c75a972788f2884b9d1198a83d9\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDistribute.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage, LibAppStorage} from \\\"./LibAppStorage.sol\\\";\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {IKlaySwap} from \\\"../interfaces/IKlaySwap.sol\\\";\\nimport {IP2} from \\\"../../Channel_iN/interfaces/IP2.sol\\\";\\nimport {IP1} from \\\"../../Channel_iN/interfaces/IP1.sol\\\";\\n\\nlibrary LibDistribute {\\n    //\\n    //\\n    // \\u2500\\u2500\\u2500 P0 LV UP DISTRIBUTION \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    function p0LvUpDistribute(\\n        address _agency,\\n        uint _agencyAmount,\\n        address _influencer,\\n        uint _influencerAmount,\\n        uint _totalAmount\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        (\\n            uint p1Amount,\\n            uint p2Amount,\\n            uint burnAmount,\\n            uint teamAmountForUsdt,\\n            uint p2AmountForUsdt\\n        ) = distributeCalc(_totalAmount);\\n        address per = s.contracts[\\\"per\\\"];\\n\\n        IERC20(per).transfer(_agency, _agencyAmount);\\n        IERC20(per).transfer(_influencer, _influencerAmount);\\n        IERC20(per).transfer(s.contracts[\\\"burn\\\"], burnAmount);\\n        IERC20(per).transfer(s.contracts[\\\"p2\\\"], p2Amount);\\n        IERC20(per).transfer(s.contracts[\\\"p1\\\"], p1Amount);\\n        IP2(s.contracts[\\\"p2\\\"]).addPerUsdtDistribution(0, p2Amount);\\n        IP1(s.contracts[\\\"p1\\\"]).diamond_P1_addDistributionAmountAll(p1Amount);\\n\\n        // IERC20(PER).transfer(P1, )\\n        // \\ucd94\\uac00 \\ub418\\uc5b4\\uc57c\\ud560 \\uac83\\ub4e4\\n        // 1.P1 10% PER\\n        // 2.P2 20% PER\\n        // 3.Burn 1% PER\\n        s.distribute_states.beforeP2Per += p2Amount;\\n        s.distribute_states.beforeP2Usdt += p2AmountForUsdt;\\n        s.distribute_states.beforeTeamUsdt += teamAmountForUsdt;\\n    }\\n\\n    function distributeCalc(\\n        uint _amount\\n    ) internal view returns (uint, uint, uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint _p1Amount = (_amount * s.distribute_states.p1Ratio) / 100;\\n        uint _p2Amount = (_amount * s.distribute_states.p2PerRatio) / 100;\\n        uint _burnAmount = (_amount * s.distribute_states.burnRatio) / 100;\\n        uint _teamAmountForUsdt = (_amount *\\n            s.distribute_states.teamUsdtRatio) / 100;\\n        uint _p2AmountForUsdt = (_amount * s.distribute_states.p2UsdtRatio) /\\n            100;\\n        return (\\n            _p1Amount,\\n            _p2Amount,\\n            _burnAmount,\\n            _teamAmountForUsdt,\\n            _p2AmountForUsdt\\n        );\\n    }\\n\\n    function swapToDistribute() internal {\\n        (bool run, uint thisBalance, uint estimateUsdt) = isSwap();\\n        require(run == true, \\\"swapToDistribute: swap is not needed\\\");\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        address[] memory path;\\n\\n        IERC20(s.contracts[\\\"per\\\"]).approve(\\n            s.contracts[\\\"klayswap\\\"],\\n            thisBalance\\n        );\\n\\n        IKlaySwap(s.contracts[\\\"klayswap\\\"]).exchangeKctPos(\\n            s.contracts[\\\"per\\\"],\\n            thisBalance,\\n            s.contracts[\\\"usdt\\\"],\\n            estimateUsdt,\\n            path\\n        );\\n\\n        _swapToCalculate();\\n    }\\n\\n    function _swapToCalculate() internal returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint usdtBalance = IERC20(s.contracts[\\\"usdt\\\"]).balanceOf(address(this));\\n        uint calculatePercent = s.distribute_states.p2UsdtRatio +\\n            s.distribute_states.teamUsdtRatio;\\n\\n        uint _p2UsdtAmount = (usdtBalance * s.distribute_states.p2UsdtRatio) /\\n            calculatePercent;\\n        uint _teamUsdtAmount = (usdtBalance *\\n            s.distribute_states.teamUsdtRatio) / calculatePercent;\\n\\n        IERC20(s.contracts[\\\"usdt\\\"]).transfer(s.contracts[\\\"p2\\\"], _p2UsdtAmount);\\n\\n        IERC20(s.contracts[\\\"usdt\\\"]).transfer(\\n            s.contracts[\\\"team\\\"],\\n            _teamUsdtAmount\\n        );\\n\\n        IP2(s.contracts[\\\"p2\\\"]).addPerUsdtDistribution(_p2UsdtAmount, 0);\\n\\n        s.distribute_states.beforeP2Per = 0;\\n        s.distribute_states.beforeP2Usdt = 0;\\n        s.distribute_states.beforeTeamUsdt = 0;\\n    }\\n\\n    function getDistributePrice() internal view returns (uint, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (\\n            s.distribute_states.beforeP2Usdt,\\n            s.distribute_states.beforeTeamUsdt,\\n            s.distribute_states.beforeP2Per\\n        );\\n    }\\n\\n    function isSwap() internal view returns (bool, uint, uint) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        address[] memory path;\\n        uint _balance = IERC20(s.contracts[\\\"per\\\"]).balanceOf(address(this));\\n\\n        uint estimateUsdt = IKlaySwap(s.contracts[\\\"klayswaputil\\\"]).estimateSwap(\\n            s.contracts[\\\"per\\\"],\\n            s.contracts[\\\"usdt\\\"],\\n            _balance,\\n            path\\n        );\\n\\n        if (estimateUsdt > s.ksSwapLimit && s.isAutoDistribute == true) {\\n            return (true, _balance, estimateUsdt);\\n        } else {\\n            return (false, 0, 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ce20bdd94d4e7b79fae6902110d7dd00773b2d18894643ceb46d95f3e003b2e\",\"license\":\"UNLICENSED\"},\"contracts/shared/libraries/LibMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"\\n            )\\n        );\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194f61daa9d3c92ca3de358b76506dbb1e9e39211dc5b49768f18cc38f85b1ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061309b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80639b0988f1116100b8578063be5de2fb1161007c578063be5de2fb14610339578063c7809e2f14610343578063cc6d37d61461035f578063ced1c9871461037b578063ef404fa214610397578063f6f00563146103b357610137565b80639b0988f114610290578063a4517553146102c5578063b545c43f146102e1578063b5643cdb146102fd578063b75670e01461031957610137565b806345d08ac6116100ff57806345d08ac6146101eb5780635c53ddae1461020757806374e35d19146102235780637fe5cca1146102435780639a6d98871461027457610137565b8063025aa16c1461013c5780631ad1d5dc146101585780631b907b2c1461017457806324eb911e146101a65780633a8e18de146101ca575b600080fd5b61015660048036038101906101519190611c59565b6103cf565b005b610172600480360381019061016d9190611d03565b6104dc565b005b61018e60048036038101906101899190611d72565b610551565b60405161019d93929190611dae565b60405180910390f35b6101ae6105f5565b6040516101c19796959493929190611df4565b60405180910390f35b6101d26106a6565b6040516101e29493929190611e9b565b60405180910390f35b61020560048036038101906102009190611ee0565b610711565b005b610221600480360381019061021c9190611ee0565b6107d2565b005b61022b6107f3565b60405161023a93929190611dae565b60405180910390f35b61025d60048036038101906102589190611ee0565b610827565b60405161026b929190611f8c565b60405180910390f35b61028e60048036038101906102899190611fe8565b61090c565b005b6102aa60048036038101906102a59190611d72565b6109dc565b6040516102bc96959493929190612075565b60405180910390f35b6102df60048036038101906102da91906120d6565b610b15565b005b6102fb60048036038101906102f69190612151565b610be5565b005b61031760048036038101906103129190611ee0565b610c19565b005b610321610c3a565b6040516103309392919061217e565b60405180910390f35b610341610c52565b005b61035d600480360381019061035891906121e1565b610c64565b005b61037960048036038101906103749190612283565b610dd1565b005b610395600480360381019061039091906122c3565b610e02565b005b6103b160048036038101906103ac919061236c565b610f21565b005b6103cd60048036038101906103c89190612431565b610fad565b005b6103d7611074565b60006103e161110f565b90508181602e016000868152602001908152602001600020908161040591906126ac565b508381602d0160008560ff1660ff1681526020019081526020016000206005018190555080600001604051610439906127d5565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ff7d6c58585856040518463ffffffff1660e01b81526004016104a4939291906127f9565b600060405180830381600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b5050505050505050565b6104e4611074565b60006104ee61110f565b905082816025016000868152602001908152602001600020600001908161051591906126ac565b508181602501600086815260200190815260200160002060010160006101000a81548162ffffff021916908362ffffff16021790555050505050565b60008060008061055f61110f565b905080602d0160008660ff1660ff1681526020019081526020016000206004015481602d0160008760ff1660ff1681526020019081526020016000206005015482602d0160008860ff1660ff1681526020019081526020016000206004015483602d0160008960ff1660ff168152602001908152602001600020600501546105e79190612866565b935093509350509193909250565b60008060008060008060008061060961110f565b90508060260160030160009054906101000a900462ffffff168160260160030160039054906101000a900462ffffff168260260160030160069054906101000a900462ffffff168360260160030160099054906101000a900462ffffff1684602601600301600c9054906101000a900462ffffff1685602f016000015486602f016001015497509750975097509750975097505090919293949596565b60008060008060006106b661110f565b90508060010160000160009054906101000a900462ffffff1681600101600101548260010160020160009054906101000a900461ffff168360010160020160029054906101000a900460ff1694509450945094505090919293565b610719611074565b600061072361110f565b905080600001604051610735906128e6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328e52aae836040518263ffffffff1660e01b815260040161079c91906128fb565b600060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b505050505050565b6107da611074565b60006107e461110f565b90508181602b01819055505050565b60008060008061080161110f565b905080602601600001548160260160020154826026016001015493509350935050909192565b606060008061083461110f565b905080602501600085815260200190815260200160002060000181602501600086815260200190815260200160002060010160009054906101000a900462ffffff16818054610882906124cf565b80601f01602080910402602001604051908101604052809291908181526020018280546108ae906124cf565b80156108fb5780601f106108d0576101008083540402835291602001916108fb565b820191906000526020600020905b8154815290600101906020018083116108de57829003601f168201915b505050505091509250925050915091565b610914611074565b600061091e61110f565b905080600001604051610930906128e6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d78d3ce88888888888886040518763ffffffff1660e01b81526004016109a196959493929190612916565b600060405180830381600087803b1580156109bb57600080fd5b505af11580156109cf573d6000803e3d6000fd5b5050505050505050505050565b60008060008060008060006109ef61110f565b9050806004018860ff16600b8110610a0a57610a09612977565b5b6003020160000160009054906101000a900460ff16816004018960ff16600b8110610a3857610a37612977565b5b6003020160010154826004018a60ff16600b8110610a5957610a58612977565b5b6003020160020160009054906101000a900462ffffff16836004018b60ff16600b8110610a8957610a88612977565b5b6003020160020160039054906101000a900461ffff16846004018c60ff16600b8110610ab857610ab7612977565b5b6003020160020160059054906101000a900462ffffff16856004018d60ff16600b8110610ae857610ae7612977565b5b6003020160020160089054906101000a900462ffffff169650965096509650965096505091939550919395565b610b1d611074565b6000610b2761110f565b9050858160260160030160006101000a81548162ffffff021916908362ffffff160217905550848160260160030160036101000a81548162ffffff021916908362ffffff160217905550838160260160030160066101000a81548162ffffff021916908362ffffff160217905550828160260160030160096101000a81548162ffffff021916908362ffffff1602179055508181602601600301600c6101000a81548162ffffff021916908362ffffff160217905550505050505050565b610bed611074565b6000610bf761110f565b90508181602c0160006101000a81548160ff0219169083151502179055505050565b610c21611074565b6000610c2b61110f565b90508181602a01819055505050565b6000806000610c47611114565b925092509250909192565b610c5a611074565b610c62611375565b565b610c6c611074565b6000610c7661110f565b905086816004018960ff16600b8110610c9257610c91612977565b5b6003020160000160006101000a81548160ff02191690831515021790555085816004018960ff16600b8110610cca57610cc9612977565b5b600302016001018190555084816004018960ff16600b8110610cef57610cee612977565b5b6003020160020160006101000a81548162ffffff021916908362ffffff16021790555083816004018960ff16600b8110610d2c57610d2b612977565b5b6003020160020160036101000a81548161ffff021916908361ffff16021790555082816004018960ff16600b8110610d6757610d66612977565b5b6003020160020160056101000a81548162ffffff021916908362ffffff16021790555081816004018960ff16600b8110610da457610da3612977565b5b6003020160020160086101000a81548162ffffff021916908362ffffff1602179055505050505050505050565b610dd9611074565b6000610de361110f565b90508281602f01600001819055508181602f0160010181905550505050565b610e0a611074565b6000610e1461110f565b90508681602d0160008960ff1660ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055508581602d0160008960ff1660ff1681526020019081526020016000206001019081610e7891906126ac565b508481602d0160008960ff1660ff168152602001908152602001600020600201819055508381602d0160008960ff1660ff168152602001908152602001600020600301819055508281602d0160008960ff1660ff168152602001908152602001600020600401819055508181602d0160008960ff1660ff16815260200190815260200160002060060160006101000a81548160ff02191690831515021790555050505050505050565b610f29611074565b6000610f3361110f565b9050848160010160000160006101000a81548162ffffff021916908362ffffff160217905550838160010160010181905550828160010160020160006101000a81548161ffff021916908361ffff160217905550818160010160020160026101000a81548160ff0219169083151502179055505050505050565b610fb5611074565b6000610fbf61110f565b905080600001604051610fd1906128e6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319eff0ab8585856040518463ffffffff1660e01b815260040161103c939291906129b5565b600060405180830381600087803b15801561105657600080fd5b505af115801561106a573d6000803e3d6000fd5b5050505050505050565b61107c611617565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110490612a65565b60405180910390fd5b565b600090565b60008060008061112261110f565b9050606060008260000160405161113890612ad1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161119f9190612ae6565b602060405180830381865afa1580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e09190612b16565b90506000836000016040516111f490612b8f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663692ca7a08560000160405161124e90612ad1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660000160405161128d90612bf0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685876040518563ffffffff1660e01b81526004016112dd9493929190612cc3565b602060405180830381865afa1580156112fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131e9190612b16565b905083602b01548111801561134857506001151584602c0160009054906101000a900460ff161515145b15611360576001828296509650965050505050611370565b6000806000965096509650505050505b909192565b6000806000611382611114565b92509250925060011515831515146113cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c690612d81565b60405180910390fd5b60006113d961110f565b90506060816000016040516113ed90612ad1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b38360000160405161144790612ded565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b8152600401611494929190612e02565b6020604051808303816000875af11580156114b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d79190612e40565b50816000016040516114e890612ded565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166352f28c178360000160405161154290612ad1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868560000160405161158290612bf0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687866040518663ffffffff1660e01b81526004016115d3959493929190612e6d565b600060405180830381600087803b1580156115ed57600080fd5b505af1158015611601573d6000803e3d6000fd5b5050505061160d611644565b5050505050505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008060008061165261110f565b905060008160000160405161166690612bf0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116cd9190612ae6565b602060405180830381865afa1580156116ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170e9190612b16565b9050600082602601600301600c9054906101000a900462ffffff168360260160030160069054906101000a900462ffffff1661174a9190612ec7565b62ffffff1690506000818460260160030160069054906101000a900462ffffff1662ffffff168461177b9190612efe565b6117859190612f6f565b905060008285602601600301600c9054906101000a900462ffffff1662ffffff16856117b19190612efe565b6117bb9190612f6f565b9050846000016040516117cd90612bf0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86600001604051611827906128e6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611874929190612e02565b6020604051808303816000875af1158015611893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b79190612e40565b50846000016040516118c890612bf0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8660000160405161192290612fec565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161196f929190612e02565b6020604051808303816000875af115801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b29190612e40565b50846000016040516119c3906128e6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b81d9a348360006040518363ffffffff1660e01b8152600401611a2d92919061303c565b600060405180830381600087803b158015611a4757600080fd5b505af1158015611a5b573d6000803e3d6000fd5b505050506000856026016001018190555060008560260160000181905550600085602601600201819055505050505050909192565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611ab781611aa4565b8114611ac257600080fd5b50565b600081359050611ad481611aae565b92915050565b600060ff82169050919050565b611af081611ada565b8114611afb57600080fd5b50565b600081359050611b0d81611ae7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b6682611b1d565b810181811067ffffffffffffffff82111715611b8557611b84611b2e565b5b80604052505050565b6000611b98611a90565b9050611ba48282611b5d565b919050565b600067ffffffffffffffff821115611bc457611bc3611b2e565b5b611bcd82611b1d565b9050602081019050919050565b82818337600083830152505050565b6000611bfc611bf784611ba9565b611b8e565b905082815260208101848484011115611c1857611c17611b18565b5b611c23848285611bda565b509392505050565b600082601f830112611c4057611c3f611b13565b5b8135611c50848260208601611be9565b91505092915050565b600080600060608486031215611c7257611c71611a9a565b5b6000611c8086828701611ac5565b9350506020611c9186828701611afe565b925050604084013567ffffffffffffffff811115611cb257611cb1611a9f565b5b611cbe86828701611c2b565b9150509250925092565b600062ffffff82169050919050565b611ce081611cc8565b8114611ceb57600080fd5b50565b600081359050611cfd81611cd7565b92915050565b600080600060608486031215611d1c57611d1b611a9a565b5b6000611d2a86828701611ac5565b935050602084013567ffffffffffffffff811115611d4b57611d4a611a9f565b5b611d5786828701611c2b565b9250506040611d6886828701611cee565b9150509250925092565b600060208284031215611d8857611d87611a9a565b5b6000611d9684828501611afe565b91505092915050565b611da881611aa4565b82525050565b6000606082019050611dc36000830186611d9f565b611dd06020830185611d9f565b611ddd6040830184611d9f565b949350505050565b611dee81611cc8565b82525050565b600060e082019050611e09600083018a611de5565b611e166020830189611de5565b611e236040830188611de5565b611e306060830187611de5565b611e3d6080830186611de5565b611e4a60a0830185611d9f565b611e5760c0830184611d9f565b98975050505050505050565b600061ffff82169050919050565b611e7a81611e63565b82525050565b60008115159050919050565b611e9581611e80565b82525050565b6000608082019050611eb06000830187611de5565b611ebd6020830186611d9f565b611eca6040830185611e71565b611ed76060830184611e8c565b95945050505050565b600060208284031215611ef657611ef5611a9a565b5b6000611f0484828501611ac5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f47578082015181840152602081019050611f2c565b60008484015250505050565b6000611f5e82611f0d565b611f688185611f18565b9350611f78818560208601611f29565b611f8181611b1d565b840191505092915050565b60006040820190508181036000830152611fa68185611f53565b9050611fb56020830184611de5565b9392505050565b611fc581611e80565b8114611fd057600080fd5b50565b600081359050611fe281611fbc565b92915050565b60008060008060008060c0878903121561200557612004611a9a565b5b600061201389828a01611ac5565b965050602061202489828a01611ac5565b955050604061203589828a01611ac5565b945050606061204689828a01611ac5565b935050608061205789828a01611ac5565b92505060a061206889828a01611fd3565b9150509295509295509295565b600060c08201905061208a6000830189611e8c565b6120976020830188611d9f565b6120a46040830187611de5565b6120b16060830186611e71565b6120be6080830185611de5565b6120cb60a0830184611de5565b979650505050505050565b600080600080600060a086880312156120f2576120f1611a9a565b5b600061210088828901611cee565b955050602061211188828901611cee565b945050604061212288828901611cee565b935050606061213388828901611cee565b925050608061214488828901611cee565b9150509295509295909350565b60006020828403121561216757612166611a9a565b5b600061217584828501611fd3565b91505092915050565b60006060820190506121936000830186611e8c565b6121a06020830185611d9f565b6121ad6040830184611d9f565b949350505050565b6121be81611e63565b81146121c957600080fd5b50565b6000813590506121db816121b5565b92915050565b600080600080600080600060e0888a031215612200576121ff611a9a565b5b600061220e8a828b01611afe565b975050602061221f8a828b01611fd3565b96505060406122308a828b01611ac5565b95505060606122418a828b01611cee565b94505060806122528a828b016121cc565b93505060a06122638a828b01611cee565b92505060c06122748a828b01611cee565b91505092959891949750929550565b6000806040838503121561229a57612299611a9a565b5b60006122a885828601611ac5565b92505060206122b985828601611ac5565b9150509250929050565b60008060008060008060c087890312156122e0576122df611a9a565b5b60006122ee89828a01611afe565b965050602087013567ffffffffffffffff81111561230f5761230e611a9f565b5b61231b89828a01611c2b565b955050604061232c89828a01611ac5565b945050606061233d89828a01611ac5565b935050608061234e89828a01611ac5565b92505060a061235f89828a01611fd3565b9150509295509295509295565b6000806000806080858703121561238657612385611a9a565b5b600061239487828801611cee565b94505060206123a587828801611ac5565b93505060406123b6878288016121cc565b92505060606123c787828801611fd3565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123fe826123d3565b9050919050565b61240e816123f3565b811461241957600080fd5b50565b60008135905061242b81612405565b92915050565b60008060006060848603121561244a57612449611a9a565b5b60006124588682870161241c565b935050602061246986828701611fd3565b925050604084013567ffffffffffffffff81111561248a57612489611a9f565b5b61249686828701611c2b565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124e757607f821691505b6020821081036124fa576124f96124a0565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026125627fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612525565b61256c8683612525565b95508019841693508086168417925050509392505050565b6000819050919050565b60006125a96125a461259f84611aa4565b612584565b611aa4565b9050919050565b6000819050919050565b6125c38361258e565b6125d76125cf826125b0565b848454612532565b825550505050565b600090565b6125ec6125df565b6125f78184846125ba565b505050565b5b8181101561261b576126106000826125e4565b6001810190506125fd565b5050565b601f8211156126605761263181612500565b61263a84612515565b81016020851015612649578190505b61265d61265585612515565b8301826125fc565b50505b505050565b600082821c905092915050565b600061268360001984600802612665565b1980831691505092915050565b600061269c8383612672565b9150826002028217905092915050565b6126b582611f0d565b67ffffffffffffffff8111156126ce576126cd611b2e565b5b6126d882546124cf565b6126e382828561261f565b600060209050601f8311600181146127165760008415612704578287015190505b61270e8582612690565b865550612776565b601f19841661272486612500565b60005b8281101561274c57848901518255600182019150602085019450602081019050612727565b868310156127695784890151612765601f891682612672565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f6462000000000000000000000000000000000000000000000000000000000000600082015250565b60006127bf60028361277e565b91506127ca82612789565b600282019050919050565b60006127e0826127b2565b9150819050919050565b6127f381611ada565b82525050565b600060608201905061280e6000830186611d9f565b61281b60208301856127ea565b818103604083015261282d8184611f53565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061287182611aa4565b915061287c83611aa4565b925082820390508181111561289457612893612837565b5b92915050565b7f7032000000000000000000000000000000000000000000000000000000000000600082015250565b60006128d060028361277e565b91506128db8261289a565b600282019050919050565b60006128f1826128c3565b9150819050919050565b60006020820190506129106000830184611d9f565b92915050565b600060c08201905061292b6000830189611d9f565b6129386020830188611d9f565b6129456040830187611d9f565b6129526060830186611d9f565b61295f6080830185611d9f565b61296c60a0830184611e8c565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6129af816123f3565b82525050565b60006060820190506129ca60008301866129a6565b6129d76020830185611e8c565b81810360408301526129e98184611f53565b9050949350505050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a4f602283611f18565b9150612a5a826129f3565b604082019050919050565b60006020820190508181036000830152612a7e81612a42565b9050919050565b7f7065720000000000000000000000000000000000000000000000000000000000600082015250565b6000612abb60038361277e565b9150612ac682612a85565b600382019050919050565b6000612adc82612aae565b9150819050919050565b6000602082019050612afb60008301846129a6565b92915050565b600081519050612b1081611aae565b92915050565b600060208284031215612b2c57612b2b611a9a565b5b6000612b3a84828501612b01565b91505092915050565b7f6b6c6179737761707574696c0000000000000000000000000000000000000000600082015250565b6000612b79600c8361277e565b9150612b8482612b43565b600c82019050919050565b6000612b9a82612b6c565b9150819050919050565b7f7573647400000000000000000000000000000000000000000000000000000000600082015250565b6000612bda60048361277e565b9150612be582612ba4565b600482019050919050565b6000612bfb82612bcd565b9150819050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612c3a816123f3565b82525050565b6000612c4c8383612c31565b60208301905092915050565b6000602082019050919050565b6000612c7082612c05565b612c7a8185612c10565b9350612c8583612c21565b8060005b83811015612cb6578151612c9d8882612c40565b9750612ca883612c58565b925050600181019050612c89565b5085935050505092915050565b6000608082019050612cd860008301876129a6565b612ce560208301866129a6565b612cf26040830185611d9f565b8181036060830152612d048184612c65565b905095945050505050565b7f73776170546f446973747269627574653a2073776170206973206e6f74206e6560008201527f6564656400000000000000000000000000000000000000000000000000000000602082015250565b6000612d6b602483611f18565b9150612d7682612d0f565b604082019050919050565b60006020820190508181036000830152612d9a81612d5e565b9050919050565b7f6b6c617973776170000000000000000000000000000000000000000000000000600082015250565b6000612dd760088361277e565b9150612de282612da1565b600882019050919050565b6000612df882612dca565b9150819050919050565b6000604082019050612e1760008301856129a6565b612e246020830184611d9f565b9392505050565b600081519050612e3a81611fbc565b92915050565b600060208284031215612e5657612e55611a9a565b5b6000612e6484828501612e2b565b91505092915050565b600060a082019050612e8260008301886129a6565b612e8f6020830187611d9f565b612e9c60408301866129a6565b612ea96060830185611d9f565b8181036080830152612ebb8184612c65565b90509695505050505050565b6000612ed282611cc8565b9150612edd83611cc8565b9250828201905062ffffff811115612ef857612ef7612837565b5b92915050565b6000612f0982611aa4565b9150612f1483611aa4565b9250828202612f2281611aa4565b91508282048414831517612f3957612f38612837565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612f7a82611aa4565b9150612f8583611aa4565b925082612f9557612f94612f40565b5b828204905092915050565b7f7465616d00000000000000000000000000000000000000000000000000000000600082015250565b6000612fd660048361277e565b9150612fe182612fa0565b600482019050919050565b6000612ff782612fc9565b9150819050919050565b6000819050919050565b600061302661302161301c84613001565b612584565b611aa4565b9050919050565b6130368161300b565b82525050565b60006040820190506130516000830185611d9f565b61305e602083018461302d565b939250505056fea2646970667358221220d670695e9b8b9a745958e061b785e6722681c53839a89819dec621330ac7fa0b64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80639b0988f1116100b8578063be5de2fb1161007c578063be5de2fb14610339578063c7809e2f14610343578063cc6d37d61461035f578063ced1c9871461037b578063ef404fa214610397578063f6f00563146103b357610137565b80639b0988f114610290578063a4517553146102c5578063b545c43f146102e1578063b5643cdb146102fd578063b75670e01461031957610137565b806345d08ac6116100ff57806345d08ac6146101eb5780635c53ddae1461020757806374e35d19146102235780637fe5cca1146102435780639a6d98871461027457610137565b8063025aa16c1461013c5780631ad1d5dc146101585780631b907b2c1461017457806324eb911e146101a65780633a8e18de146101ca575b600080fd5b61015660048036038101906101519190611c59565b6103cf565b005b610172600480360381019061016d9190611d03565b6104dc565b005b61018e60048036038101906101899190611d72565b610551565b60405161019d93929190611dae565b60405180910390f35b6101ae6105f5565b6040516101c19796959493929190611df4565b60405180910390f35b6101d26106a6565b6040516101e29493929190611e9b565b60405180910390f35b61020560048036038101906102009190611ee0565b610711565b005b610221600480360381019061021c9190611ee0565b6107d2565b005b61022b6107f3565b60405161023a93929190611dae565b60405180910390f35b61025d60048036038101906102589190611ee0565b610827565b60405161026b929190611f8c565b60405180910390f35b61028e60048036038101906102899190611fe8565b61090c565b005b6102aa60048036038101906102a59190611d72565b6109dc565b6040516102bc96959493929190612075565b60405180910390f35b6102df60048036038101906102da91906120d6565b610b15565b005b6102fb60048036038101906102f69190612151565b610be5565b005b61031760048036038101906103129190611ee0565b610c19565b005b610321610c3a565b6040516103309392919061217e565b60405180910390f35b610341610c52565b005b61035d600480360381019061035891906121e1565b610c64565b005b61037960048036038101906103749190612283565b610dd1565b005b610395600480360381019061039091906122c3565b610e02565b005b6103b160048036038101906103ac919061236c565b610f21565b005b6103cd60048036038101906103c89190612431565b610fad565b005b6103d7611074565b60006103e161110f565b90508181602e016000868152602001908152602001600020908161040591906126ac565b508381602d0160008560ff1660ff1681526020019081526020016000206005018190555080600001604051610439906127d5565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ff7d6c58585856040518463ffffffff1660e01b81526004016104a4939291906127f9565b600060405180830381600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b5050505050505050565b6104e4611074565b60006104ee61110f565b905082816025016000868152602001908152602001600020600001908161051591906126ac565b508181602501600086815260200190815260200160002060010160006101000a81548162ffffff021916908362ffffff16021790555050505050565b60008060008061055f61110f565b905080602d0160008660ff1660ff1681526020019081526020016000206004015481602d0160008760ff1660ff1681526020019081526020016000206005015482602d0160008860ff1660ff1681526020019081526020016000206004015483602d0160008960ff1660ff168152602001908152602001600020600501546105e79190612866565b935093509350509193909250565b60008060008060008060008061060961110f565b90508060260160030160009054906101000a900462ffffff168160260160030160039054906101000a900462ffffff168260260160030160069054906101000a900462ffffff168360260160030160099054906101000a900462ffffff1684602601600301600c9054906101000a900462ffffff1685602f016000015486602f016001015497509750975097509750975097505090919293949596565b60008060008060006106b661110f565b90508060010160000160009054906101000a900462ffffff1681600101600101548260010160020160009054906101000a900461ffff168360010160020160029054906101000a900460ff1694509450945094505090919293565b610719611074565b600061072361110f565b905080600001604051610735906128e6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328e52aae836040518263ffffffff1660e01b815260040161079c91906128fb565b600060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b505050505050565b6107da611074565b60006107e461110f565b90508181602b01819055505050565b60008060008061080161110f565b905080602601600001548160260160020154826026016001015493509350935050909192565b606060008061083461110f565b905080602501600085815260200190815260200160002060000181602501600086815260200190815260200160002060010160009054906101000a900462ffffff16818054610882906124cf565b80601f01602080910402602001604051908101604052809291908181526020018280546108ae906124cf565b80156108fb5780601f106108d0576101008083540402835291602001916108fb565b820191906000526020600020905b8154815290600101906020018083116108de57829003601f168201915b505050505091509250925050915091565b610914611074565b600061091e61110f565b905080600001604051610930906128e6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d78d3ce88888888888886040518763ffffffff1660e01b81526004016109a196959493929190612916565b600060405180830381600087803b1580156109bb57600080fd5b505af11580156109cf573d6000803e3d6000fd5b5050505050505050505050565b60008060008060008060006109ef61110f565b9050806004018860ff16600b8110610a0a57610a09612977565b5b6003020160000160009054906101000a900460ff16816004018960ff16600b8110610a3857610a37612977565b5b6003020160010154826004018a60ff16600b8110610a5957610a58612977565b5b6003020160020160009054906101000a900462ffffff16836004018b60ff16600b8110610a8957610a88612977565b5b6003020160020160039054906101000a900461ffff16846004018c60ff16600b8110610ab857610ab7612977565b5b6003020160020160059054906101000a900462ffffff16856004018d60ff16600b8110610ae857610ae7612977565b5b6003020160020160089054906101000a900462ffffff169650965096509650965096505091939550919395565b610b1d611074565b6000610b2761110f565b9050858160260160030160006101000a81548162ffffff021916908362ffffff160217905550848160260160030160036101000a81548162ffffff021916908362ffffff160217905550838160260160030160066101000a81548162ffffff021916908362ffffff160217905550828160260160030160096101000a81548162ffffff021916908362ffffff1602179055508181602601600301600c6101000a81548162ffffff021916908362ffffff160217905550505050505050565b610bed611074565b6000610bf761110f565b90508181602c0160006101000a81548160ff0219169083151502179055505050565b610c21611074565b6000610c2b61110f565b90508181602a01819055505050565b6000806000610c47611114565b925092509250909192565b610c5a611074565b610c62611375565b565b610c6c611074565b6000610c7661110f565b905086816004018960ff16600b8110610c9257610c91612977565b5b6003020160000160006101000a81548160ff02191690831515021790555085816004018960ff16600b8110610cca57610cc9612977565b5b600302016001018190555084816004018960ff16600b8110610cef57610cee612977565b5b6003020160020160006101000a81548162ffffff021916908362ffffff16021790555083816004018960ff16600b8110610d2c57610d2b612977565b5b6003020160020160036101000a81548161ffff021916908361ffff16021790555082816004018960ff16600b8110610d6757610d66612977565b5b6003020160020160056101000a81548162ffffff021916908362ffffff16021790555081816004018960ff16600b8110610da457610da3612977565b5b6003020160020160086101000a81548162ffffff021916908362ffffff1602179055505050505050505050565b610dd9611074565b6000610de361110f565b90508281602f01600001819055508181602f0160010181905550505050565b610e0a611074565b6000610e1461110f565b90508681602d0160008960ff1660ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055508581602d0160008960ff1660ff1681526020019081526020016000206001019081610e7891906126ac565b508481602d0160008960ff1660ff168152602001908152602001600020600201819055508381602d0160008960ff1660ff168152602001908152602001600020600301819055508281602d0160008960ff1660ff168152602001908152602001600020600401819055508181602d0160008960ff1660ff16815260200190815260200160002060060160006101000a81548160ff02191690831515021790555050505050505050565b610f29611074565b6000610f3361110f565b9050848160010160000160006101000a81548162ffffff021916908362ffffff160217905550838160010160010181905550828160010160020160006101000a81548161ffff021916908361ffff160217905550818160010160020160026101000a81548160ff0219169083151502179055505050505050565b610fb5611074565b6000610fbf61110f565b905080600001604051610fd1906128e6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319eff0ab8585856040518463ffffffff1660e01b815260040161103c939291906129b5565b600060405180830381600087803b15801561105657600080fd5b505af115801561106a573d6000803e3d6000fd5b5050505050505050565b61107c611617565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110490612a65565b60405180910390fd5b565b600090565b60008060008061112261110f565b9050606060008260000160405161113890612ad1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161119f9190612ae6565b602060405180830381865afa1580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e09190612b16565b90506000836000016040516111f490612b8f565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663692ca7a08560000160405161124e90612ad1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660000160405161128d90612bf0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685876040518563ffffffff1660e01b81526004016112dd9493929190612cc3565b602060405180830381865afa1580156112fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131e9190612b16565b905083602b01548111801561134857506001151584602c0160009054906101000a900460ff161515145b15611360576001828296509650965050505050611370565b6000806000965096509650505050505b909192565b6000806000611382611114565b92509250925060011515831515146113cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c690612d81565b60405180910390fd5b60006113d961110f565b90506060816000016040516113ed90612ad1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b38360000160405161144790612ded565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b8152600401611494929190612e02565b6020604051808303816000875af11580156114b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d79190612e40565b50816000016040516114e890612ded565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166352f28c178360000160405161154290612ad1565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868560000160405161158290612bf0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687866040518663ffffffff1660e01b81526004016115d3959493929190612e6d565b600060405180830381600087803b1580156115ed57600080fd5b505af1158015611601573d6000803e3d6000fd5b5050505061160d611644565b5050505050505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008060008061165261110f565b905060008160000160405161166690612bf0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116cd9190612ae6565b602060405180830381865afa1580156116ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170e9190612b16565b9050600082602601600301600c9054906101000a900462ffffff168360260160030160069054906101000a900462ffffff1661174a9190612ec7565b62ffffff1690506000818460260160030160069054906101000a900462ffffff1662ffffff168461177b9190612efe565b6117859190612f6f565b905060008285602601600301600c9054906101000a900462ffffff1662ffffff16856117b19190612efe565b6117bb9190612f6f565b9050846000016040516117cd90612bf0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86600001604051611827906128e6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611874929190612e02565b6020604051808303816000875af1158015611893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b79190612e40565b50846000016040516118c890612bf0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8660000160405161192290612fec565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161196f929190612e02565b6020604051808303816000875af115801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b29190612e40565b50846000016040516119c3906128e6565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b81d9a348360006040518363ffffffff1660e01b8152600401611a2d92919061303c565b600060405180830381600087803b158015611a4757600080fd5b505af1158015611a5b573d6000803e3d6000fd5b505050506000856026016001018190555060008560260160000181905550600085602601600201819055505050505050909192565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611ab781611aa4565b8114611ac257600080fd5b50565b600081359050611ad481611aae565b92915050565b600060ff82169050919050565b611af081611ada565b8114611afb57600080fd5b50565b600081359050611b0d81611ae7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b6682611b1d565b810181811067ffffffffffffffff82111715611b8557611b84611b2e565b5b80604052505050565b6000611b98611a90565b9050611ba48282611b5d565b919050565b600067ffffffffffffffff821115611bc457611bc3611b2e565b5b611bcd82611b1d565b9050602081019050919050565b82818337600083830152505050565b6000611bfc611bf784611ba9565b611b8e565b905082815260208101848484011115611c1857611c17611b18565b5b611c23848285611bda565b509392505050565b600082601f830112611c4057611c3f611b13565b5b8135611c50848260208601611be9565b91505092915050565b600080600060608486031215611c7257611c71611a9a565b5b6000611c8086828701611ac5565b9350506020611c9186828701611afe565b925050604084013567ffffffffffffffff811115611cb257611cb1611a9f565b5b611cbe86828701611c2b565b9150509250925092565b600062ffffff82169050919050565b611ce081611cc8565b8114611ceb57600080fd5b50565b600081359050611cfd81611cd7565b92915050565b600080600060608486031215611d1c57611d1b611a9a565b5b6000611d2a86828701611ac5565b935050602084013567ffffffffffffffff811115611d4b57611d4a611a9f565b5b611d5786828701611c2b565b9250506040611d6886828701611cee565b9150509250925092565b600060208284031215611d8857611d87611a9a565b5b6000611d9684828501611afe565b91505092915050565b611da881611aa4565b82525050565b6000606082019050611dc36000830186611d9f565b611dd06020830185611d9f565b611ddd6040830184611d9f565b949350505050565b611dee81611cc8565b82525050565b600060e082019050611e09600083018a611de5565b611e166020830189611de5565b611e236040830188611de5565b611e306060830187611de5565b611e3d6080830186611de5565b611e4a60a0830185611d9f565b611e5760c0830184611d9f565b98975050505050505050565b600061ffff82169050919050565b611e7a81611e63565b82525050565b60008115159050919050565b611e9581611e80565b82525050565b6000608082019050611eb06000830187611de5565b611ebd6020830186611d9f565b611eca6040830185611e71565b611ed76060830184611e8c565b95945050505050565b600060208284031215611ef657611ef5611a9a565b5b6000611f0484828501611ac5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f47578082015181840152602081019050611f2c565b60008484015250505050565b6000611f5e82611f0d565b611f688185611f18565b9350611f78818560208601611f29565b611f8181611b1d565b840191505092915050565b60006040820190508181036000830152611fa68185611f53565b9050611fb56020830184611de5565b9392505050565b611fc581611e80565b8114611fd057600080fd5b50565b600081359050611fe281611fbc565b92915050565b60008060008060008060c0878903121561200557612004611a9a565b5b600061201389828a01611ac5565b965050602061202489828a01611ac5565b955050604061203589828a01611ac5565b945050606061204689828a01611ac5565b935050608061205789828a01611ac5565b92505060a061206889828a01611fd3565b9150509295509295509295565b600060c08201905061208a6000830189611e8c565b6120976020830188611d9f565b6120a46040830187611de5565b6120b16060830186611e71565b6120be6080830185611de5565b6120cb60a0830184611de5565b979650505050505050565b600080600080600060a086880312156120f2576120f1611a9a565b5b600061210088828901611cee565b955050602061211188828901611cee565b945050604061212288828901611cee565b935050606061213388828901611cee565b925050608061214488828901611cee565b9150509295509295909350565b60006020828403121561216757612166611a9a565b5b600061217584828501611fd3565b91505092915050565b60006060820190506121936000830186611e8c565b6121a06020830185611d9f565b6121ad6040830184611d9f565b949350505050565b6121be81611e63565b81146121c957600080fd5b50565b6000813590506121db816121b5565b92915050565b600080600080600080600060e0888a031215612200576121ff611a9a565b5b600061220e8a828b01611afe565b975050602061221f8a828b01611fd3565b96505060406122308a828b01611ac5565b95505060606122418a828b01611cee565b94505060806122528a828b016121cc565b93505060a06122638a828b01611cee565b92505060c06122748a828b01611cee565b91505092959891949750929550565b6000806040838503121561229a57612299611a9a565b5b60006122a885828601611ac5565b92505060206122b985828601611ac5565b9150509250929050565b60008060008060008060c087890312156122e0576122df611a9a565b5b60006122ee89828a01611afe565b965050602087013567ffffffffffffffff81111561230f5761230e611a9f565b5b61231b89828a01611c2b565b955050604061232c89828a01611ac5565b945050606061233d89828a01611ac5565b935050608061234e89828a01611ac5565b92505060a061235f89828a01611fd3565b9150509295509295509295565b6000806000806080858703121561238657612385611a9a565b5b600061239487828801611cee565b94505060206123a587828801611ac5565b93505060406123b6878288016121cc565b92505060606123c787828801611fd3565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123fe826123d3565b9050919050565b61240e816123f3565b811461241957600080fd5b50565b60008135905061242b81612405565b92915050565b60008060006060848603121561244a57612449611a9a565b5b60006124588682870161241c565b935050602061246986828701611fd3565b925050604084013567ffffffffffffffff81111561248a57612489611a9f565b5b61249686828701611c2b565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124e757607f821691505b6020821081036124fa576124f96124a0565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026125627fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612525565b61256c8683612525565b95508019841693508086168417925050509392505050565b6000819050919050565b60006125a96125a461259f84611aa4565b612584565b611aa4565b9050919050565b6000819050919050565b6125c38361258e565b6125d76125cf826125b0565b848454612532565b825550505050565b600090565b6125ec6125df565b6125f78184846125ba565b505050565b5b8181101561261b576126106000826125e4565b6001810190506125fd565b5050565b601f8211156126605761263181612500565b61263a84612515565b81016020851015612649578190505b61265d61265585612515565b8301826125fc565b50505b505050565b600082821c905092915050565b600061268360001984600802612665565b1980831691505092915050565b600061269c8383612672565b9150826002028217905092915050565b6126b582611f0d565b67ffffffffffffffff8111156126ce576126cd611b2e565b5b6126d882546124cf565b6126e382828561261f565b600060209050601f8311600181146127165760008415612704578287015190505b61270e8582612690565b865550612776565b601f19841661272486612500565b60005b8281101561274c57848901518255600182019150602085019450602081019050612727565b868310156127695784890151612765601f891682612672565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f6462000000000000000000000000000000000000000000000000000000000000600082015250565b60006127bf60028361277e565b91506127ca82612789565b600282019050919050565b60006127e0826127b2565b9150819050919050565b6127f381611ada565b82525050565b600060608201905061280e6000830186611d9f565b61281b60208301856127ea565b818103604083015261282d8184611f53565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061287182611aa4565b915061287c83611aa4565b925082820390508181111561289457612893612837565b5b92915050565b7f7032000000000000000000000000000000000000000000000000000000000000600082015250565b60006128d060028361277e565b91506128db8261289a565b600282019050919050565b60006128f1826128c3565b9150819050919050565b60006020820190506129106000830184611d9f565b92915050565b600060c08201905061292b6000830189611d9f565b6129386020830188611d9f565b6129456040830187611d9f565b6129526060830186611d9f565b61295f6080830185611d9f565b61296c60a0830184611e8c565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6129af816123f3565b82525050565b60006060820190506129ca60008301866129a6565b6129d76020830185611e8c565b81810360408301526129e98184611f53565b9050949350505050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a4f602283611f18565b9150612a5a826129f3565b604082019050919050565b60006020820190508181036000830152612a7e81612a42565b9050919050565b7f7065720000000000000000000000000000000000000000000000000000000000600082015250565b6000612abb60038361277e565b9150612ac682612a85565b600382019050919050565b6000612adc82612aae565b9150819050919050565b6000602082019050612afb60008301846129a6565b92915050565b600081519050612b1081611aae565b92915050565b600060208284031215612b2c57612b2b611a9a565b5b6000612b3a84828501612b01565b91505092915050565b7f6b6c6179737761707574696c0000000000000000000000000000000000000000600082015250565b6000612b79600c8361277e565b9150612b8482612b43565b600c82019050919050565b6000612b9a82612b6c565b9150819050919050565b7f7573647400000000000000000000000000000000000000000000000000000000600082015250565b6000612bda60048361277e565b9150612be582612ba4565b600482019050919050565b6000612bfb82612bcd565b9150819050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612c3a816123f3565b82525050565b6000612c4c8383612c31565b60208301905092915050565b6000602082019050919050565b6000612c7082612c05565b612c7a8185612c10565b9350612c8583612c21565b8060005b83811015612cb6578151612c9d8882612c40565b9750612ca883612c58565b925050600181019050612c89565b5085935050505092915050565b6000608082019050612cd860008301876129a6565b612ce560208301866129a6565b612cf26040830185611d9f565b8181036060830152612d048184612c65565b905095945050505050565b7f73776170546f446973747269627574653a2073776170206973206e6f74206e6560008201527f6564656400000000000000000000000000000000000000000000000000000000602082015250565b6000612d6b602483611f18565b9150612d7682612d0f565b604082019050919050565b60006020820190508181036000830152612d9a81612d5e565b9050919050565b7f6b6c617973776170000000000000000000000000000000000000000000000000600082015250565b6000612dd760088361277e565b9150612de282612da1565b600882019050919050565b6000612df882612dca565b9150819050919050565b6000604082019050612e1760008301856129a6565b612e246020830184611d9f565b9392505050565b600081519050612e3a81611fbc565b92915050565b600060208284031215612e5657612e55611a9a565b5b6000612e6484828501612e2b565b91505092915050565b600060a082019050612e8260008301886129a6565b612e8f6020830187611d9f565b612e9c60408301866129a6565b612ea96060830185611d9f565b8181036080830152612ebb8184612c65565b90509695505050505050565b6000612ed282611cc8565b9150612edd83611cc8565b9250828201905062ffffff811115612ef857612ef7612837565b5b92915050565b6000612f0982611aa4565b9150612f1483611aa4565b9250828202612f2281611aa4565b91508282048414831517612f3957612f38612837565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612f7a82611aa4565b9150612f8583611aa4565b925082612f9557612f94612f40565b5b828204905092915050565b7f7465616d00000000000000000000000000000000000000000000000000000000600082015250565b6000612fd660048361277e565b9150612fe182612fa0565b600482019050919050565b6000612ff782612fc9565b9150819050919050565b6000819050919050565b600061302661302161301c84613001565b612584565b611aa4565b9050919050565b6130368161300b565b82525050565b60006040820190506130516000830185611d9f565b61305e602083018461302d565b939250505056fea2646970667358221220d670695e9b8b9a745958e061b785e6722681c53839a89819dec621330ac7fa0b64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "admin_P2_layer_setting(uint256,uint256,uint256,uint256,uint256,bool)": {
        "details": "P2 Admin functions"
      },
      "admin_distribute_setStates(uint24,uint24,uint24,uint24,uint24)": {
        "details": "DistriBute Admin functions"
      },
      "admin_p0_setStates(uint24,uint256,uint16,bool)": {
        "details": "P0 Admin functions"
      },
      "admin_setAienMintFee(uint256)": {
        "details": "aien mint variables"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}